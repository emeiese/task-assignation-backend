// Generated by purs bundle 0.12.5
var PS = {};
(function(exports) {
  "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];

  // | A `Semigroupoid` is similar to a [`Category`](#category) but does not
  // | require an identity element `identity`, just composable morphisms.
  // |
  // | `Semigroupoid`s must satisfy the following law:
  // |
  // | - Associativity: `p <<< (q <<< r) = (p <<< q) <<< r`
  // |
  // | One example of a `Semigroupoid` is the function type constructor `(->)`,
  // | with `(<<<)` defined as function composition.
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                

  // | `Category`s consist of objects and composable morphisms between them, and
  // | as such are [`Semigroupoids`](#semigroupoid), but unlike `semigroupoids`
  // | must have an identity element.
  // |
  // | Instances must satisfy the following law in addition to the
  // | `Semigroupoid` law:
  // |
  // | - Identity: `identity <<< p = p <<< identity = p`
  var Category = function (Semigroupoid0, identity) {
      this.Semigroupoid0 = Semigroupoid0;
      this.identity = identity;
  };
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];                    

  // | The `on` function is used to change the domain of a binary operator.
  // |
  // | For example, we can create a function which compares two records based on the values of their `x` properties:
  // |
  // | ```purescript
  // | compareX :: forall r. { x :: Number | r } -> { x :: Number | r } -> Ordering
  // | compareX = compare `on` _.x
  // | ```
  var on = function (f) {
      return function (g) {
          return function (x) {
              return function (y) {
                  return f(g(x))(g(y));
              };
          };
      };
  };

  // | Flips the order of the arguments to a function of two arguments.
  // |
  // | ```purescript
  // | flip const 1 2 = const 2 1 = 2
  // | ```
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };

  // | Returns its first argument and ignores its second.
  // |
  // | ```purescript
  // | const 1 "hello" = 1
  // | ```
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };

  // | Applies an argument to a function. This is primarily used as the `(#)`
  // | operator, which allows parentheses to be ommitted in some cases, or as a
  // | natural way to apply a value to a chain of composed functions.
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
  exports["on"] = on;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var $foreign = $PS["Data.Functor"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                

  // | A `Functor` is a type constructor which supports a mapping operation
  // | `map`.
  // |
  // | `map` can be used to turn functions `a -> b` into functions
  // | `f a -> f b` whose argument and return types use the type constructor `f`
  // | to represent some computational context.
  // |
  // | Instances must satisfy the following laws:
  // |
  // | - Identity: `map identity = identity`
  // | - Composition: `map (f <<< g) = map f <<< map g`
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };

  // | `mapFlipped` is `map` with its arguments reversed. For example:
  // |
  // | ```purescript
  // | [1, 2, 3] <#> \n -> n * n
  // | ```
  var mapFlipped = function (dictFunctor) {
      return function (fa) {
          return function (f) {
              return map(dictFunctor)(f)(fa);
          };
      };
  };

  // | The `void` function is used to ignore the type wrapped by a
  // | [`Functor`](#functor), replacing it with `Unit` and keeping only the type
  // | information provided by the type constructor itself.
  // |
  // | `void` is often useful when using `do` notation to change the return type
  // | of a monadic computation:
  // |
  // | ```purescript
  // | main = forE 1 10 \n -> void do
  // |   print n
  // |   print (n * n)
  // | ```
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };

  // | A version of `voidRight` with its arguments flipped.
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);

  // | Apply a value in a computational context to a value in no context.
  // |
  // | Generalizes `flip`.
  // |
  // | ```purescript
  // | longEnough :: String -> Bool
  // | hasSymbol :: String -> Bool
  // | hasDigit :: String -> Bool
  // | password :: String
  // |
  // | validate :: String -> Array Bool
  // | validate = flap [longEnough, hasSymbol, hasDigit]
  // | ```
  // |
  // | ```purescript
  // | flap (-) 3 4 == 1
  // | threeve <$> Just 1 <@> 'a' <*> Just true == Just (threeve 1 'a' true)
  // | ```
  var flap = function (dictFunctor) {
      return function (ff) {
          return function (x) {
              return map(dictFunctor)(function (f) {
                  return f(x);
              })(ff);
          };
      };
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["mapFlipped"] = mapFlipped;
  exports["void"] = $$void;
  exports["voidLeft"] = voidLeft;
  exports["flap"] = flap;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var $foreign = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];                

  // | The `Apply` class provides the `(<*>)` which is used to apply a function
  // | to an argument under a type constructor.
  // |
  // | `Apply` can be used to lift functions of two or more arguments to work on
  // | values wrapped with the type constructor `f`. It might also be understood
  // | in terms of the `lift2` function:
  // |
  // | ```purescript
  // | lift2 :: forall f a b c. Apply f => (a -> b -> c) -> f a -> f b -> f c
  // | lift2 f a b = f <$> a <*> b
  // | ```
  // |
  // | `(<*>)` is recovered from `lift2` as `lift2 ($)`. That is, `(<*>)` lifts
  // | the function application operator `($)` to arguments wrapped with the
  // | type constructor `f`.
  // |
  // | Instances must satisfy the following law in addition to the `Functor`
  // | laws:
  // |
  // | - Associative composition: `(<<<) <$> f <*> g <*> h = f <*> (g <*> h)`
  // |
  // | Formally, `Apply` represents a strong lax semi-monoidal endofunctor.
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };

  // | Combine two effectful actions, keeping only the result of the first.
  var applyFirst = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"])(a))(b);
          };
      };
  };

  // | Combine two effectful actions, keeping only the result of the second.
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };

  // | Lift a function of two arguments to a function which accepts and returns
  // | values wrapped with the type constructor `f`.
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applyFirst"] = applyFirst;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Unit = $PS["Data.Unit"];                

  // | The `Applicative` type class extends the [`Apply`](#apply) type class
  // | with a `pure` function, which can be used to create values of type `f a`
  // | from values of type `a`.
  // |
  // | Where [`Apply`](#apply) provides the ability to lift functions of two or
  // | more arguments to functions whose arguments are wrapped using `f`, and
  // | [`Functor`](#functor) provides the ability to lift functions of one
  // | argument, `pure` can be seen as the function which lifts functions of
  // | _zero_ arguments. That is, `Applicative` functors support a lifting
  // | operation for any number of function arguments.
  // |
  // | Instances must satisfy the following laws in addition to the `Apply`
  // | laws:
  // |
  // | - Identity: `(pure identity) <*> v = v`
  // | - Composition: `pure (<<<) <*> f <*> g <*> h = f <*> (g <*> h)`
  // | - Homomorphism: `(pure f) <*> (pure x) = pure (f x)`
  // | - Interchange: `u <*> (pure y) = (pure (_ $ y)) <*> u`
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };

  // | Perform an applicative action unless a condition is true.
  var unless = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (!v) {
                  return v1;
              };
              if (v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 62, column 1 - line 62, column 65): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };

  // | Perform an applicative action when a condition is true.
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative (line 57, column 1 - line 57, column 63): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };

  // | `liftA1` provides a default implementation of `(<$>)` for any
  // | [`Applicative`](#applicative) functor, without using `(<$>)` as provided
  // | by the [`Functor`](#functor)-[`Applicative`](#applicative) superclass
  // | relationship.
  // |
  // | `liftA1` can therefore be used to write [`Functor`](#functor) instances
  // | as follows:
  // |
  // | ```purescript
  // | instance functorF :: Functor F where
  // |   map = liftA1
  // | ```
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["unless"] = unless;
  exports["when"] = when;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqBooleanImpl = refEq;
  exports.eqIntImpl = refEq;
  exports.eqNumberImpl = refEq;
  exports.eqCharImpl = refEq;
  exports.eqStringImpl = refEq;

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs === ys) return true;
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];

  // | The `Eq1` type class represents type constructors with decidable equality.
  var Eq1 = function (eq1) {
      this.eq1 = eq1;
  };

  // | The `Eq` type class represents types which support decidable equality.
  // |
  // | `Eq` instances should satisfy the following laws:
  // |
  // | - Reflexivity: `x == x = true`
  // | - Symmetry: `x == y = y == x`
  // | - Transitivity: if `x == y` and `y == z` then `x == z`
  // |
  // | **Note:** The `Number` type is not an entirely law abiding member of this
  // | class due to the presence of `NaN`, since `NaN /= NaN`. Additionally,
  // | computing with `Number` can result in a loss of precision, so sometimes
  // | values that should be equivalent are not.
  var Eq = function (eq) {
      this.eq = eq;
  }; 
  var eqString = new Eq($foreign.eqStringImpl);
  var eqNumber = new Eq($foreign.eqNumberImpl);
  var eqInt = new Eq($foreign.eqIntImpl);
  var eqChar = new Eq($foreign.eqCharImpl);
  var eqBoolean = new Eq($foreign.eqBooleanImpl);
  var eq1 = function (dict) {
      return dict.eq1;
  };
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  };

  // | `notEq` tests whether one value is _not equal_ to another. Shorthand for
  // | `not (eq x y)`.
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["Eq1"] = Eq1;
  exports["eq1"] = eq1;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqChar"] = eqChar;
  exports["eqString"] = eqString;
  exports["eqArray"] = eqArray;
})(PS);
(function(exports) {
  "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.HeytingAlgebra"] = $PS["Data.HeytingAlgebra"] || {};
  var exports = $PS["Data.HeytingAlgebra"];
  var $foreign = $PS["Data.HeytingAlgebra"];

  // | The `HeytingAlgebra` type class represents types that are bounded lattices with
  // | an implication operator such that the following laws hold:
  // |
  // | - Associativity:
  // |   - `a || (b || c) = (a || b) || c`
  // |   - `a && (b && c) = (a && b) && c`
  // | - Commutativity:
  // |   - `a || b = b || a`
  // |   - `a && b = b && a`
  // | - Absorption:
  // |   - `a || (a && b) = a`
  // |   - `a && (a || b) = a`
  // | - Idempotent:
  // |   - `a || a = a`
  // |   - `a && a = a`
  // | - Identity:
  // |   - `a || ff = a`
  // |   - `a && tt = a`
  // | - Implication:
  // |   - ``a `implies` a = tt``
  // |   - ``a && (a `implies` b) = a && b``
  // |   - ``b && (a `implies` b) = b``
  // |   - ``a `implies` (b && c) = (a `implies` b) && (a `implies` c)``
  // | - Complemented:
  // |   - ``not a = a `implies` ff``
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Alt"] = $PS["Control.Alt"] || {};
  var exports = $PS["Control.Alt"];                          

  // | The `Alt` type class identifies an associative operation on a type
  // | constructor.  It is similar to `Semigroup`, except that it applies to
  // | types of kind `* -> *`, like `Array` or `List`, rather than concrete types
  // | `String` or `Number`.
  // |
  // | `Alt` instances are required to satisfy the following laws:
  // |
  // | - Associativity: `(x <|> y) <|> z == x <|> (y <|> z)`
  // | - Distributivity: `f <$> (x <|> y) == (f <$> x) <|> (f <$> y)`
  // |
  // | For example, the `Array` (`[]`) type is an instance of `Alt`, where
  // | `(<|>)` is defined to be concatenation.
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };                                                       
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Alternative"] = $PS["Control.Alternative"] || {};
  var exports = $PS["Control.Alternative"];              

  // | The `Alternative` type class has no members of its own; it just specifies
  // | that the type constructor has both `Applicative` and `Plus` instances.
  // |
  // | Types which have `Alternative` instances should also satisfy the following
  // | laws:
  // |
  // | - Distributivity: `(f <|> g) <*> x == (f <*> x) <|> (g <*> x)`
  // | - Annihilation: `empty <*> f = empty`
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  exports["Alternative"] = Alternative;
})(PS);
(function(exports) {
  "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var $foreign = $PS["Control.Bind"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Function = $PS["Data.Function"];                

  // | A class for types whose values can safely be discarded
  // | in a `do` notation block.
  // |
  // | An example is the `Unit` type, since there is only one
  // | possible value which can be returned.
  var Discard = function (discard) {
      this.discard = discard;
  };

  // | The `Bind` type class extends the [`Apply`](#apply) type class with a
  // | "bind" operation `(>>=)` which composes computations in sequence, using
  // | the return value of one computation to determine the next computation.
  // |
  // | The `>>=` operator can also be expressed using `do` notation, as follows:
  // |
  // | ```purescript
  // | x >>= f = do y <- x
  // |              f y
  // | ```
  // |
  // | where the function argument of `f` is given the name `y`.
  // |
  // | Instances must satisfy the following law in addition to the `Apply`
  // | laws:
  // |
  // | - Associativity: `(x >>= f) >>= g = x >>= (\k -> f k >>= g)`
  // |
  // | Associativity tells us that we can regroup operations which use `do`
  // | notation so that we can unambiguously write, for example:
  // |
  // | ```purescript
  // | do x <- m1
  // |    y <- m2 x
  // |    m3 x y
  // | ```
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };

  // | `bindFlipped` is `bind` with its arguments reversed. For example:
  // |
  // | ```purescript
  // | print =<< random
  // | ```
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };

  // | Backwards Kleisli composition.
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };

  // | Forwards Kleisli composition.
  // |
  // | For example:
  // |
  // | ```purescript
  // | import Data.Array (head, tail)
  // |
  // | third = tail >=> tail >=> head
  // | ```
  var composeKleisli = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bind(dictBind)(f(a))(g);
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["composeKleisli"] = composeKleisli;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];                

  // | The `Monad` type class combines the operations of the `Bind` and
  // | `Applicative` type classes. Therefore, `Monad` instances represent type
  // | constructors which support sequential composition, and also lifting of
  // | functions of arbitrary arity.
  // |
  // | Instances must satisfy the following laws in addition to the
  // | `Applicative` and `Bind` laws:
  // |
  // | - Left Identity: `pure x >>= f = f x`
  // | - Right Identity: `x >>= pure = x`
  // | - Applicative Superclass: `apply = ap`
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };

  // | `ap` provides a default implementation of `(<*>)` for any
  // | [`Monad`](#monad), without using `(<*>)` as provided by the
  // | [`Apply`](#apply)-[`Monad`](#monad) superclass relationship.
  // |
  // | `ap` can therefore be used to write [`Apply`](#apply) instances as
  // | follows:
  // |
  // | ```purescript
  // | instance applyF :: Apply F where
  // |   apply = ap
  // | ```
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Plus"] = $PS["Control.Plus"] || {};
  var exports = $PS["Control.Plus"];                   

  // | The `Plus` type class extends the `Alt` type class with a value that
  // | should be the left and right identity for `(<|>)`.
  // |
  // | It is similar to `Monoid`, except that it applies to types of
  // | kind `* -> *`, like `Array` or `List`, rather than concrete types like
  // | `String` or `Number`.
  // |
  // | `Plus` instances should satisfy the following laws:
  // |
  // | - Left identity: `empty <|> x == x`
  // | - Right identity: `x <|> empty == x`
  // | - Annihilation: `f <$> empty == empty`
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };       
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.MonadZero"] = $PS["Control.MonadZero"] || {};
  var exports = $PS["Control.MonadZero"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Unit = $PS["Data.Unit"];                

  // | The `MonadZero` type class has no members of its own; it just specifies
  // | that the type has both `Monad` and `Alternative` instances.
  // |
  // | Types which have `MonadZero` instances should also satisfy the following
  // | laws:
  // |
  // | - Annihilation: `empty >>= f = empty`
  var MonadZero = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  }; 

  // | Fail using `Plus` if a condition does not hold, or
  // | succeed using `Monad` if it does.
  // |
  // | For example:
  // |
  // | ```purescript
  // | import Prelude
  // | import Control.Monad (bind)
  // | import Control.MonadZero (guard)
  // | import Data.Array ((..))
  // |
  // | factors :: Int -> Array Int
  // | factors n = do
  // |   a <- 1..n
  // |   b <- 1..n
  // |   guard $ a * b == n
  // |   pure a
  // | ```
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
          };
          throw new Error("Failed pattern match at Control.MonadZero (line 54, column 1 - line 54, column 52): " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
})(PS);
(function(exports) {
  "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g, // eslint-disable-line no-control-regex
      function (c, i) {
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };

  exports.join = function (separator) {
    return function (xs) {
      return xs.join(separator);
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];

  // | The `Show` type class represents those types which can be converted into
  // | a human-readable `String` representation.
  // |
  // | While not required, it is recommended that for any expression `x`, the
  // | string `show x` be executable PureScript code which evaluates to the same
  // | value as the expression `x`.
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];                

  // | The `Maybe` type is used to represent optional values and can be seen as
  // | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
  // | is the non-null value `x`.
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();

  // | The `Maybe` type is used to represent optional values and can be seen as
  // | something like a type-safe `null`, where `Nothing` is `null` and `Just x`
  // | is the non-null value `x`.
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();

  // | The `Show` instance allows `Maybe` values to be rendered as a string with
  // | `show` whenever there is an `Show` instance for the type the `Maybe`
  // | contains.
  var showMaybe = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Just) {
              return "(Just " + (Data_Show.show(dictShow)(v.value0) + ")");
          };
          if (v instanceof Nothing) {
              return "Nothing";
          };
          throw new Error("Failed pattern match at Data.Maybe (line 205, column 1 - line 205, column 47): " + [ v.constructor.name ]);
      });
  };

  // | Takes a default value, a function, and a `Maybe` value. If the `Maybe`
  // | value is `Nothing` the default value is returned, otherwise the function
  // | is applied to the value inside the `Just` and the result is returned.
  // |
  // | ``` purescript
  // | maybe x f Nothing == x
  // | maybe x f (Just y) == f y
  // | ```
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe (line 217, column 1 - line 217, column 51): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };

  // | Returns `true` when the `Maybe` value is `Nothing`.
  var isNothing = maybe(true)(Data_Function["const"](false));

  // | Returns `true` when the `Maybe` value was constructed with `Just`.
  var isJust = maybe(false)(Data_Function["const"](true));

  // | The `Functor` instance allows functions to transform the contents of a
  // | `Just` with the `<$>` operator:
  // |
  // | ``` purescript
  // | f <$> Just x == Just (f x)
  // | ```
  // |
  // | `Nothing` values are left untouched:
  // |
  // | ``` purescript
  // | f <$> Nothing == Nothing
  // | ```
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });

  // | Takes a default value, and a `Maybe` value. If the `Maybe` value is
  // | `Nothing` the default value is returned, otherwise the value inside the
  // | `Just` is returned.
  // |
  // | ``` purescript
  // | fromMaybe x Nothing == x
  // | fromMaybe x (Just y) == y
  // | ```
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.identity(Control_Category.categoryFn));
  };

  // | A partial function that extracts the value from the `Just` data
  // | constructor. Passing `Nothing` to `fromJust` will throw an error at
  // | runtime.
  var fromJust = function (dictPartial) {
      return function (v) {
          if (v instanceof Just) {
              return v.value0;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 268, column 1 - line 268, column 46): " + [ v.constructor.name ]);
      };
  }; 
  var eqMaybe = function (dictEq) {
      return new Data_Eq.Eq(function (x) {
          return function (y) {
              if (x instanceof Nothing && y instanceof Nothing) {
                  return true;
              };
              if (x instanceof Just && y instanceof Just) {
                  return Data_Eq.eq(dictEq)(x.value0)(y.value0);
              };
              return false;
          };
      });
  };

  // | The `Apply` instance allows functions contained within a `Just` to
  // | transform a value contained within a `Just` using the `apply` operator:
  // |
  // | ``` purescript
  // | Just f <*> Just x == Just (f x)
  // | ```
  // |
  // | `Nothing` values are left untouched:
  // |
  // | ``` purescript
  // | Just f <*> Nothing == Nothing
  // | Nothing <*> Just x == Nothing
  // | ```
  // |
  // | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used transform a
  // | pure function to take `Maybe`-typed arguments so `f :: a -> b -> c`
  // | becomes `f :: Maybe a -> Maybe b -> Maybe c`:
  // |
  // | ``` purescript
  // | f <$> Just x <*> Just y == Just (f x y)
  // | ```
  // |
  // | The `Nothing`-preserving behaviour of both operators means the result of
  // | an expression like the above but where any one of the values is `Nothing`
  // | means the whole result becomes `Nothing` also:
  // |
  // | ``` purescript
  // | f <$> Nothing <*> Just y == Nothing
  // | f <$> Just x <*> Nothing == Nothing
  // | f <$> Nothing <*> Nothing == Nothing
  // | ```
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 67, column 1 - line 67, column 35): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });

  // | The `Bind` instance allows sequencing of `Maybe` values and functions that
  // | return a `Maybe` by using the `>>=` operator:
  // |
  // | ``` purescript
  // | Just x >>= f = f x
  // | Nothing >>= f = Nothing
  // | ```
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe (line 125, column 1 - line 125, column 33): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });

  // | The `Applicative` instance enables lifting of values into `Maybe` with the
  // | `pure` function:
  // |
  // | ``` purescript
  // | pure x :: Maybe _ == Just x
  // | ```
  // |
  // | Combining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s
  // | `pure` can be used to pass a mixture of `Maybe` and non-`Maybe` typed
  // | values to a function that does not usually expect them, by using `pure`
  // | for any value that is not already `Maybe` typed:
  // |
  // | ``` purescript
  // | f <$> Just x <*> pure y == Just (f x y)
  // | ```
  // |
  // | Even though `pure = Just` it is recommended to use `pure` in situations
  // | like this as it allows the choice of `Applicative` to be changed later
  // | without having to go through and replace `Just` with a new constructor.
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);

  // | The `Monad` instance guarantees that there are both `Applicative` and
  // | `Bind` instances for `Maybe`. This also enables the `do` syntactic sugar:
  // |
  // | ``` purescript
  // | do
  // |   x' <- x
  // |   y' <- y
  // |   pure (f x' y')
  // | ```
  // |
  // | Which is equivalent to:
  // |
  // | ``` purescript
  // | x >>= (\x' -> y >>= (\y' -> pure (f x' y')))
  // | ```
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });

  // | The `Alt` instance allows for a choice to be made between two `Maybe`
  // | values with the `<|>` operator, where the first `Just` encountered
  // | is taken.
  // |
  // | ``` purescript
  // | Just x <|> Just y == Just x
  // | Nothing <|> Just y == Just y
  // | Nothing <|> Nothing == Nothing
  // | ```
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });

  // | The `Plus` instance provides a default `Maybe` value:
  // |
  // | ``` purescript
  // | empty :: Maybe _ == Nothing
  // | ```
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);

  // | The `Alternative` instance guarantees that there are both `Applicative` and
  // | `Plus` instances for `Maybe`.
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["fromJust"] = fromJust;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["eqMaybe"] = eqMaybe;
  exports["showMaybe"] = showMaybe;
})(PS);
(function(exports) {
  "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];

  // | The `Semigroup` type class identifies an associative operation on a type.
  // |
  // | Instances are required to satisfy the following law:
  // |
  // | - Associativity: `(x <> y) <> z = x <> (y <> z)`
  // |
  // | One example of a `Semigroup` is `String`, with `(<>)` defined as string
  // | concatenation.
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];

  // | A `Monoid` is a `Semigroup` with a value `mempty`, which is both a
  // | left and right unit for the associative operation `<>`:
  // |
  // | - Left unit: `(mempty <> x) = x`
  // | - Right unit: `(x <> mempty) = x`
  // |
  // | `Monoid`s are commonly used as the result of fold operations, where
  // | `<>` is used to combine individual results, and `mempty` gives the result
  // | of folding an empty collection of elements.
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Monoid.Conj"] = $PS["Data.Monoid.Conj"] || {};
  var exports = $PS["Data.Monoid.Conj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      

  // | Monoid and semigroup for conjunction.
  // |
  // | ``` purescript
  // | Conj x <> Conj y == Conj (x && y)
  // | (mempty :: Conj _) == Conj tt
  // | ```
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Monoid.Disj"] = $PS["Data.Monoid.Disj"] || {};
  var exports = $PS["Data.Monoid.Disj"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];      

  // | Monoid and semigroup for disjunction.
  // |
  // | ``` purescript
  // | Disj x <> Disj y == Disj (x || y)
  // | (mempty :: Disj _) == Disj bottom
  // | ```
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Newtype"] = $PS["Data.Newtype"] || {};
  var exports = $PS["Data.Newtype"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];                      

  // | A type class for `newtype`s to enable convenient wrapping and unwrapping,
  // | and the use of the other functions in this module.
  // |
  // | The compiler can derive instances of `Newtype` automatically:
  // |
  // | ``` purescript
  // | newtype EmailAddress = EmailAddress String
  // |
  // | derive instance newtypeEmailAddress :: Newtype EmailAddress _
  // | ```
  // |
  // | Note that deriving for `Newtype` instances requires that the type be
  // | defined as `newtype` rather than `data` declaration (even if the `data`
  // | structurally fits the rules of a `newtype`), and the use of a wildcard for
  // | the wrapped type.
  // |
  // | Instances must obey the following laws:
  // | ``` purescript
  // | unwrap <<< wrap = id
  // | wrap <<< unwrap = id
  // | ```
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };                        
  var newtypeDisj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Disj.Disj);
  var newtypeConj = new Newtype(function (v) {
      return v;
  }, Data_Monoid_Conj.Conj);

  // | Similar to `ala` but useful for cases where you want to use an additional
  // | projection with the higher order function:
  // |
  // | ``` purescript
  // | alaF Additive foldMap String.length ["hello", "world"] -- 10
  // | alaF Multiplicative foldMap Math.abs [1.0, -2.0, 3.0, -4.0] -- 24.0
  // | ```
  // |
  // | The type admits other possibilities due to the polymorphic `Functor`
  // | constraints, but the case described above works because ((->) a) is a
  // | `Functor`.
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($80) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($80)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
  exports["newtypeConj"] = newtypeConj;
  exports["newtypeDisj"] = newtypeDisj;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
  exports.ordNumberImpl = unsafeCompareImpl;
  exports.ordStringImpl = unsafeCompareImpl;
  exports.ordCharImpl = unsafeCompareImpl;

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Semigroup = $PS["Data.Semigroup"];      

  // | The `Ordering` data type represents the three possible outcomes of
  // | comparing two values:
  // |
  // | `LT` - The first value is _less than_ the second.
  // | `GT` - The first value is _greater than_ the second.
  // | `EQ` - The first value is _equal to_ the second.
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();

  // | The `Ordering` data type represents the three possible outcomes of
  // | comparing two values:
  // |
  // | `LT` - The first value is _less than_ the second.
  // | `GT` - The first value is _greater than_ the second.
  // | `EQ` - The first value is _equal to_ the second.
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();

  // | The `Ordering` data type represents the three possible outcomes of
  // | comparing two values:
  // |
  // | `LT` - The first value is _less than_ the second.
  // | `GT` - The first value is _greater than_ the second.
  // | `EQ` - The first value is _equal to_ the second.
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var semigroupOrdering = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof LT) {
              return LT.value;
          };
          if (v instanceof GT) {
              return GT.value;
          };
          if (v instanceof EQ) {
              return v1;
          };
          throw new Error("Failed pattern match at Data.Ordering (line 21, column 1 - line 21, column 49): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var eqOrdering = new Data_Eq.Eq(function (v) {
      return function (v1) {
          if (v instanceof LT && v1 instanceof LT) {
              return true;
          };
          if (v instanceof GT && v1 instanceof GT) {
              return true;
          };
          if (v instanceof EQ && v1 instanceof EQ) {
              return true;
          };
          return false;
      };
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["eqOrdering"] = eqOrdering;
  exports["semigroupOrdering"] = semigroupOrdering;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];

  // | The `Ord1` type class represents totally ordered type constructors.
  var Ord1 = function (Eq10, compare1) {
      this.Eq10 = Eq10;
      this.compare1 = compare1;
  };

  // | The `Ord` type class represents types which support comparisons with a
  // | _total order_.
  // |
  // | `Ord` instances should satisfy the laws of total orderings:
  // |
  // | - Reflexivity: `a <= a`
  // | - Antisymmetry: if `a <= b` and `b <= a` then `a = b`
  // | - Transitivity: if `a <= b` and `b <= c` then `a <= c`
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, $foreign.ordStringImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, $foreign.ordNumberImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var ordChar = new Ord(function () {
      return Data_Eq.eqChar;
  }, $foreign.ordCharImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value));
  var compare1 = function (dict) {
      return dict.compare1;
  };
  var compare = function (dict) {
      return dict.compare;
  };

  // | Test whether one value is _strictly greater than_ another.
  var greaterThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.GT) {
                  return true;
              };
              return false;
          };
      };
  };

  // | Test whether one value is _non-strictly greater than_ another.
  var greaterThanOrEq = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return false;
              };
              return true;
          };
      };
  };

  // | Test whether one value is _strictly less than_ another.
  var lessThan = function (dictOrd) {
      return function (a1) {
          return function (a2) {
              var v = compare(dictOrd)(a1)(a2);
              if (v instanceof Data_Ordering.LT) {
                  return true;
              };
              return false;
          };
      };
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return Data_Eq.eqArray(dictOrd.Eq0());
      }, (function () {
          var toDelta = function (x) {
              return function (y) {
                  var v = compare(dictOrd)(x)(y);
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Ord (line 65, column 7 - line 70, column 1): " + [ v.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
          };
      })());
  };

  // | Test whether a value is between a minimum and a maximum (inclusive).
  // | For example:
  // |
  // | ``` purescript
  // | let f = between 0 10
  // | f 0    == true
  // | f (-5) == false
  // | f 5    == true
  // | f 10   == true
  // | f 15   == false
  // | ```
  var between = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  if (lessThan(dictOrd)(x)(low)) {
                      return false;
                  };
                  if (greaterThan(dictOrd)(x)(hi)) {
                      return false;
                  };
                  return true;
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["Ord1"] = Ord1;
  exports["compare1"] = compare1;
  exports["lessThan"] = lessThan;
  exports["greaterThan"] = greaterThan;
  exports["greaterThanOrEq"] = greaterThanOrEq;
  exports["between"] = between;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordChar"] = ordChar;
  exports["ordArray"] = ordArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Foldable"] = $PS["Data.Foldable"] || {};
  var exports = $PS["Data.Foldable"];
  var $foreign = $PS["Data.Foldable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Monoid_Conj = $PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = $PS["Data.Monoid.Disj"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                

  // | `Foldable` represents data structures which can be _folded_.
  // |
  // | - `foldr` folds a structure from the right
  // | - `foldl` folds a structure from the left
  // | - `foldMap` folds a structure by accumulating values in a `Monoid`
  // |
  // | Default implementations are provided by the following functions:
  // |
  // | - `foldrDefault`
  // | - `foldlDefault`
  // | - `foldMapDefaultR`
  // | - `foldMapDefaultL`
  // |
  // | Note: some combinations of the default implementations are unsafe to
  // | use together - causing a non-terminating mutually recursive cycle.
  // | These combinations are documented per function.
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };

  // | Traverse a data structure, performing some effects encoded by an
  // | `Applicative` functor at each value, ignoring the final result.
  // |
  // | For example:
  // |
  // | ```purescript
  // | traverse_ print [1, 2, 3]
  // | ```
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };

  // | A version of `traverse_` with its arguments flipped.
  // |
  // | This can be useful when running an action written using do notation
  // | for every element in a data structure:
  // |
  // | For example:
  // |
  // | ```purescript
  // | for_ [1, 2, 3] \n -> do
  // |   print n
  // |   trace "squared is"
  // |   print (n * n)
  // | ```
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };

  // | Fold a data structure, accumulating values in some `Monoid`,
  // | combining adjacent elements using the specified separator.
  // |
  // | For example:
  // |
  // | ```purescript
  // | > intercalate ", " ["Lorem", "ipsum", "dolor"]
  // | = "Lorem, ipsum, dolor"
  // |
  // | > intercalate "*" ["a", "b", "c"]
  // | = "a*b*c"
  // |
  // | > intercalate [1] [[2, 3], [4, 5], [6, 7]]
  // | = [2, 3, 1, 4, 5, 1, 6, 7]
  // | ```
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  };

  // | Find the largest element of a structure, according to a given comparison
  // | function. The comparison function should represent a total ordering (see
  // | the `Ord` type class laws); if it does not, the behaviour is undefined.
  var maximumBy = function (dictFoldable) {
      return function (cmp) {
          var max$prime = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return new Data_Maybe.Just(v1);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return new Data_Maybe.Just((function () {
                          var $116 = Data_Eq.eq(Data_Ordering.eqOrdering)(cmp(v.value0)(v1))(Data_Ordering.GT.value);
                          if ($116) {
                              return v.value0;
                          };
                          return v1;
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Foldable (line 389, column 3 - line 389, column 27): " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          return foldl(dictFoldable)(max$prime)(Data_Maybe.Nothing.value);
      };
  };

  // | Find the largest element of a structure, according to its `Ord` instance.
  var maximum = function (dictOrd) {
      return function (dictFoldable) {
          return maximumBy(dictFoldable)(Data_Ord.compare(dictOrd));
      };
  }; 

  // | A default implementation of `foldMap` using `foldr`.
  // |
  // | Note: when defining a `Foldable` instance, this function is unsafe to use
  // | in combination with `foldrDefault`.
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };

  // | Fold a data structure, accumulating values in some `Monoid`.
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.identity(Control_Category.categoryFn));
      };
  };

  // | Try to find an element in a data structure which satisfies a predicate.
  var find = function (dictFoldable) {
      return function (p) {
          var go = function (v) {
              return function (v1) {
                  if (v instanceof Data_Maybe.Nothing && p(v1)) {
                      return new Data_Maybe.Just(v1);
                  };
                  return v;
              };
          };
          return foldl(dictFoldable)(go)(Data_Maybe.Nothing.value);
      };
  };

  // | `any f` is the same as `or <<< map f`; map a function over the structure,
  // | and then get the disjunction of the results.
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeDisj)(Data_Newtype.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };

  // | Test whether a value is an element of a data structure.
  var elem = function (dictFoldable) {
      return function (dictEq) {
          return function ($199) {
              return any(dictFoldable)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Eq.eq(dictEq)($199));
          };
      };
  };

  // | Test whether a value is not an element of a data structure.
  var notElem = function (dictFoldable) {
      return function (dictEq) {
          return function (x) {
              return function ($200) {
                  return !elem(dictFoldable)(dictEq)(x)($200);
              };
          };
      };
  };

  // | The disjunction of all the values in a data structure. When specialized
  // | to `Boolean`, this function will test whether any of the values in a data
  // | structure is `true`.
  var or = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return any(dictFoldable)(dictHeytingAlgebra)(Control_Category.identity(Control_Category.categoryFn));
      };
  };

  // | `all f` is the same as `and <<< map f`; map a function over the structure,
  // | and then get the conjunction of the results.
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Newtype.newtypeConj)(Data_Newtype.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["intercalate"] = intercalate;
  exports["or"] = or;
  exports["all"] = all;
  exports["any"] = any;
  exports["elem"] = elem;
  exports["notElem"] = notElem;
  exports["find"] = find;
  exports["maximum"] = maximum;
  exports["maximumBy"] = maximumBy;
  exports["foldableArray"] = foldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines a generic non-empty data structure, which adds an
  // | additional element to any container type.
  "use strict";
  $PS["Data.NonEmpty"] = $PS["Data.NonEmpty"] || {};
  var exports = $PS["Data.NonEmpty"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];                              

  // | A non-empty container of elements of type a.
  // |
  // | For example:
  // |
  // | ```purescript
  // | nonEmptyList :: NonEmpty List Int
  // | nonEmptyList = 0 :| empty
  // | ```
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();

  // | Create a non-empty structure with a single value.
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var showNonEmpty = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(NonEmpty " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (m) {
              return new NonEmpty(f(m.value0), Data_Functor.map(dictFunctor)(f)(m.value1));
          };
      });
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["showNonEmpty"] = showNonEmpty;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS);
(function(exports) {
  "use strict";

  // jshint maxparams: 3

  exports.traverseArrayImpl = function () {
    function array1(a) {
      return [a];
    }

    function array2(a) {
      return function (b) {
        return [a, b];
      };
    }

    function array3(a) {
      return function (b) {
        return function (c) {
          return [a, b, c];
        };
      };
    }

    function concat2(xs) {
      return function (ys) {
        return xs.concat(ys);
      };
    }

    return function (apply) {
      return function (map) {
        return function (pure) {
          return function (f) {
            return function (array) {
              function go(bot, top) {
                switch (top - bot) {
                case 0: return pure([]);
                case 1: return map(array1)(f(array[bot]));
                case 2: return apply(map(array2)(f(array[bot])))(f(array[bot + 1]));
                case 3: return apply(apply(map(array3)(f(array[bot])))(f(array[bot + 1])))(f(array[bot + 2]));
                default:
                  // This slightly tricky pivot selection aims to produce two
                  // even-length partitions where possible.
                  var pivot = bot + Math.floor((top - bot) / 4) * 2;
                  return apply(map(concat2)(go(bot, pivot)))(go(pivot, top));
                }
              }
              return go(0, array.length);
            };
          };
        };
      };
    };
  }();
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Traversable"] = $PS["Data.Traversable"] || {};
  var exports = $PS["Data.Traversable"];
  var $foreign = $PS["Data.Traversable"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];                                                      

  // | `Traversable` represents data structures which can be _traversed_,
  // | accumulating results and effects in some `Applicative` functor.
  // |
  // | - `traverse` runs an action for every element in a data structure,
  // |   and accumulates the results.
  // | - `sequence` runs the actions _contained_ in a data structure,
  // |   and accumulates the results.
  // |
  // | The `traverse` and `sequence` functions should be compatible in the
  // | following sense:
  // |
  // | - `traverse f xs = sequence (f <$> xs)`
  // | - `sequence = traverse identity`
  // |
  // | `Traversable` instances should also be compatible with the corresponding
  // | `Foldable` instances, in the following sense:
  // |
  // | - `foldMap f = runConst <<< traverse (Const <<< f)`
  // |
  // | Default implementations are provided by the following functions:
  // |
  // | - `traverseDefault`
  // | - `sequenceDefault`
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 

  // | A default implementation of `sequence` using `traverse`.
  var sequenceDefault = function (dictTraversable) {
      return function (dictApplicative) {
          return traverse(dictTraversable)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  var traversableArray = new Traversable(function () {
      return Data_Foldable.foldableArray;
  }, function () {
      return Data_Functor.functorArray;
  }, function (dictApplicative) {
      return sequenceDefault(traversableArray)(dictApplicative);
  }, function (dictApplicative) {
      return $foreign.traverseArrayImpl(Control_Apply.apply(dictApplicative.Apply0()))(Data_Functor.map((dictApplicative.Apply0()).Functor0()))(Control_Applicative.pure(dictApplicative));
  });
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
  exports["sequenceDefault"] = sequenceDefault;
  exports["traversableArray"] = traversableArray;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldrArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var maybe = f(value);
                if (isNothing(maybe)) return result;
                var tuple = fromJust(maybe);
                result.push(fst(tuple));
                value = snd(tuple);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable"] = PS["Data.Unfoldable"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Maybe.First"] = $PS["Data.Maybe.First"] || {};
  var exports = $PS["Data.Maybe.First"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Semigroup = $PS["Data.Semigroup"];      

  // | Monoid returning the first (left-most) non-`Nothing` value.
  // |
  // | ``` purescript
  // | First (Just x) <> First (Just y) == First (Just x)
  // | First Nothing <> First (Just y) == First (Just y)
  // | First Nothing <> Nothing == First Nothing
  // | mempty :: First _ == First Nothing
  // | ```
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });                                  
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | A data type and functions for working with ordered pairs.
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Maybe_First = $PS["Data.Maybe.First"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];                        

  // | A simple product type for wrapping a pair of component values.
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();

  // | Turn a function of two arguments into a function that expects a tuple.
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };

  // | Returns the second component of a tuple.
  var snd = function (v) {
      return v.value1;
  };

  // | Allows `Tuple`s to be rendered as a string with `show` whenever there are
  // | `Show` instances for both component types.
  var showTuple = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (v) {
              return "(Tuple " + (Data_Show.show(dictShow)(v.value0) + (" " + (Data_Show.show(dictShow1)(v.value1) + ")")));
          });
      };
  };

  // | Lookup a value in a data structure of `Tuple`s, generalizing association lists.
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function ($312) {
                  return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $163 = Data_Eq.eq(dictEq)(a)(v.value0);
                      if ($163) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      return Data_Maybe.Nothing.value;
                  })($312));
              };
          };
      };
  };                                                                                                    

  // | Returns the first component of a tuple.
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["lookup"] = lookup;
  exports["showTuple"] = showTuple;
})(PS);
(function(exports) {
  "use strict";

  exports.unfoldr1ArrayImpl = function (isNothing) {
    return function (fromJust) {
      return function (fst) {
        return function (snd) {
          return function (f) {
            return function (b) {
              var result = [];
              var value = b;
              while (true) { // eslint-disable-line no-constant-condition
                var tuple = f(value);
                result.push(fst(tuple));
                var maybe = snd(tuple);
                if (isNothing(maybe)) return result;
                value = fromJust(maybe);
              }
            };
          };
        };
      };
    };
  };
})(PS["Data.Unfoldable1"] = PS["Data.Unfoldable1"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Unfoldable1"] = $PS["Data.Unfoldable1"] || {};
  var exports = $PS["Data.Unfoldable1"];
  var $foreign = $PS["Data.Unfoldable1"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];                

  // | This class identifies data structures which can be _unfolded_.
  // |
  // | The generating function `f` in `unfoldr1 f` corresponds to the `uncons`
  // | operation of a non-empty list or array; it always returns a value, and
  // | then optionally a value to continue unfolding from.
  // |
  // | Note that, in order to provide an `Unfoldable1 t` instance, `t` need not
  // | be a type which is guaranteed to be non-empty. For example, the fact that
  // | lists can be empty does not prevent us from providing an
  // | `Unfoldable1 List` instance. However, the result of `unfoldr1` should
  // | always be non-empty.
  // |
  // | Every type which has an `Unfoldable` instance can be given an
  // | `Unfoldable1` instance (and, in fact, is required to, because
  // | `Unfoldable1` is a superclass of `Unfoldable`). However, there are types
  // | which have `Unfoldable1` instances but cannot have `Unfoldable` instances.
  // | In particular, types which are guaranteed to be non-empty, such as
  // | `NonEmptyList`, cannot be given `Unfoldable` instances.
  // |
  // | The utility of this class, then, is that it provides an `Unfoldable`-like
  // | interface while still permitting instances for guaranteed-non-empty types
  // | like `NonEmptyList`.
  var Unfoldable1 = function (unfoldr1) {
      this.unfoldr1 = unfoldr1;
  };
  var unfoldr1 = function (dict) {
      return dict.unfoldr1;
  }; 
  var unfoldable1Array = new Unfoldable1($foreign.unfoldr1ArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable1"] = Unfoldable1;
  exports["unfoldr1"] = unfoldr1;
  exports["unfoldable1Array"] = unfoldable1Array;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module provides a type class for _unfoldable functors_, i.e.
  // | functors which support an `unfoldr` operation.
  // |
  // | This allows us to unify various operations on arrays, lists,
  // | sequences, etc.
  "use strict";
  $PS["Data.Unfoldable"] = $PS["Data.Unfoldable"] || {};
  var exports = $PS["Data.Unfoldable"];
  var $foreign = $PS["Data.Unfoldable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];  

  // | This class identifies (possibly empty) data structures which can be
  // | _unfolded_.
  // |
  // | The generating function `f` in `unfoldr f` is understood as follows:
  // |
  // | - If `f b` is `Nothing`, then `unfoldr f b` should be empty.
  // | - If `f b` is `Just (Tuple a b1)`, then `unfoldr f b` should consist of `a`
  // |   appended to the result of `unfoldr f b1`.
  // |
  // | Note that it is not possible to give `Unfoldable` instances to types which
  // | represent structures which are guaranteed to be non-empty, such as
  // | `NonEmptyArray`: consider what `unfoldr (const Nothing)` should produce.
  // | Structures which are guaranteed to be non-empty can instead be given
  // | `Unfoldable1` instances.
  var Unfoldable = function (Unfoldable10, unfoldr) {
      this.Unfoldable10 = Unfoldable10;
      this.unfoldr = unfoldr;
  };
  var unfoldr = function (dict) {
      return dict.unfoldr;
  }; 
  var unfoldableArray = new Unfoldable(function () {
      return Data_Unfoldable1.unfoldable1Array;
  }, $foreign.unfoldrArrayImpl(Data_Maybe.isNothing)(Data_Maybe.fromJust())(Data_Tuple.fst)(Data_Tuple.snd));
  exports["Unfoldable"] = Unfoldable;
  exports["unfoldr"] = unfoldr;
  exports["unfoldableArray"] = unfoldableArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.List.Types"] = $PS["Data.List.Types"] || {};
  var exports = $PS["Data.List.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Unfoldable1 = $PS["Data.Unfoldable1"];                
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var toList = function (v) {
      return new Cons(v.value0, v.value1);
  };

  // chunked list Functor inspired by OCaml
  // https://discuss.ocaml.org/t/a-new-list-map-that-is-both-stack-safe-and-fast/865
  // chunk sizes determined through experimentation
  var listMap = function (f) {
      var chunkedRevMap = function ($copy_chunksAcc) {
          return function ($copy_v) {
              var $tco_var_chunksAcc = $copy_chunksAcc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(chunksAcc, v) {
                  if (v instanceof Cons && (v.value1 instanceof Cons && v.value1.value1 instanceof Cons)) {
                      $tco_var_chunksAcc = new Cons(v, chunksAcc);
                      $copy_v = v.value1.value1.value1;
                      return;
                  };
                  var unrolledMap = function (v1) {
                      if (v1 instanceof Cons && (v1.value1 instanceof Cons && v1.value1.value1 instanceof Nil)) {
                          return new Cons(f(v1.value0), new Cons(f(v1.value1.value0), Nil.value));
                      };
                      if (v1 instanceof Cons && v1.value1 instanceof Nil) {
                          return new Cons(f(v1.value0), Nil.value);
                      };
                      return Nil.value;
                  };
                  var reverseUnrolledMap = function ($copy_v1) {
                      return function ($copy_acc) {
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v1, acc) {
                              if (v1 instanceof Cons && (v1.value0 instanceof Cons && (v1.value0.value1 instanceof Cons && v1.value0.value1.value1 instanceof Cons))) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_acc = new Cons(f(v1.value0.value0), new Cons(f(v1.value0.value1.value0), new Cons(f(v1.value0.value1.value1.value0), acc)));
                                  return;
                              };
                              $tco_done = true;
                              return acc;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v1, $copy_acc);
                          };
                          return $tco_result;
                      };
                  };
                  $tco_done = true;
                  return reverseUnrolledMap(chunksAcc)(unrolledMap(v));
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_chunksAcc, $copy_v);
              };
              return $tco_result;
          };
      };
      return chunkedRevMap(Nil.value);
  };
  var functorList = new Data_Functor.Functor(listMap);
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($202) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($202));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types (line 109, column 12 - line 111, column 30): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($203) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($203));
          };
      };
  });
  var foldableNonEmptyList = Data_NonEmpty.foldableNonEmpty(foldableList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });           
  var semigroupNonEmptyList = new Data_Semigroup.Semigroup(function (v) {
      return function (as$prime) {
          return new Data_NonEmpty.NonEmpty(v.value0, Data_Semigroup.append(semigroupList)(v.value1)(toList(as$prime)));
      };
  });
  var showList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          if (v instanceof Nil) {
              return "Nil";
          };
          return "(" + (Data_Foldable.intercalate(foldableList)(Data_Monoid.monoidString)(" : ")(Data_Functor.map(functorList)(Data_Show.show(dictShow))(v)) + " : Nil)");
      });
  };
  var showNonEmptyList = function (dictShow) {
      return new Data_Show.Show(function (v) {
          return "(NonEmptyList " + (Data_Show.show(Data_NonEmpty.showNonEmpty(dictShow)(showList(dictShow)))(v) + ")");
      });
  };
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($210) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($211) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($211));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($210));
          };
      };
  });
  var unfoldable1List = new Data_Unfoldable1.Unfoldable1(function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v.value1 instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value1.value0;
                          $copy_memo = new Cons(v.value0, memo);
                          return;
                      };
                      if (v.value1 instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(new Cons(v.value0, memo));
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 133, column 22 - line 135, column 61): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var unfoldableList = new Data_Unfoldable.Unfoldable(function () {
      return unfoldable1List;
  }, function (f) {
      return function (b) {
          var go = function ($copy_source) {
              return function ($copy_memo) {
                  var $tco_var_source = $copy_source;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(source, memo) {
                      var v = f(source);
                      if (v instanceof Data_Maybe.Nothing) {
                          $tco_done = true;
                          return Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value)(memo);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          $tco_var_source = v.value0.value1;
                          $copy_memo = new Cons(v.value0.value0, memo);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.List.Types (line 140, column 22 - line 142, column 52): " + [ v.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_source, $copy_memo);
                  };
                  return $tco_result;
              };
          };
          return go(b)(Nil.value);
      };
  });
  var eq1List = new Data_Eq.Eq1(function (dictEq) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      return function ($copy_v2) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_v1 = $copy_v1;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, v1, v2) {
                              if (!v2) {
                                  $tco_done = true;
                                  return false;
                              };
                              if (v instanceof Nil && v1 instanceof Nil) {
                                  $tco_done = true;
                                  return v2;
                              };
                              if (v instanceof Cons && v1 instanceof Cons) {
                                  $tco_var_v = v.value1;
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = v2 && Data_Eq.eq(dictEq)(v1.value0)(v.value0);
                                  return;
                              };
                              $tco_done = true;
                              return false;
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
                          };
                          return $tco_result;
                      };
                  };
              };
              return go(xs)(ys)(true);
          };
      };
  });
  var eqList = function (dictEq) {
      return new Data_Eq.Eq(Data_Eq.eq1(eq1List)(dictEq));
  };
  var ord1List = new Data_Ord.Ord1(function () {
      return eq1List;
  }, function (dictOrd) {
      return function (xs) {
          return function (ys) {
              var go = function ($copy_v) {
                  return function ($copy_v1) {
                      var $tco_var_v = $copy_v;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v, v1) {
                          if (v instanceof Nil && v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.EQ.value;
                          };
                          if (v instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.LT.value;
                          };
                          if (v1 instanceof Nil) {
                              $tco_done = true;
                              return Data_Ordering.GT.value;
                          };
                          if (v instanceof Cons && v1 instanceof Cons) {
                              var v2 = Data_Ord.compare(dictOrd)(v.value0)(v1.value0);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_var_v = v.value1;
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              $tco_done = true;
                              return v2;
                          };
                          throw new Error("Failed pattern match at Data.List.Types (line 61, column 5 - line 61, column 20): " + [ v.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return go(xs)(ys);
          };
      };
  });
  var ordList = function (dictOrd) {
      return new Data_Ord.Ord(function () {
          return eqList(dictOrd.Eq0());
      }, Data_Ord.compare1(ord1List)(dictOrd));
  }; 
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types (line 155, column 1 - line 155, column 33): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function ($216) {
      return NonEmptyList(Data_NonEmpty.singleton(plusList)($216));
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["toList"] = toList;
  exports["showList"] = showList;
  exports["eqList"] = eqList;
  exports["eq1List"] = eq1List;
  exports["ordList"] = ordList;
  exports["ord1List"] = ord1List;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["unfoldable1List"] = unfoldable1List;
  exports["unfoldableList"] = unfoldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["showNonEmptyList"] = showNonEmptyList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
  exports["semigroupNonEmptyList"] = semigroupNonEmptyList;
  exports["foldableNonEmptyList"] = foldableNonEmptyList;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines a data type representing ANSI escape codes, as well as
  // | functions for serialising them as Strings.
  "use strict";
  $PS["Ansi.Codes"] = $PS["Ansi.Codes"] || {};
  var exports = $PS["Ansi.Codes"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Show = $PS["Data.Show"];                
  var Bold = (function () {
      function Bold() {

      };
      Bold.value = new Bold();
      return Bold;
  })();
  var Dim = (function () {
      function Dim() {

      };
      Dim.value = new Dim();
      return Dim;
  })();
  var Italic = (function () {
      function Italic() {

      };
      Italic.value = new Italic();
      return Italic;
  })();
  var Underline = (function () {
      function Underline() {

      };
      Underline.value = new Underline();
      return Underline;
  })();
  var Inverse = (function () {
      function Inverse() {

      };
      Inverse.value = new Inverse();
      return Inverse;
  })();
  var Strikethrough = (function () {
      function Strikethrough() {

      };
      Strikethrough.value = new Strikethrough();
      return Strikethrough;
  })();

  // | Specifies how much text to erase.
  // |
  // | * ToEnd: erase from the cursor to the end of the line or screen.
  // | * FromBeginning: erase to the cursor from the beginning of the line or
  // |    screen.
  // | * Entire: erase the entire line or screen.
  var ToEnd = (function () {
      function ToEnd() {

      };
      ToEnd.value = new ToEnd();
      return ToEnd;
  })();

  // | Specifies how much text to erase.
  // |
  // | * ToEnd: erase from the cursor to the end of the line or screen.
  // | * FromBeginning: erase to the cursor from the beginning of the line or
  // |    screen.
  // | * Entire: erase the entire line or screen.
  var FromBeginning = (function () {
      function FromBeginning() {

      };
      FromBeginning.value = new FromBeginning();
      return FromBeginning;
  })();

  // | Specifies how much text to erase.
  // |
  // | * ToEnd: erase from the cursor to the end of the line or screen.
  // | * FromBeginning: erase to the cursor from the beginning of the line or
  // |    screen.
  // | * Entire: erase the entire line or screen.
  var Entire = (function () {
      function Entire() {

      };
      Entire.value = new Entire();
      return Entire;
  })();

  // | The standard set of 16 ANSI colors.
  var Black = (function () {
      function Black() {

      };
      Black.value = new Black();
      return Black;
  })();

  // | The standard set of 16 ANSI colors.
  var Red = (function () {
      function Red() {

      };
      Red.value = new Red();
      return Red;
  })();

  // | The standard set of 16 ANSI colors.
  var Green = (function () {
      function Green() {

      };
      Green.value = new Green();
      return Green;
  })();

  // | The standard set of 16 ANSI colors.
  var Yellow = (function () {
      function Yellow() {

      };
      Yellow.value = new Yellow();
      return Yellow;
  })();

  // | The standard set of 16 ANSI colors.
  var Blue = (function () {
      function Blue() {

      };
      Blue.value = new Blue();
      return Blue;
  })();

  // | The standard set of 16 ANSI colors.
  var Magenta = (function () {
      function Magenta() {

      };
      Magenta.value = new Magenta();
      return Magenta;
  })();

  // | The standard set of 16 ANSI colors.
  var Cyan = (function () {
      function Cyan() {

      };
      Cyan.value = new Cyan();
      return Cyan;
  })();

  // | The standard set of 16 ANSI colors.
  var White = (function () {
      function White() {

      };
      White.value = new White();
      return White;
  })();

  // | The standard set of 16 ANSI colors.
  var BrightBlack = (function () {
      function BrightBlack() {

      };
      BrightBlack.value = new BrightBlack();
      return BrightBlack;
  })();

  // | The standard set of 16 ANSI colors.
  var BrightRed = (function () {
      function BrightRed() {

      };
      BrightRed.value = new BrightRed();
      return BrightRed;
  })();

  // | The standard set of 16 ANSI colors.
  var BrightGreen = (function () {
      function BrightGreen() {

      };
      BrightGreen.value = new BrightGreen();
      return BrightGreen;
  })();

  // | The standard set of 16 ANSI colors.
  var BrightYellow = (function () {
      function BrightYellow() {

      };
      BrightYellow.value = new BrightYellow();
      return BrightYellow;
  })();

  // | The standard set of 16 ANSI colors.
  var BrightBlue = (function () {
      function BrightBlue() {

      };
      BrightBlue.value = new BrightBlue();
      return BrightBlue;
  })();

  // | The standard set of 16 ANSI colors.
  var BrightMagenta = (function () {
      function BrightMagenta() {

      };
      BrightMagenta.value = new BrightMagenta();
      return BrightMagenta;
  })();

  // | The standard set of 16 ANSI colors.
  var BrightCyan = (function () {
      function BrightCyan() {

      };
      BrightCyan.value = new BrightCyan();
      return BrightCyan;
  })();

  // | The standard set of 16 ANSI colors.
  var BrightWhite = (function () {
      function BrightWhite() {

      };
      BrightWhite.value = new BrightWhite();
      return BrightWhite;
  })();

  // | A graphics parameter, controls how text appears; for example, bold,
  // | underlined, foreground color, background color.
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();

  // | A graphics parameter, controls how text appears; for example, bold,
  // | underlined, foreground color, background color.
  var PMode = (function () {
      function PMode(value0) {
          this.value0 = value0;
      };
      PMode.create = function (value0) {
          return new PMode(value0);
      };
      return PMode;
  })();

  // | A graphics parameter, controls how text appears; for example, bold,
  // | underlined, foreground color, background color.
  var PForeground = (function () {
      function PForeground(value0) {
          this.value0 = value0;
      };
      PForeground.create = function (value0) {
          return new PForeground(value0);
      };
      return PForeground;
  })();

  // | A graphics parameter, controls how text appears; for example, bold,
  // | underlined, foreground color, background color.
  var PBackground = (function () {
      function PBackground(value0) {
          this.value0 = value0;
      };
      PBackground.create = function (value0) {
          return new PBackground(value0);
      };
      return PBackground;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var Up = (function () {
      function Up(value0) {
          this.value0 = value0;
      };
      Up.create = function (value0) {
          return new Up(value0);
      };
      return Up;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var Down = (function () {
      function Down(value0) {
          this.value0 = value0;
      };
      Down.create = function (value0) {
          return new Down(value0);
      };
      return Down;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var Forward = (function () {
      function Forward(value0) {
          this.value0 = value0;
      };
      Forward.create = function (value0) {
          return new Forward(value0);
      };
      return Forward;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var Back = (function () {
      function Back(value0) {
          this.value0 = value0;
      };
      Back.create = function (value0) {
          return new Back(value0);
      };
      return Back;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var NextLine = (function () {
      function NextLine(value0) {
          this.value0 = value0;
      };
      NextLine.create = function (value0) {
          return new NextLine(value0);
      };
      return NextLine;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var PreviousLine = (function () {
      function PreviousLine(value0) {
          this.value0 = value0;
      };
      PreviousLine.create = function (value0) {
          return new PreviousLine(value0);
      };
      return PreviousLine;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var HorizontalAbsolute = (function () {
      function HorizontalAbsolute(value0) {
          this.value0 = value0;
      };
      HorizontalAbsolute.create = function (value0) {
          return new HorizontalAbsolute(value0);
      };
      return HorizontalAbsolute;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var Position = (function () {
      function Position(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Position.create = function (value0) {
          return function (value1) {
              return new Position(value0, value1);
          };
      };
      return Position;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var EraseData = (function () {
      function EraseData(value0) {
          this.value0 = value0;
      };
      EraseData.create = function (value0) {
          return new EraseData(value0);
      };
      return EraseData;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var EraseLine = (function () {
      function EraseLine(value0) {
          this.value0 = value0;
      };
      EraseLine.create = function (value0) {
          return new EraseLine(value0);
      };
      return EraseLine;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var ScrollUp = (function () {
      function ScrollUp(value0) {
          this.value0 = value0;
      };
      ScrollUp.create = function (value0) {
          return new ScrollUp(value0);
      };
      return ScrollUp;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var ScrollDown = (function () {
      function ScrollDown(value0) {
          this.value0 = value0;
      };
      ScrollDown.create = function (value0) {
          return new ScrollDown(value0);
      };
      return ScrollDown;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var Graphics = (function () {
      function Graphics(value0) {
          this.value0 = value0;
      };
      Graphics.create = function (value0) {
          return new Graphics(value0);
      };
      return Graphics;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var SavePosition = (function () {
      function SavePosition() {

      };
      SavePosition.value = new SavePosition();
      return SavePosition;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var RestorePosition = (function () {
      function RestorePosition() {

      };
      RestorePosition.value = new RestorePosition();
      return RestorePosition;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var QueryPosition = (function () {
      function QueryPosition() {

      };
      QueryPosition.value = new QueryPosition();
      return QueryPosition;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var HideCursor = (function () {
      function HideCursor() {

      };
      HideCursor.value = new HideCursor();
      return HideCursor;
  })();

  // | An ANSI escape code. Not all sequences are implemented.
  // | See: <https://en.wikipedia.org/wiki/ANSI_escape_code>.
  var ShowCursor = (function () {
      function ShowCursor() {

      };
      ShowCursor.value = new ShowCursor();
      return ShowCursor;
  })();

  // | The prefix for all escape codes.
  var prefix = "\x1b[";
  var eraseParamToString = function (ep) {
      if (ep instanceof ToEnd) {
          return "0";
      };
      if (ep instanceof FromBeginning) {
          return "1";
      };
      if (ep instanceof Entire) {
          return "2";
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 86, column 3 - line 91, column 1): " + [ ep.constructor.name ]);
  }; 

  // | The suffix for escape codes; note that this is only required for colors.
  var colorSuffix = "m";
  var colorCode = function (c) {
      if (c instanceof Black) {
          return 30;
      };
      if (c instanceof Red) {
          return 31;
      };
      if (c instanceof Green) {
          return 32;
      };
      if (c instanceof Yellow) {
          return 33;
      };
      if (c instanceof Blue) {
          return 34;
      };
      if (c instanceof Magenta) {
          return 35;
      };
      if (c instanceof Cyan) {
          return 36;
      };
      if (c instanceof White) {
          return 37;
      };
      if (c instanceof BrightBlack) {
          return 90;
      };
      if (c instanceof BrightRed) {
          return 91;
      };
      if (c instanceof BrightGreen) {
          return 92;
      };
      if (c instanceof BrightYellow) {
          return 93;
      };
      if (c instanceof BrightBlue) {
          return 94;
      };
      if (c instanceof BrightMagenta) {
          return 95;
      };
      if (c instanceof BrightCyan) {
          return 96;
      };
      if (c instanceof BrightWhite) {
          return 97;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 155, column 3 - line 171, column 20): " + [ c.constructor.name ]);
  };
  var codeForRenderingMode = function (m) {
      if (m instanceof Bold) {
          return 1;
      };
      if (m instanceof Dim) {
          return 2;
      };
      if (m instanceof Italic) {
          return 3;
      };
      if (m instanceof Underline) {
          return 4;
      };
      if (m instanceof Inverse) {
          return 7;
      };
      if (m instanceof Strikethrough) {
          return 9;
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 123, column 3 - line 131, column 1): " + [ m.constructor.name ]);
  };
  var graphicsParamToString = function (gp) {
      if (gp instanceof Reset) {
          return "0";
      };
      if (gp instanceof PMode) {
          return Data_Show.show(Data_Show.showInt)(codeForRenderingMode(gp.value0));
      };
      if (gp instanceof PForeground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0));
      };
      if (gp instanceof PBackground) {
          return Data_Show.show(Data_Show.showInt)(colorCode(gp.value0) + 10 | 0);
      };
      throw new Error("Failed pattern match at Ansi.Codes (line 104, column 3 - line 108, column 45): " + [ gp.constructor.name ]);
  };

  // | Convert an escape code to the form recognised by terminals.
  var escapeCodeToString = (function () {
      var go = function (c) {
          if (c instanceof Up) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "A";
          };
          if (c instanceof Down) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "B";
          };
          if (c instanceof Forward) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "C";
          };
          if (c instanceof Back) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "D";
          };
          if (c instanceof NextLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "E";
          };
          if (c instanceof PreviousLine) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "F";
          };
          if (c instanceof HorizontalAbsolute) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "G";
          };
          if (c instanceof Position) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + (";" + (Data_Show.show(Data_Show.showInt)(c.value1) + "H"));
          };
          if (c instanceof EraseData) {
              return eraseParamToString(c.value0) + "J";
          };
          if (c instanceof EraseLine) {
              return eraseParamToString(c.value0) + "K";
          };
          if (c instanceof ScrollUp) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "S";
          };
          if (c instanceof ScrollDown) {
              return Data_Show.show(Data_Show.showInt)(c.value0) + "T";
          };
          if (c instanceof Graphics) {
              return Data_Foldable.intercalate(Data_List_Types.foldableNonEmptyList)(Data_Monoid.monoidString)(";")(Data_Functor.map(Data_List_Types.functorNonEmptyList)(graphicsParamToString)(c.value0)) + colorSuffix;
          };
          if (c instanceof SavePosition) {
              return "s";
          };
          if (c instanceof RestorePosition) {
              return "u";
          };
          if (c instanceof QueryPosition) {
              return "6n";
          };
          if (c instanceof HideCursor) {
              return "?25l";
          };
          if (c instanceof ShowCursor) {
              return "?25h";
          };
          throw new Error("Failed pattern match at Ansi.Codes (line 47, column 5 - line 67, column 3): " + [ c.constructor.name ]);
      };
      return function ($234) {
          return (function (v) {
              return prefix + v;
          })(go($234));
      };
  })();
  exports["prefix"] = prefix;
  exports["colorSuffix"] = colorSuffix;
  exports["Up"] = Up;
  exports["Down"] = Down;
  exports["Forward"] = Forward;
  exports["Back"] = Back;
  exports["NextLine"] = NextLine;
  exports["PreviousLine"] = PreviousLine;
  exports["HorizontalAbsolute"] = HorizontalAbsolute;
  exports["Position"] = Position;
  exports["EraseData"] = EraseData;
  exports["EraseLine"] = EraseLine;
  exports["ScrollUp"] = ScrollUp;
  exports["ScrollDown"] = ScrollDown;
  exports["Graphics"] = Graphics;
  exports["SavePosition"] = SavePosition;
  exports["RestorePosition"] = RestorePosition;
  exports["QueryPosition"] = QueryPosition;
  exports["HideCursor"] = HideCursor;
  exports["ShowCursor"] = ShowCursor;
  exports["escapeCodeToString"] = escapeCodeToString;
  exports["ToEnd"] = ToEnd;
  exports["FromBeginning"] = FromBeginning;
  exports["Entire"] = Entire;
  exports["eraseParamToString"] = eraseParamToString;
  exports["Reset"] = Reset;
  exports["PMode"] = PMode;
  exports["PForeground"] = PForeground;
  exports["PBackground"] = PBackground;
  exports["graphicsParamToString"] = graphicsParamToString;
  exports["Bold"] = Bold;
  exports["Dim"] = Dim;
  exports["Italic"] = Italic;
  exports["Underline"] = Underline;
  exports["Inverse"] = Inverse;
  exports["Strikethrough"] = Strikethrough;
  exports["codeForRenderingMode"] = codeForRenderingMode;
  exports["Black"] = Black;
  exports["Red"] = Red;
  exports["Green"] = Green;
  exports["Yellow"] = Yellow;
  exports["Blue"] = Blue;
  exports["Magenta"] = Magenta;
  exports["Cyan"] = Cyan;
  exports["White"] = White;
  exports["BrightBlack"] = BrightBlack;
  exports["BrightRed"] = BrightRed;
  exports["BrightGreen"] = BrightGreen;
  exports["BrightYellow"] = BrightYellow;
  exports["BrightBlue"] = BrightBlue;
  exports["BrightMagenta"] = BrightMagenta;
  exports["BrightCyan"] = BrightCyan;
  exports["BrightWhite"] = BrightWhite;
  exports["colorCode"] = colorCode;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Convenience functions to simplify outputting ANSI escape codes to
  // | terminals.
  "use strict";
  $PS["Ansi.Output"] = $PS["Ansi.Output"] || {};
  var exports = $PS["Ansi.Output"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_List_Types = $PS["Data.List.Types"];                

  // | Wrap the given text in escape codes corresponding to the given parameters.
  // | For example:
  // |
  // | ```purescript
  // | Console.log $ withGraphics (bold <> underline <> foreground BrightRed) "hello world"
  // | ```
  // |
  // | would print "hello world" to the terminal, bold, underlined, and in bright
  // | red, and then reset (so that further logging to the console uses the
  // | normal color and style).
  // |
  // | This function simply wraps the given text in an escape code and a reset
  // | code, so that it is a little more comfortable to use than the functions
  // | in `Ansi.Codes`.
  var withGraphics = function (params) {
      return function (text) {
          return Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(params)) + (text + Ansi_Codes.escapeCodeToString(new Ansi_Codes.Graphics(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Ansi_Codes.Reset.value))));
      };
  };                                                                                                                              
  var foreground = function (c) {
      return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PForeground(c));
  };                                                                                                                      
  var bold = Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(new Ansi_Codes.PMode(Ansi_Codes.Bold.value));
  exports["withGraphics"] = withGraphics;
  exports["bold"] = bold;
  exports["foreground"] = foreground;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Lazy"] = $PS["Control.Lazy"] || {};
  var exports = $PS["Control.Lazy"];               

  // | The `Lazy` class represents types which allow evaluation of values
  // | to be _deferred_.
  // |
  // | Usually, this means that a type contains a function arrow which can
  // | be used to delay evaluation.
  var Lazy = function (defer) {
      this.defer = defer;
  }; 
  var defer = function (dict) {
      return dict.defer;
  };
  exports["defer"] = defer;
  exports["Lazy"] = Lazy;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Bifunctor"] = $PS["Data.Bifunctor"] || {};
  var exports = $PS["Data.Bifunctor"];
  var Control_Category = $PS["Control.Category"];                

  // | A `Bifunctor` is a `Functor` from the pair category `(Type, Type)` to `Type`.
  // |
  // | A type constructor with two type arguments can be made into a `Bifunctor` if
  // | both of its type arguments are covariant.
  // |
  // | The `bimap` function maps a pair of functions over the two type arguments
  // | of the bifunctor.
  // |
  // | Laws:
  // |
  // | - Identity: `bimap identity identity == identity`
  // | - Composition: `bimap f1 g1 <<< bimap f2 g2 == bimap (f1 <<< f2) (g1 <<< g2)`
  // |
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };

  // | Map a function over the first type argument of a `Bifunctor`.
  var lmap = function (dictBifunctor) {
      return function (f) {
          return bimap(dictBifunctor)(f)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["lmap"] = lmap;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Either"] = $PS["Data.Either"] || {};
  var exports = $PS["Data.Either"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Functor = $PS["Data.Functor"];          

  // | The `Either` type is used to represent a choice between two types of value.
  // |
  // | A common use case for `Either` is error handling, where `Left` is used to
  // | carry an error value and `Right` is used to carry a success value.
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();

  // | The `Either` type is used to represent a choice between two types of value.
  // |
  // | A common use case for `Either` is error handling, where `Left` is used to
  // | carry an error value and `Right` is used to carry a success value.
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Left) {
              return new Left(m.value0);
          };
          if (m instanceof Right) {
              return new Right(f(m.value0));
          };
          throw new Error("Failed pattern match at Data.Either (line 38, column 8 - line 38, column 52): " + [ m.constructor.name ]);
      };
  });

  // | Takes two functions and an `Either` value, if the value is a `Left` the
  // | inner value is applied to the first function, if the value is a `Right`
  // | the inner value is applied to the second function.
  // |
  // | ``` purescript
  // | either f g (Left x) == f x
  // | either f g (Right y) == g y
  // | ```
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either (line 238, column 1 - line 238, column 64): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either (line 46, column 1 - line 46, column 45): " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });

  // | The `Apply` instance allows functions contained within a `Right` to
  // | transform a value contained within a `Right` using the `(<*>)` operator:
  // |
  // | ``` purescript
  // | Right f <*> Right x == Right (f x)
  // | ```
  // |
  // | `Left` values are left untouched:
  // |
  // | ``` purescript
  // | Left f <*> Right x == Left x
  // | Right f <*> Left y == Left y
  // | ```
  // |
  // | Combining `Functor`'s `<$>` with `Apply`'s `<*>` can be used to transform a
  // | pure function to take `Either`-typed arguments so `f :: a -> b -> c`
  // | becomes `f :: Either l a -> Either l b -> Either l c`:
  // |
  // | ``` purescript
  // | f <$> Right x <*> Right y == Right (f x y)
  // | ```
  // |
  // | The `Left`-preserving behaviour of both operators means the result of
  // | an expression like the above but where any one of the values is `Left`
  // | means the whole result becomes `Left` also, taking the first `Left` value
  // | found:
  // |
  // | ``` purescript
  // | f <$> Left x <*> Right y == Left x
  // | f <$> Right x <*> Left y == Left y
  // | f <$> Left x <*> Left y == Left x
  // | ```
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either (line 82, column 1 - line 82, column 41): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });

  // | The `Applicative` instance enables lifting of values into `Either` with the
  // | `pure` function:
  // |
  // | ``` purescript
  // | pure x :: Either _ _ == Right x
  // | ```
  // |
  // | Combining `Functor`'s `<$>` with `Apply`'s `<*>` and `Applicative`'s
  // | `pure` can be used to pass a mixture of `Either` and non-`Either` typed
  // | values to a function that does not usually expect them, by using `pure`
  // | for any value that is not already `Either` typed:
  // |
  // | ``` purescript
  // | f <$> Right x <*> pure y == Right (f x y)
  // | ```
  // |
  // | Even though `pure = Right` it is recommended to use `pure` in situations
  // | like this as it allows the choice of `Applicative` to be changed later
  // | without having to go through and replace `Right` with a new constructor.
  var applicativeEither = new Control_Applicative.Applicative(function () {
      return applyEither;
  }, Right.create);
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["applicativeEither"] = applicativeEither;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines the `MonadError` type class and its instances.
  "use strict";
  $PS["Control.Monad.Error.Class"] = $PS["Control.Monad.Error.Class"] || {};
  var exports = $PS["Control.Monad.Error.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];                            

  // | The `MonadThrow` type class represents those monads which support errors via
  // | `throwError`, where `throwError e` halts, yielding the error `e`.
  // |
  // | An implementation is provided for `ExceptT`, and for other monad transformers
  // | defined in this library.
  // |
  // | Laws:
  // |
  // | - Left zero: `throwError e >>= f = throwError e`
  // |
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };

  // | The `MonadError` type class represents those monads which support catching
  // | errors.
  // |
  // | - `catchError x f` calls the error handler `f` if an error is thrown during the
  // |   evaluation of `x`.
  // |
  // | An implementation is provided for `ExceptT`, and for other monad transformers
  // | defined in this library.
  // |
  // | Laws:
  // |
  // | - Catch: `catchError (throwError e) f = f e`
  // | - Pure: `catchError (pure a) f = pure a`
  // |
  var MonadError = function (MonadThrow0, catchError) {
      this.MonadThrow0 = MonadThrow0;
      this.catchError = catchError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };                                                      
  var catchError = function (dict) {
      return dict.catchError;
  };

  // | This function allows you to provide a predicate for selecting the
  // | exceptions that you're interested in, and handle only those exceptons.
  // | If the inner computation throws an exception, and the predicate returns
  // | Nothing, then the whole computation will still fail with that exception.
  var catchJust = function (dictMonadError) {
      return function (p) {
          return function (act) {
              return function (handler) {
                  var handle = function (e) {
                      var v = p(e);
                      if (v instanceof Data_Maybe.Nothing) {
                          return throwError(dictMonadError.MonadThrow0())(e);
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return handler(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Error.Class (line 57, column 5 - line 59, column 26): " + [ v.constructor.name ]);
                  };
                  return catchError(dictMonadError)(act)(handle);
              };
          };
      };
  };

  // | Return `Right` if the given action succeeds, `Left` if it throws.
  var $$try = function (dictMonadError) {
      return function (a) {
          return catchError(dictMonadError)(Data_Functor.map(((((dictMonadError.MonadThrow0()).Monad0()).Bind1()).Apply0()).Functor0())(Data_Either.Right.create)(a))(function ($21) {
              return Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0())(Data_Either.Left.create($21));
          });
      };
  };
  exports["catchError"] = catchError;
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
  exports["MonadError"] = MonadError;
  exports["catchJust"] = catchJust;
  exports["try"] = $$try;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines the `MonadState` type class and its instances.
  "use strict";
  $PS["Control.Monad.State.Class"] = $PS["Control.Monad.State.Class"] || {};
  var exports = $PS["Control.Monad.State.Class"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                

  // | The `MonadState s` type class represents those monads which support a single piece of mutable
  // | state of type `s`.
  // |
  // | - `state f` updates the state using the function `f`.
  // |
  // | An implementation is provided for `StateT`, and for other monad transformers
  // | defined in this library.
  // |
  // | Laws:
  // |
  // | - `do { get ; get } = get`
  // | - `do { put x ; put y } = put y`
  // | - `do { put x ; get } = put x $> x`
  // | - `do { s <- get ; put s } = pure unit`
  // |
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var modify_ = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };

  // | Get a value which depends on the current state.
  var gets = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(f(s), s);
          });
      };
  };

  // | Get the current state.
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["gets"] = gets;
  exports["modify_"] = modify_;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines the `MonadTrans` type class of _monad transformers_.
  "use strict";
  $PS["Control.Monad.Trans.Class"] = $PS["Control.Monad.Trans.Class"] || {};
  var exports = $PS["Control.Monad.Trans.Class"];

  // | The `MonadTrans` type class represents _monad transformers_.
  // |
  // | A monad transformer is a type constructor of kind `(* -> *) -> * -> *`, which
  // | takes a `Monad` as its first argument, and returns another `Monad`.
  // |
  // | This allows us to add additional effects to an existing monad. By iterating this
  // | process, we create monad transformer _stacks_, which contain all of the effects
  // | required for a particular computation.
  // |
  // | The laws state that `lift` is a `Monad` morphism.
  // |
  // | Laws:
  // |
  // | - `lift (pure a) = pure a`
  // | - `lift (do { x <- m ; y }) = do { x <- lift m ; lift y }`
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines the _exception monad transformer_ `ExceptT`.
  "use strict";
  $PS["Control.Monad.Except.Trans"] = $PS["Control.Monad.Except.Trans"] || {};
  var exports = $PS["Control.Monad.Except.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];                

  // | A monad transformer which adds exceptions to other monads, in the same way
  // | as `Except`. As before, `e` is the type of exceptions, and `a` is the type
  // | of successful results. The new type parameter `m` is the inner monad that
  // | computations run in.
  var ExceptT = function (x) {
      return x;
  };

  // | Transform any exceptions thrown by an `ExceptT` computation using the given function.
  var withExceptT = function (dictFunctor) {
      return function (f) {
          return function (v) {
              var mapLeft = function (v1) {
                  return function (v2) {
                      if (v2 instanceof Data_Either.Right) {
                          return new Data_Either.Right(v2.value0);
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return new Data_Either.Left(v1(v2.value0));
                      };
                      throw new Error("Failed pattern match at Control.Monad.Except.Trans (line 42, column 3 - line 42, column 32): " + [ v1.constructor.name, v2.constructor.name ]);
                  };
              };
              return ExceptT(Data_Functor.map(dictFunctor)(mapLeft(f))(v));
          };
      };
  };

  // | The inverse of `ExceptT`. Run a computation in the `ExceptT` monad.
  var runExceptT = function (v) {
      return v;
  };          
  var monadTransExceptT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(v));
          });
      };
  });

  // | Transform the unwrapped computation using the given function.
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  var monadStateExceptT = function (dictMonadState) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadExceptT(dictMonadState.Monad0());
      }, function (f) {
          return Control_Monad_Trans_Class.lift(monadTransExceptT)(dictMonadState.Monad0())(Control_Monad_State_Class.state(dictMonadState)(f));
      });
  };
  var monadThrowExceptT = function (dictMonad) {
      return new Control_Monad_Error_Class.MonadThrow(function () {
          return monadExceptT(dictMonad);
      }, function ($102) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($102)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["withExceptT"] = withExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
  exports["monadTransExceptT"] = monadTransExceptT;
  exports["monadThrowExceptT"] = monadThrowExceptT;
  exports["monadStateExceptT"] = monadStateExceptT;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Identity"] = $PS["Data.Identity"] || {};
  var exports = $PS["Data.Identity"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Newtype = $PS["Data.Newtype"];          
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (m) {
          return f(m);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad.Except"] = $PS["Control.Monad.Except"] || {};
  var exports = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];                

  // | Transform any exceptions thrown by an `Except` computation using the given function.
  var withExcept = Control_Monad_Except_Trans.withExceptT(Data_Identity.functorIdentity);

  // | Run a computation in the `Except` monad. The inverse of `except`.
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };

  // | Transform the unwrapped computation using the given function.
  var mapExcept = function (f) {
      return Control_Monad_Except_Trans.mapExceptT(function ($1) {
          return Data_Identity.Identity(f(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($1)));
      });
  };
  exports["runExcept"] = runExcept;
  exports["mapExcept"] = mapExcept;
  exports["withExcept"] = withExcept;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreach = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var functorST = new Data_Functor.Functor($foreign.map_);
  var monadST = new Control_Monad.Monad(function () {
      return applicativeST;
  }, function () {
      return bindST;
  });
  var bindST = new Control_Bind.Bind(function () {
      return applyST;
  }, $foreign.bind_);
  var applyST = new Control_Apply.Apply(function () {
      return functorST;
  }, Control_Monad.ap(monadST));
  var applicativeST = new Control_Applicative.Applicative(function () {
      return applyST;
  }, $foreign.pure_);
  exports["functorST"] = functorST;
  exports["applyST"] = applyST;
  exports["applicativeST"] = applicativeST;
  exports["bindST"] = bindST;
  exports["monadST"] = monadST;
  exports["foreach"] = $foreign.foreach;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines the state monad transformer, `StateT`.
  "use strict";
  $PS["Control.Monad.State.Trans"] = $PS["Control.Monad.State.Trans"] || {};
  var exports = $PS["Control.Monad.State.Trans"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];                      

  // | The state monad transformer.
  // |
  // | This monad transformer extends the base monad with the operations `get`
  // | and `put` which can be used to model a single piece of mutable state.
  // |
  // | The `MonadState` type class describes the operations supported by this monad.
  var StateT = function (x) {
      return x;
  };

  // | Run a computation in the `StateT` monad.
  var runStateT = function (v) {
      return v;
  };         
  var monadTransStateT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function (m) {
          return function (s) {
              return Control_Bind.bind(dictMonad.Bind1())(m)(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v, s));
              });
          };
      };
  });
  var lazyStateT = new Control_Lazy.Lazy(function (f) {
      return function (s) {
          var v = f(Data_Unit.unit);
          return v(s);
      };
  });
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };

  // | Run a computation in the `StateT` monad, discarding the final state.
  var evalStateT = function (dictFunctor) {
      return function (v) {
          return function (s) {
              return Data_Functor.map(dictFunctor)(Data_Tuple.fst)(v(s));
          };
      };
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad.Bind1())(v(s))(function (v1) {
                      var v3 = f(v1.value0);
                      return v3(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($111) {
              return Control_Applicative.pure(dictMonad.Applicative0())(f($111));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["evalStateT"] = evalStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadTransStateT"] = monadTransStateT;
  exports["lazyStateT"] = lazyStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Parallel.Class"] = $PS["Control.Parallel.Class"] || {};
  var exports = $PS["Control.Parallel.Class"];

  // | The `Parallel` class abstracts over monads which support
  // | parallel composition via some related `Applicative`.
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
  exports["Parallel"] = Parallel;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Control.Parallel"] = $PS["Control.Parallel"] || {};
  var exports = $PS["Control.Parallel"];
  var Control_Category = $PS["Control.Category"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Traversable = $PS["Data.Traversable"];                

  // | Traverse a collection in parallel, discarding any results.
  var parTraverse_ = function (dictParallel) {
      return function (dictFoldable) {
          return function (f) {
              return function ($17) {
                  return Control_Parallel_Class.sequential(dictParallel)(Data_Foldable.traverse_(dictParallel.Applicative1())(dictFoldable)(function ($18) {
                      return Control_Parallel_Class.parallel(dictParallel)(f($18));
                  })($17));
              };
          };
      };
  };

  // | Traverse a collection in parallel.
  var parTraverse = function (dictParallel) {
      return function (dictTraversable) {
          return function (f) {
              return function ($19) {
                  return Control_Parallel_Class.sequential(dictParallel)(Data_Traversable.traverse(dictTraversable)(dictParallel.Applicative1())(function ($20) {
                      return Control_Parallel_Class.parallel(dictParallel)(f($20));
                  })($19));
              };
          };
      };
  };
  var parSequence_ = function (dictParallel) {
      return function (dictFoldable) {
          return parTraverse_(dictParallel)(dictFoldable)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["parTraverse"] = parTraverse;
  exports["parTraverse_"] = parTraverse_;
  exports["parSequence_"] = parSequence_;
})(PS);
(function(exports) {
  "use strict";

  function id(x) {
    return x;
  }                       
  exports.fromString = id;
  exports.fromArray = id;
  exports.fromObject = id;

  exports.jsonNull = null;

  exports.stringify = function (j) {
    return JSON.stringify(j);
  };

  function isArray(a) {
    return Object.prototype.toString.call(a) === "[object Array]";
  }

  exports._caseJson = function (isNull, isBool, isNum, isStr, isArr, isObj, j) {
    if (j == null) return isNull();
    else if (typeof j === "boolean") return isBool(j);
    else if (typeof j === "number") return isNum(j);
    else if (typeof j === "string") return isStr(j);
    else if (Object.prototype.toString.call(j) === "[object Array]")
      return isArr(j);
    else return isObj(j);
  };
})(PS["Data.Argonaut.Core"] = PS["Data.Argonaut.Core"] || {});
(function(exports) {
  "use strict";

  exports._copyST = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f();
  };

  exports._fmapObject = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(m0[k]);
      }
    }
    return m;
  };

  exports._mapWithKey = function (m0, f) {
    var m = {};
    for (var k in m0) {
      if (hasOwnProperty.call(m0, k)) {
        m[k] = f(k)(m0[k]);
      }
    }
    return m;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports.all = function (f) {
    return function (m) {
      for (var k in m) {
        if (hasOwnProperty.call(m, k) && !f(k)(m[k])) return false;
      }
      return true;
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }

  exports.toArrayWithKey = toArrayWithKey;

  exports.keys = Object.keys || toArrayWithKey(function (k) {
    return function () { return k; };
  });
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                                                                                                 

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | Helper functions for working with immutable Javascript arrays.
  // |
  // | _Note_: Depending on your use-case, you may prefer to use `Data.List` or
  // | `Data.Sequence` instead, which might give better performance for certain
  // | use cases. This module is useful when integrating with JavaScript libraries
  // | which use arrays, but immutable arrays are not a practical data structure
  // | for many use cases due to their poor asymptotics.
  // |
  // | In addition to the functions in this module, Arrays have a number of
  // | useful instances:
  // |
  // | * `Functor`, which provides `map :: forall a b. (a -> b) -> Array a ->
  // |   Array b`
  // | * `Apply`, which provides `(<*>) :: forall a b. Array (a -> b) -> Array a
  // |   -> Array b`. This function works a bit like a Cartesian product; the
  // |   result array is constructed by applying each function in the first
  // |   array to each value in the second, so that the result array ends up with
  // |   a length equal to the product of the two arguments' lengths.
  // | * `Bind`, which provides `(>>=) :: forall a b. (a -> Array b) -> Array a
  // |   -> Array b` (this is the same as `concatMap`).
  // | * `Semigroup`, which provides `(<>) :: forall a. Array a -> Array a ->
  // |   Array a`, for concatenating arrays.
  // | * `Foldable`, which provides a slew of functions for *folding* (also known
  // |   as *reducing*) arrays down to one value. For example,
  // |   `Data.Foldable.or` tests whether an array of `Boolean` values contains
  // |   at least one `true` value.
  // | * `Traversable`, which provides the PureScript version of a for-loop,
  // |   allowing you to STAI.iterate over an array and accumulate effects.
  // |
  "use strict";
  $PS["Data.Array"] = $PS["Data.Array"] || {};
  var exports = $PS["Data.Array"];
  var $foreign = $PS["Data.Array"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];

  // | Sort the elements of an array in increasing order, where elements are
  // | compared using the specified partial ordering, creating a new array.
  // |
  // | ```purescript
  // | compareLength a b = compare (length a) (length b)
  // | sortBy compareLength [[1, 2, 3], [7, 9], [-2]] = [[-2],[7,9],[1,2,3]]
  // | ```
  // |
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array (line 702, column 15 - line 707, column 1): " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------
  // | Sort the elements of an array in increasing order, creating a new array.
  // |
  // | ```purescript
  // | sort [2, -3, 1] = [-3, 1, 2]
  // | ```
  // |
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };

  // | Create an array of one element
  // | ```purescript
  // | singleton 2 = [2]
  // | ```
  var singleton = function (a) {
      return [ a ];
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------
  // | Test whether an array is empty.
  // | ```purescript
  // | null [] = true
  // | null [1, 2] = false
  // | ```
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };

  // | Attempt a computation multiple times, requiring at least one success.
  // |
  // | The `Lazy` constraint is used to generate the result lazily, to ensure
  // | termination.
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())($foreign.cons)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };

  // | Attempt a computation multiple times, returning as many successful results
  // | as possible (possibly zero).
  // |
  // | The `Lazy` constraint is used to generate the result lazily, to ensure
  // | termination.
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())([  ]));
          };
      };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------
  // | This function provides a safe way to read a value at a particular index
  // | from an array.
  // |
  // | ```purescript
  // | sentence = ["Hello", "World", "!"]
  // |
  // | index sentence 0 = Just "Hello"
  // | index sentence 7 = Nothing
  // | ```
  // |
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------
  // | Get the first element in an array, or `Nothing` if the array is empty
  // |
  // | Running time: `O(1)`.
  // |
  // | ```purescript
  // | head [1, 2] = Just 1
  // | head [] = Nothing
  // | ```
  // |
  var head = function (xs) {
      return index(xs)(0);
  };

  // | Convert a `Foldable` structure into an `Array`.
  // |
  // | ```purescript
  // | fromFoldable (Just 1) = [1]
  // | fromFoldable (Nothing) = []
  // | ```
  // |
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };

  // | Apply a function to each element in an array, and flatten the results
  // | into a single, new array.
  // |
  // | ```purescript
  // | concatMap (split $ Pattern " ") ["Hello World", "other thing"]
  // |    = ["Hello", "World", "other", "thing"]
  // | ```
  // |
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));

  // | Apply a function to each element in an array, keeping only the results
  // | which contain a value, creating a new array.
  // |
  // | ```purescript
  // | parseEmail :: String -> Maybe Email
  // | parseEmail = ...
  // |
  // | mapMaybe parseEmail ["a.com", "hello@example.com", "--"]
  // |    = [Email {user: "hello", domain: "example.com"}]
  // | ```
  // |
  var mapMaybe = function (f) {
      return concatMap(function ($117) {
          return Data_Maybe.maybe([  ])(singleton)(f($117));
      });
  };
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["some"] = some;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["index"] = index;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["filter"] = $foreign.filter;
  exports["drop"] = $foreign.drop;
  exports["zipWith"] = $foreign.zipWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.FoldableWithIndex"] = $PS["Data.FoldableWithIndex"] || {};
  var exports = $PS["Data.FoldableWithIndex"];

  // | A `Foldable` with an additional index.
  // | A `FoldableWithIndex` instance must be compatible with its `Foldable`
  // | instance
  // | ```purescript
  // | foldr f = foldrWithIndex (const f)
  // | foldl f = foldlWithIndex (const f)
  // | foldMap f = foldMapWithIndex (const f)
  // | ```
  // |
  // | Default implementations are provided by the following functions:
  // |
  // | - `foldrWithIndexDefault`
  // | - `foldlWithIndexDefault`
  // | - `foldMapWithIndexDefaultR`
  // | - `foldMapWithIndexDefaultL`
  // |
  // | Note: some combinations of the default implementations are unsafe to
  // | use together - causing a non-terminating mutually recursive cycle.
  // | These combinations are documented per function.
  var FoldableWithIndex = function (Foldable0, foldMapWithIndex, foldlWithIndex, foldrWithIndex) {
      this.Foldable0 = Foldable0;
      this.foldMapWithIndex = foldMapWithIndex;
      this.foldlWithIndex = foldlWithIndex;
      this.foldrWithIndex = foldrWithIndex;
  };
  var foldrWithIndex = function (dict) {
      return dict.foldrWithIndex;
  };
  var foldlWithIndex = function (dict) {
      return dict.foldlWithIndex;
  };
  var foldMapWithIndex = function (dict) {
      return dict.foldMapWithIndex;
  };
  exports["FoldableWithIndex"] = FoldableWithIndex;
  exports["foldrWithIndex"] = foldrWithIndex;
  exports["foldlWithIndex"] = foldlWithIndex;
  exports["foldMapWithIndex"] = foldMapWithIndex;
})(PS);
(function(exports) {
  "use strict";

  exports.runFn2 = function (fn) {
    return function (a) {
      return function (b) {
        return fn(a, b);
      };
    };
  };

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Function.Uncurried"] = $PS["Data.Function.Uncurried"] || {};
  var exports = $PS["Data.Function.Uncurried"];
  var $foreign = $PS["Data.Function.Uncurried"];
  exports["runFn2"] = $foreign.runFn2;
  exports["runFn4"] = $foreign.runFn4;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.FunctorWithIndex"] = $PS["Data.FunctorWithIndex"] || {};
  var exports = $PS["Data.FunctorWithIndex"];      

  // | A `Functor` with an additional index.
  // | Instances must satisfy a modified form of the `Functor` laws
  // | ```purescript
  // | mapWithIndex (\_ a -> a) = identity
  // | mapWithIndex f . mapWithIndex g = mapWithIndex (\i -> f i <<< g i)
  // | ```
  // | and be compatible with the `Functor` instance
  // | ```purescript
  // | map f = mapWithIndex (const f)
  // | ```
  var FunctorWithIndex = function (Functor0, mapWithIndex) {
      this.Functor0 = Functor0;
      this.mapWithIndex = mapWithIndex;
  };
  var mapWithIndex = function (dict) {
      return dict.mapWithIndex;
  };
  exports["FunctorWithIndex"] = FunctorWithIndex;
  exports["mapWithIndex"] = mapWithIndex;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.TraversableWithIndex"] = $PS["Data.TraversableWithIndex"] || {};
  var exports = $PS["Data.TraversableWithIndex"];  

  // | A `Traversable` with an additional index.  
  // | A `TraversableWithIndex` instance must be compatible with its
  // | `Traversable` instance
  // | ```purescript
  // | traverse f = traverseWithIndex (const f)
  // | ```
  // | with its `FoldableWithIndex` instance
  // | ```
  // | foldMapWithIndex f = unwrap <<< traverseWithIndex (\i -> Const <<< f i)
  // | ```
  // | and with its `FunctorWithIndex` instance
  // | ```
  // | mapWithIndex f = unwrap <<< traverseWithIndex (\i -> Identity <<< f i)
  // | ```
  // |
  // | A default implementation is provided by `traverseWithIndexDefault`.
  var TraversableWithIndex = function (FoldableWithIndex1, FunctorWithIndex0, Traversable2, traverseWithIndex) {
      this.FoldableWithIndex1 = FoldableWithIndex1;
      this.FunctorWithIndex0 = FunctorWithIndex0;
      this.Traversable2 = Traversable2;
      this.traverseWithIndex = traverseWithIndex;
  };
  var traverseWithIndex = function (dict) {
      return dict.traverseWithIndex;
  };
  exports["TraversableWithIndex"] = TraversableWithIndex;
  exports["traverseWithIndex"] = traverseWithIndex;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (k) {
    return function (m) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | Helper functions for working with mutable objects using the `ST` effect.
  // |
  // | This module can be used when performance is important and mutation is a
  // | local effect.
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines a type of native homogeneous Javascript Objects.
  // |
  // | To maximize performance, Javascript objects are not wrapped,
  // | and some native code is used even when it's not necessary.
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_FoldableWithIndex = $PS["Data.FoldableWithIndex"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_FunctorWithIndex = $PS["Data.FunctorWithIndex"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_TraversableWithIndex = $PS["Data.TraversableWithIndex"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];        

  // | Get a list of the values in a map
  var values = $foreign.toArrayWithKey(function (v) {
      return function (v1) {
          return v1;
      };
  });                                                            

  // | Convert an immutable Object into a mutable Object
  var thawST = $foreign["_copyST"];
  var mutate = function (f) {
      return function (m) {
          return $foreign.runST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };                                                                                                    

  // | Apply a function of two arguments to each key/value pair, producing a new map
  var mapWithKey = function (f) {
      return function (m) {
          return $foreign["_mapWithKey"](m, f);
      };
  };

  // | Lookup the value for a key in a map
  var lookup = Data_Function_Uncurried.runFn4($foreign["_lookup"])(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);

  // | Test whether a map is empty
  var isEmpty = $foreign.all(function (v) {
      return function (v1) {
          return false;
      };
  });

  // | Insert or replace a key/value pair in a map
  var insert = function (k) {
      return function (v) {
          return mutate(Foreign_Object_ST.poke(k)(v));
      };
  };
  var functorObject = new Data_Functor.Functor(function (f) {
      return function (m) {
          return $foreign["_fmapObject"](m, f);
      };
  });
  var functorWithIndexObject = new Data_FunctorWithIndex.FunctorWithIndex(function () {
      return functorObject;
  }, mapWithKey);

  // | Create an `Object a` from a foldable collection of key/value pairs
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return $foreign.runST(function __do() {
              var v = Foreign_Object_ST["new"]();
              Control_Monad_ST_Internal.foreach(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Data_Functor["void"](Control_Monad_ST_Internal.functorST)(Foreign_Object_ST.poke(v1.value0)(v1.value1)(v));
              })();
              return v;
          });
      };
  };

  // | Fold the keys and values of an object, accumulating values and effects in
  // | some `Monad`.
  var foldM = function (dictMonad) {
      return function (f) {
          return function (z) {
              return $foreign["_foldM"](Control_Bind.bind(dictMonad.Bind1()))(f)(Control_Applicative.pure(dictMonad.Applicative0())(z));
          };
      };
  };

  // | Compute the union of two maps, preferring the first map in the case of
  // | duplicate keys.
  var union = function (m) {
      return mutate(function (s) {
          return foldM(Control_Monad_ST_Internal.monadST)(function (s$prime) {
              return function (k) {
                  return function (v) {
                      return Foreign_Object_ST.poke(k)(v)(s$prime);
                  };
              };
          })(s)(m);
      });
  };

  // | Fold the keys and values of an object
  var fold = $foreign["_foldM"](Data_Function.applyFlipped);

  // | Fold the keys and values of an object, accumulating values using some
  // | `Monoid`.
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  };
  var foldableObject = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return foldMap(dictMonoid)(Data_Function["const"](f));
      };
  }, function (f) {
      return fold(function (z) {
          return function (v) {
              return f(z);
          };
      });
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(z)(values(m));
          };
      };
  });
  var foldableWithIndexObject = new Data_FoldableWithIndex.FoldableWithIndex(function () {
      return foldableObject;
  }, function (dictMonoid) {
      return foldMap(dictMonoid);
  }, function (f) {
      return fold(Data_Function.flip(f));
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(Data_Tuple.uncurry(f))(z)($foreign.toArrayWithKey(Data_Tuple.Tuple.create)(m));
          };
      };
  });
  var traversableWithIndexObject = new Data_TraversableWithIndex.TraversableWithIndex(function () {
      return foldableWithIndexObject;
  }, function () {
      return functorWithIndexObject;
  }, function () {
      return traversableObject;
  }, function (dictApplicative) {
      return function (f) {
          return function (ms) {
              return fold(function (acc) {
                  return function (k) {
                      return function (v) {
                          return Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Function.flip(insert(k)))(acc))(f(k)(v));
                      };
                  };
              })(Control_Applicative.pure(dictApplicative)($foreign.empty))(ms);
          };
      };
  });
  var traversableObject = new Data_Traversable.Traversable(function () {
      return foldableObject;
  }, function () {
      return functorObject;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableObject)(dictApplicative)(Control_Category.identity(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function ($47) {
          return Data_TraversableWithIndex.traverseWithIndex(traversableWithIndexObject)(dictApplicative)(Data_Function["const"]($47));
      };
  });

  // | Delete a key and value from a map
  var $$delete = function (k) {
      return mutate(Foreign_Object_ST["delete"](k));
  };

  // | Insert, remove or update a value for a key in a map
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var v = f(lookup(k)(m));
              if (v instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if (v instanceof Data_Maybe.Just) {
                  return insert(k)(v.value0)(m);
              };
              throw new Error("Failed pattern match at Foreign.Object (line 206, column 15 - line 208, column 25): " + [ v.constructor.name ]);
          };
      };
  };

  // | Remove or update a value for a key in a map
  var update = function (f) {
      return function (k) {
          return function (m) {
              return alter(Data_Maybe.maybe(Data_Maybe.Nothing.value)(f))(k)(m);
          };
      };
  };
  exports["isEmpty"] = isEmpty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["alter"] = alter;
  exports["update"] = update;
  exports["mapWithKey"] = mapWithKey;
  exports["values"] = values;
  exports["union"] = union;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["foldM"] = foldM;
  exports["thawST"] = thawST;
  exports["functorObject"] = functorObject;
  exports["functorWithIndexObject"] = functorWithIndexObject;
  exports["foldableObject"] = foldableObject;
  exports["foldableWithIndexObject"] = foldableWithIndexObject;
  exports["traversableObject"] = traversableObject;
  exports["traversableWithIndexObject"] = traversableWithIndexObject;
  exports["empty"] = $foreign.empty;
  exports["keys"] = $foreign.keys;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines a data type and various functions for creating and
  // | manipulating JSON values. The README contains additional documentation
  // | for this module.
  "use strict";
  $PS["Data.Argonaut.Core"] = $PS["Data.Argonaut.Core"] || {};
  var exports = $PS["Data.Argonaut.Core"];
  var $foreign = $PS["Data.Argonaut.Core"];
  var Data_Function = $PS["Data.Function"];
  var Foreign_Object = $PS["Foreign.Object"];   

  // | An empty object represented as `Json`
  var jsonEmptyObject = $foreign.fromObject(Foreign_Object.empty);

  // | A simpler version of `caseJson` which accepts a callback for when the
  // | `Json` argument was a `String`, and a default value for all other cases.
  var caseJsonString = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), Data_Function["const"](d), j);
          };
      };
  };                                        

  // | A simpler version of `caseJson` which accepts a callback for when the
  // | `Json` argument was an `Object`, and a default value for all other cases.
  var caseJsonObject = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, j);
          };
      };
  };                                          

  // | A simpler version of `caseJson` which accepts a callback for when the
  // | `Json` argument was a `Array Json`, and a default value for all other cases.
  var caseJsonArray = function (d) {
      return function (f) {
          return function (j) {
              return $foreign["_caseJson"](Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), Data_Function["const"](d), f, Data_Function["const"](d), j);
          };
      };
  };
  exports["caseJsonString"] = caseJsonString;
  exports["caseJsonArray"] = caseJsonArray;
  exports["caseJsonObject"] = caseJsonObject;
  exports["jsonEmptyObject"] = jsonEmptyObject;
  exports["fromString"] = $foreign.fromString;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromObject"] = $foreign.fromObject;
  exports["jsonNull"] = $foreign.jsonNull;
  exports["stringify"] = $foreign.stringify;
})(PS);
(function(exports) {
  "use strict";

  exports._jsonParser = function (fail, succ, s) {
    try {
      return succ(JSON.parse(s));
    }
    catch (e) {
      return fail(e.message);
    }
  };
})(PS["Data.Argonaut.Parser"] = PS["Data.Argonaut.Parser"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Argonaut.Parser"] = $PS["Data.Argonaut.Parser"] || {};
  var exports = $PS["Data.Argonaut.Parser"];
  var $foreign = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];                

  // | Parse a JSON string, constructing the `Json` value described by the string.
  // | To convert a string into a `Json` string, see `fromString`.
  var jsonParser = function (j) {
      return $foreign["_jsonParser"](Data_Either.Left.create, Data_Either.Right.create, j);
  };
  exports["jsonParser"] = jsonParser;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];

  // | An alias for `true`, which can be useful in guard clauses:
  // |
  // | ```purescript
  // | max x y | x >= y    = x
  // |         | otherwise = y
  // | ```
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  exports.topChar = String.fromCharCode(65535);
  exports.bottomChar = String.fromCharCode(0);
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Bounded"] = $PS["Data.Bounded"] || {};
  var exports = $PS["Data.Bounded"];
  var $foreign = $PS["Data.Bounded"];
  var Data_Ord = $PS["Data.Ord"];                  

  // | The `Bounded` type class represents totally ordered types that have an
  // | upper and lower boundary.
  // |
  // | Instances should satisfy the following law in addition to the `Ord` laws:
  // |
  // | - Bounded: `bottom <= a <= top`
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                            

  // | The `Bounded` `Int` instance has `top :: Int` equal to 2^31 - 1,
  // | and `bottom :: Int` equal to -2^31, since these are the largest and smallest
  // | integers representable by twos-complement 32-bit integers, respectively.
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);

  // | Characters fall within the Unicode range.
  var boundedChar = new Bounded(function () {
      return Data_Ord.ordChar;
  }, $foreign.bottomChar, $foreign.topChar);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
  exports["boundedChar"] = boundedChar;
})(PS);
(function(exports) {
  exports.withCharCode = function(f) {
      return function (c) {
          return String.fromCharCode(f(c.charCodeAt()));
      }
  }
})(PS["Data.Char.Unicode"] = PS["Data.Char.Unicode"] || {});
(function(exports) {
  "use strict";

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines types for some global Javascript functions
  // | and values.
  "use strict";
  $PS["Global"] = $PS["Global"] || {};
  var exports = $PS["Global"];
  var $foreign = $PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS);
(function(exports) {
  "use strict";          

  exports.floor = Math.floor;
})(PS["Math"] = PS["Math"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | Wraps the math functions and constants from Javascript's built-in `Math` object.
  // | See [Math Reference at MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math).
  "use strict";
  $PS["Math"] = $PS["Math"] || {};
  var exports = $PS["Math"];
  var $foreign = $PS["Math"];
  exports["floor"] = $foreign.floor;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Int"] = $PS["Data.Int"] || {};
  var exports = $PS["Data.Int"];
  var $foreign = $PS["Data.Int"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Global = $PS["Global"];
  var $$Math = $PS["Math"];

  // | Like `fromString`, but the integer can be specified in a different base.
  // |
  // | Example:
  // | ``` purs
  // | fromStringAs binary      "100" == Just 4
  // | fromStringAs hexadecimal "ff"  == Just 255
  // | ```
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

  // | Reads an `Int` from a `String` value. The number must parse as an integer
  // | and fall within the valid range of values for the `Int` type, otherwise
  // | `Nothing` is returned.
  var fromString = fromStringAs(10);

  // | Creates an `Int` from a `Number` value. The number must already be an
  // | integer and fall within the valid range of values for the `Int` type
  // | otherwise `Nothing` is returned.
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

  // | Convert an integral `Number` to an `Int`, by clamping to the `Int` range.
  // | This function will return 0 if the input is `NaN` or an `Infinity`.
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int (line 66, column 1 - line 66, column 29): " + [ x.constructor.name ]);
  };

  // | Convert a `Number` to an `Int`, by taking the closest integer equal to or
  // | less than the argument. Values outside the `Int` range are clamped, `NaN`
  // | and `Infinity` values return 0.
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["fromString"] = fromString;
  exports["fromStringAs"] = fromStringAs;
  exports["toNumber"] = $foreign.toNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  //---------------------------------------------------------
  // This is an automatically generated file: do not edit
  // Generated by ubconfc at Fri Nov 10 20:05:16 PST 2017
  //---------------------------------------------------------
  "use strict";
  $PS["Data.Char.Unicode.Internal"] = $PS["Data.Char.Unicode.Internal"] || {};
  var exports = $PS["Data.Char.Unicode.Internal"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ordering = $PS["Data.Ordering"];        

  // Unicode general categories, listed in the same order as in the Unicode
  // standard. This must be the same order as in GHC.Unicode.
  var NUMCAT_LU = (function () {
      function NUMCAT_LU() {

      };
      NUMCAT_LU.value = new NUMCAT_LU();
      return NUMCAT_LU;
  })();

  // Unicode general categories, listed in the same order as in the Unicode
  // standard. This must be the same order as in GHC.Unicode.
  var NUMCAT_LL = (function () {
      function NUMCAT_LL() {

      };
      NUMCAT_LL.value = new NUMCAT_LL();
      return NUMCAT_LL;
  })();

  // Unicode general categories, listed in the same order as in the Unicode
  // standard. This must be the same order as in GHC.Unicode.
  var NUMCAT_LT = (function () {
      function NUMCAT_LT() {

      };
      NUMCAT_LT.value = new NUMCAT_LT();
      return NUMCAT_LT;
  })();

  // Unicode general categories, listed in the same order as in the Unicode
  // standard. This must be the same order as in GHC.Unicode.
  var NUMCAT_MN = (function () {
      function NUMCAT_MN() {

      };
      NUMCAT_MN.value = new NUMCAT_MN();
      return NUMCAT_MN;
  })();

  // Unicode general categories, listed in the same order as in the Unicode
  // standard. This must be the same order as in GHC.Unicode.
  var NUMCAT_NL = (function () {
      function NUMCAT_NL() {

      };
      NUMCAT_NL.value = new NUMCAT_NL();
      return NUMCAT_NL;
  })();

  // Unicode general categories, listed in the same order as in the Unicode
  // standard. This must be the same order as in GHC.Unicode.
  var NUMCAT_SO = (function () {
      function NUMCAT_SO() {

      };
      NUMCAT_SO.value = new NUMCAT_SO();
      return NUMCAT_SO;
  })();

  // Unicode general categories, listed in the same order as in the Unicode
  // standard. This must be the same order as in GHC.Unicode.
  var NUMCAT_CN = (function () {
      function NUMCAT_CN() {

      };
      NUMCAT_CN.value = new NUMCAT_CN();
      return NUMCAT_CN;
  })();                  
  var numConvBlocks = 1230;
  var gencatSO = 8192;
  var rule148 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: 0,
      lowdist: 26,
      titledist: 0
  };
  var rule149 = {
      category: gencatSO,
      unicodeCat: NUMCAT_SO.value,
      possible: 1,
      updist: -26 | 0,
      lowdist: 0,
      titledist: -26 | 0
  };
  var gencatNL = 16777216;
  var rule146 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: 0,
      lowdist: 16,
      titledist: 0
  };
  var rule147 = {
      category: gencatNL,
      unicodeCat: NUMCAT_NL.value,
      possible: 1,
      updist: -16 | 0,
      lowdist: 0,
      titledist: -16 | 0
  };
  var gencatMN = 2097152;
  var rule85 = {
      category: gencatMN,
      unicodeCat: NUMCAT_MN.value,
      possible: 1,
      updist: 84,
      lowdist: 0,
      titledist: 84
  };
  var gencatLU = 512;

  // Obtain the reference to character rule by doing
  // binary search over the specified array of blocks.
  // To make checkattr shorter, the address of
  // nullrule is returned if the search fails:
  // this rule defines no category and no conversion
  // distances. The compare function returns 0 when
  // key->start is within the block. Otherwise
  // result of comparison of key->start and start of the
  // current block is returned as usual.
  var nullrule = {
      category: gencatLU,
      unicodeCat: NUMCAT_CN.value,
      possible: 0,
      updist: 0,
      lowdist: 0,
      titledist: 0
  };
  var rule105 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -60 | 0,
      titledist: 0
  };
  var rule107 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7 | 0,
      titledist: 0
  };
  var rule108 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 80,
      titledist: 0
  };
  var rule110 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 15,
      titledist: 0
  };
  var rule112 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 48,
      titledist: 0
  };
  var rule115 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 7264,
      titledist: 0
  };
  var rule120 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7615 | 0,
      titledist: 0
  };
  var rule122 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule131 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -74 | 0,
      titledist: 0
  };
  var rule134 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -86 | 0,
      titledist: 0
  };
  var rule135 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -100 | 0,
      titledist: 0
  };
  var rule136 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -112 | 0,
      titledist: 0
  };
  var rule137 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -128 | 0,
      titledist: 0
  };
  var rule138 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -126 | 0,
      titledist: 0
  };
  var rule141 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -7517 | 0,
      titledist: 0
  };
  var rule142 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8383 | 0,
      titledist: 0
  };
  var rule143 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -8262 | 0,
      titledist: 0
  };
  var rule144 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 28,
      titledist: 0
  };
  var rule150 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10743 | 0,
      titledist: 0
  };
  var rule151 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -3814 | 0,
      titledist: 0
  };
  var rule152 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10727 | 0,
      titledist: 0
  };
  var rule155 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10780 | 0,
      titledist: 0
  };
  var rule156 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10749 | 0,
      titledist: 0
  };
  var rule157 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10783 | 0,
      titledist: 0
  };
  var rule158 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10782 | 0,
      titledist: 0
  };
  var rule159 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -10815 | 0,
      titledist: 0
  };
  var rule161 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -35332 | 0,
      titledist: 0
  };
  var rule162 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -42280 | 0,
      titledist: 0
  };
  var rule165 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 40,
      titledist: 0
  };
  var rule21 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 1,
      titledist: 0
  };
  var rule23 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -199 | 0,
      titledist: 0
  };
  var rule25 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -121 | 0,
      titledist: 0
  };
  var rule28 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 210,
      titledist: 0
  };
  var rule29 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 206,
      titledist: 0
  };
  var rule30 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 205,
      titledist: 0
  };
  var rule31 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 79,
      titledist: 0
  };
  var rule32 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 202,
      titledist: 0
  };
  var rule33 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 203,
      titledist: 0
  };
  var rule34 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 207,
      titledist: 0
  };
  var rule36 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 211,
      titledist: 0
  };
  var rule37 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 209,
      titledist: 0
  };
  var rule39 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 213,
      titledist: 0
  };
  var rule41 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 214,
      titledist: 0
  };
  var rule42 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 218,
      titledist: 0
  };
  var rule43 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 217,
      titledist: 0
  };
  var rule44 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 219,
      titledist: 0
  };
  var rule47 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 2,
      titledist: 1
  };
  var rule51 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -97 | 0,
      titledist: 0
  };
  var rule52 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -56 | 0,
      titledist: 0
  };
  var rule53 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -130 | 0,
      titledist: 0
  };
  var rule54 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10795,
      titledist: 0
  };
  var rule55 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -163 | 0,
      titledist: 0
  };
  var rule56 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 10792,
      titledist: 0
  };
  var rule58 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: -195 | 0,
      titledist: 0
  };
  var rule59 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 69,
      titledist: 0
  };
  var rule60 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 71,
      titledist: 0
  };
  var rule86 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 38,
      titledist: 0
  };
  var rule87 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 37,
      titledist: 0
  };
  var rule88 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 64,
      titledist: 0
  };
  var rule89 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 63,
      titledist: 0
  };
  var rule9 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 32,
      titledist: 0
  };
  var rule95 = {
      category: gencatLU,
      unicodeCat: NUMCAT_LU.value,
      possible: 1,
      updist: 0,
      lowdist: 8,
      titledist: 0
  };
  var gencatLT = 524288;
  var rule129 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -8 | 0,
      titledist: 0
  };
  var rule132 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: 0,
      lowdist: -9 | 0,
      titledist: 0
  };
  var rule48 = {
      category: gencatLT,
      unicodeCat: NUMCAT_LT.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 1,
      titledist: 0
  };
  var gencatLL = 4096;
  var rule100 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -54 | 0,
      lowdist: 0,
      titledist: -54 | 0
  };
  var rule101 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -8 | 0,
      lowdist: 0,
      titledist: -8 | 0
  };
  var rule102 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -86 | 0,
      lowdist: 0,
      titledist: -86 | 0
  };
  var rule103 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -80 | 0,
      lowdist: 0,
      titledist: -80 | 0
  };
  var rule104 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 7,
      lowdist: 0,
      titledist: 7
  };
  var rule106 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -96 | 0,
      lowdist: 0,
      titledist: -96 | 0
  };
  var rule111 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -15 | 0,
      lowdist: 0,
      titledist: -15 | 0
  };
  var rule113 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -48 | 0,
      lowdist: 0,
      titledist: -48 | 0
  };
  var rule117 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 35332,
      lowdist: 0,
      titledist: 35332
  };
  var rule118 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 3814,
      lowdist: 0,
      titledist: 3814
  };
  var rule119 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -59 | 0,
      lowdist: 0,
      titledist: -59 | 0
  };
  var rule12 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -32 | 0,
      lowdist: 0,
      titledist: -32 | 0
  };
  var rule121 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 8,
      lowdist: 0,
      titledist: 8
  };
  var rule123 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 74,
      lowdist: 0,
      titledist: 74
  };
  var rule124 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 86,
      lowdist: 0,
      titledist: 86
  };
  var rule125 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 100,
      lowdist: 0,
      titledist: 100
  };
  var rule126 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 128,
      lowdist: 0,
      titledist: 128
  };
  var rule127 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 112,
      lowdist: 0,
      titledist: 112
  };
  var rule128 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 126,
      lowdist: 0,
      titledist: 126
  };
  var rule130 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 9,
      lowdist: 0,
      titledist: 9
  };
  var rule133 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7205 | 0,
      lowdist: 0,
      titledist: -7205 | 0
  };
  var rule145 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -28 | 0,
      lowdist: 0,
      titledist: -28 | 0
  };
  var rule153 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10795 | 0,
      lowdist: 0,
      titledist: -10795 | 0
  };
  var rule154 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -10792 | 0,
      lowdist: 0,
      titledist: -10792 | 0
  };
  var rule160 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -7264 | 0,
      lowdist: 0,
      titledist: -7264 | 0
  };
  var rule166 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -40 | 0,
      lowdist: 0,
      titledist: -40 | 0
  };
  var rule18 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 743,
      lowdist: 0,
      titledist: 743
  };
  var rule20 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 121,
      lowdist: 0,
      titledist: 121
  };
  var rule22 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -1 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule24 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -232 | 0,
      lowdist: 0,
      titledist: -232 | 0
  };
  var rule26 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -300 | 0,
      lowdist: 0,
      titledist: -300 | 0
  };
  var rule27 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 195,
      lowdist: 0,
      titledist: 195
  };
  var rule35 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 97,
      lowdist: 0,
      titledist: 97
  };
  var rule38 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 163,
      lowdist: 0,
      titledist: 163
  };
  var rule40 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 130,
      lowdist: 0,
      titledist: 130
  };
  var rule46 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 56,
      lowdist: 0,
      titledist: 56
  };
  var rule49 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -2 | 0,
      lowdist: 0,
      titledist: -1 | 0
  };
  var rule50 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -79 | 0,
      lowdist: 0,
      titledist: -79 | 0
  };
  var rule57 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10815,
      lowdist: 0,
      titledist: 10815
  };
  var rule61 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10783,
      lowdist: 0,
      titledist: 10783
  };
  var rule62 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10780,
      lowdist: 0,
      titledist: 10780
  };
  var rule63 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10782,
      lowdist: 0,
      titledist: 10782
  };
  var rule64 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -210 | 0,
      lowdist: 0,
      titledist: -210 | 0
  };
  var rule65 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -206 | 0,
      lowdist: 0,
      titledist: -206 | 0
  };
  var rule66 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -205 | 0,
      lowdist: 0,
      titledist: -205 | 0
  };
  var rule67 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -202 | 0,
      lowdist: 0,
      titledist: -202 | 0
  };
  var rule68 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -203 | 0,
      lowdist: 0,
      titledist: -203 | 0
  };
  var rule69 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -207 | 0,
      lowdist: 0,
      titledist: -207 | 0
  };
  var rule70 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 42280,
      lowdist: 0,
      titledist: 42280
  };
  var rule71 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -209 | 0,
      lowdist: 0,
      titledist: -209 | 0
  };
  var rule72 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -211 | 0,
      lowdist: 0,
      titledist: -211 | 0
  };
  var rule73 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10743,
      lowdist: 0,
      titledist: 10743
  };
  var rule74 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10749,
      lowdist: 0,
      titledist: 10749
  };
  var rule75 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -213 | 0,
      lowdist: 0,
      titledist: -213 | 0
  };
  var rule76 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -214 | 0,
      lowdist: 0,
      titledist: -214 | 0
  };
  var rule77 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: 10727,
      lowdist: 0,
      titledist: 10727
  };
  var rule78 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -218 | 0,
      lowdist: 0,
      titledist: -218 | 0
  };
  var rule79 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -69 | 0,
      lowdist: 0,
      titledist: -69 | 0
  };
  var rule80 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -217 | 0,
      lowdist: 0,
      titledist: -217 | 0
  };
  var rule81 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -71 | 0,
      lowdist: 0,
      titledist: -71 | 0
  };
  var rule82 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -219 | 0,
      lowdist: 0,
      titledist: -219 | 0
  };
  var rule90 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -38 | 0,
      lowdist: 0,
      titledist: -38 | 0
  };
  var rule91 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -37 | 0,
      lowdist: 0,
      titledist: -37 | 0
  };
  var rule92 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -31 | 0,
      lowdist: 0,
      titledist: -31 | 0
  };
  var rule93 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -64 | 0,
      lowdist: 0,
      titledist: -64 | 0
  };
  var rule94 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -63 | 0,
      lowdist: 0,
      titledist: -63 | 0
  };
  var rule96 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -62 | 0,
      lowdist: 0,
      titledist: -62 | 0
  };
  var rule97 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -57 | 0,
      lowdist: 0,
      titledist: -57 | 0
  };
  var rule99 = {
      category: gencatLL,
      unicodeCat: NUMCAT_LL.value,
      possible: 1,
      updist: -47 | 0,
      lowdist: 0,
      titledist: -47 | 0
  };
  var convchars = [ {
      start: 65,
      length: 26,
      convRule: rule9
  }, {
      start: 97,
      length: 26,
      convRule: rule12
  }, {
      start: 181,
      length: 1,
      convRule: rule18
  }, {
      start: 192,
      length: 23,
      convRule: rule9
  }, {
      start: 216,
      length: 7,
      convRule: rule9
  }, {
      start: 224,
      length: 23,
      convRule: rule12
  }, {
      start: 248,
      length: 7,
      convRule: rule12
  }, {
      start: 255,
      length: 1,
      convRule: rule20
  }, {
      start: 256,
      length: 1,
      convRule: rule21
  }, {
      start: 257,
      length: 1,
      convRule: rule22
  }, {
      start: 258,
      length: 1,
      convRule: rule21
  }, {
      start: 259,
      length: 1,
      convRule: rule22
  }, {
      start: 260,
      length: 1,
      convRule: rule21
  }, {
      start: 261,
      length: 1,
      convRule: rule22
  }, {
      start: 262,
      length: 1,
      convRule: rule21
  }, {
      start: 263,
      length: 1,
      convRule: rule22
  }, {
      start: 264,
      length: 1,
      convRule: rule21
  }, {
      start: 265,
      length: 1,
      convRule: rule22
  }, {
      start: 266,
      length: 1,
      convRule: rule21
  }, {
      start: 267,
      length: 1,
      convRule: rule22
  }, {
      start: 268,
      length: 1,
      convRule: rule21
  }, {
      start: 269,
      length: 1,
      convRule: rule22
  }, {
      start: 270,
      length: 1,
      convRule: rule21
  }, {
      start: 271,
      length: 1,
      convRule: rule22
  }, {
      start: 272,
      length: 1,
      convRule: rule21
  }, {
      start: 273,
      length: 1,
      convRule: rule22
  }, {
      start: 274,
      length: 1,
      convRule: rule21
  }, {
      start: 275,
      length: 1,
      convRule: rule22
  }, {
      start: 276,
      length: 1,
      convRule: rule21
  }, {
      start: 277,
      length: 1,
      convRule: rule22
  }, {
      start: 278,
      length: 1,
      convRule: rule21
  }, {
      start: 279,
      length: 1,
      convRule: rule22
  }, {
      start: 280,
      length: 1,
      convRule: rule21
  }, {
      start: 281,
      length: 1,
      convRule: rule22
  }, {
      start: 282,
      length: 1,
      convRule: rule21
  }, {
      start: 283,
      length: 1,
      convRule: rule22
  }, {
      start: 284,
      length: 1,
      convRule: rule21
  }, {
      start: 285,
      length: 1,
      convRule: rule22
  }, {
      start: 286,
      length: 1,
      convRule: rule21
  }, {
      start: 287,
      length: 1,
      convRule: rule22
  }, {
      start: 288,
      length: 1,
      convRule: rule21
  }, {
      start: 289,
      length: 1,
      convRule: rule22
  }, {
      start: 290,
      length: 1,
      convRule: rule21
  }, {
      start: 291,
      length: 1,
      convRule: rule22
  }, {
      start: 292,
      length: 1,
      convRule: rule21
  }, {
      start: 293,
      length: 1,
      convRule: rule22
  }, {
      start: 294,
      length: 1,
      convRule: rule21
  }, {
      start: 295,
      length: 1,
      convRule: rule22
  }, {
      start: 296,
      length: 1,
      convRule: rule21
  }, {
      start: 297,
      length: 1,
      convRule: rule22
  }, {
      start: 298,
      length: 1,
      convRule: rule21
  }, {
      start: 299,
      length: 1,
      convRule: rule22
  }, {
      start: 300,
      length: 1,
      convRule: rule21
  }, {
      start: 301,
      length: 1,
      convRule: rule22
  }, {
      start: 302,
      length: 1,
      convRule: rule21
  }, {
      start: 303,
      length: 1,
      convRule: rule22
  }, {
      start: 304,
      length: 1,
      convRule: rule23
  }, {
      start: 305,
      length: 1,
      convRule: rule24
  }, {
      start: 306,
      length: 1,
      convRule: rule21
  }, {
      start: 307,
      length: 1,
      convRule: rule22
  }, {
      start: 308,
      length: 1,
      convRule: rule21
  }, {
      start: 309,
      length: 1,
      convRule: rule22
  }, {
      start: 310,
      length: 1,
      convRule: rule21
  }, {
      start: 311,
      length: 1,
      convRule: rule22
  }, {
      start: 313,
      length: 1,
      convRule: rule21
  }, {
      start: 314,
      length: 1,
      convRule: rule22
  }, {
      start: 315,
      length: 1,
      convRule: rule21
  }, {
      start: 316,
      length: 1,
      convRule: rule22
  }, {
      start: 317,
      length: 1,
      convRule: rule21
  }, {
      start: 318,
      length: 1,
      convRule: rule22
  }, {
      start: 319,
      length: 1,
      convRule: rule21
  }, {
      start: 320,
      length: 1,
      convRule: rule22
  }, {
      start: 321,
      length: 1,
      convRule: rule21
  }, {
      start: 322,
      length: 1,
      convRule: rule22
  }, {
      start: 323,
      length: 1,
      convRule: rule21
  }, {
      start: 324,
      length: 1,
      convRule: rule22
  }, {
      start: 325,
      length: 1,
      convRule: rule21
  }, {
      start: 326,
      length: 1,
      convRule: rule22
  }, {
      start: 327,
      length: 1,
      convRule: rule21
  }, {
      start: 328,
      length: 1,
      convRule: rule22
  }, {
      start: 330,
      length: 1,
      convRule: rule21
  }, {
      start: 331,
      length: 1,
      convRule: rule22
  }, {
      start: 332,
      length: 1,
      convRule: rule21
  }, {
      start: 333,
      length: 1,
      convRule: rule22
  }, {
      start: 334,
      length: 1,
      convRule: rule21
  }, {
      start: 335,
      length: 1,
      convRule: rule22
  }, {
      start: 336,
      length: 1,
      convRule: rule21
  }, {
      start: 337,
      length: 1,
      convRule: rule22
  }, {
      start: 338,
      length: 1,
      convRule: rule21
  }, {
      start: 339,
      length: 1,
      convRule: rule22
  }, {
      start: 340,
      length: 1,
      convRule: rule21
  }, {
      start: 341,
      length: 1,
      convRule: rule22
  }, {
      start: 342,
      length: 1,
      convRule: rule21
  }, {
      start: 343,
      length: 1,
      convRule: rule22
  }, {
      start: 344,
      length: 1,
      convRule: rule21
  }, {
      start: 345,
      length: 1,
      convRule: rule22
  }, {
      start: 346,
      length: 1,
      convRule: rule21
  }, {
      start: 347,
      length: 1,
      convRule: rule22
  }, {
      start: 348,
      length: 1,
      convRule: rule21
  }, {
      start: 349,
      length: 1,
      convRule: rule22
  }, {
      start: 350,
      length: 1,
      convRule: rule21
  }, {
      start: 351,
      length: 1,
      convRule: rule22
  }, {
      start: 352,
      length: 1,
      convRule: rule21
  }, {
      start: 353,
      length: 1,
      convRule: rule22
  }, {
      start: 354,
      length: 1,
      convRule: rule21
  }, {
      start: 355,
      length: 1,
      convRule: rule22
  }, {
      start: 356,
      length: 1,
      convRule: rule21
  }, {
      start: 357,
      length: 1,
      convRule: rule22
  }, {
      start: 358,
      length: 1,
      convRule: rule21
  }, {
      start: 359,
      length: 1,
      convRule: rule22
  }, {
      start: 360,
      length: 1,
      convRule: rule21
  }, {
      start: 361,
      length: 1,
      convRule: rule22
  }, {
      start: 362,
      length: 1,
      convRule: rule21
  }, {
      start: 363,
      length: 1,
      convRule: rule22
  }, {
      start: 364,
      length: 1,
      convRule: rule21
  }, {
      start: 365,
      length: 1,
      convRule: rule22
  }, {
      start: 366,
      length: 1,
      convRule: rule21
  }, {
      start: 367,
      length: 1,
      convRule: rule22
  }, {
      start: 368,
      length: 1,
      convRule: rule21
  }, {
      start: 369,
      length: 1,
      convRule: rule22
  }, {
      start: 370,
      length: 1,
      convRule: rule21
  }, {
      start: 371,
      length: 1,
      convRule: rule22
  }, {
      start: 372,
      length: 1,
      convRule: rule21
  }, {
      start: 373,
      length: 1,
      convRule: rule22
  }, {
      start: 374,
      length: 1,
      convRule: rule21
  }, {
      start: 375,
      length: 1,
      convRule: rule22
  }, {
      start: 376,
      length: 1,
      convRule: rule25
  }, {
      start: 377,
      length: 1,
      convRule: rule21
  }, {
      start: 378,
      length: 1,
      convRule: rule22
  }, {
      start: 379,
      length: 1,
      convRule: rule21
  }, {
      start: 380,
      length: 1,
      convRule: rule22
  }, {
      start: 381,
      length: 1,
      convRule: rule21
  }, {
      start: 382,
      length: 1,
      convRule: rule22
  }, {
      start: 383,
      length: 1,
      convRule: rule26
  }, {
      start: 384,
      length: 1,
      convRule: rule27
  }, {
      start: 385,
      length: 1,
      convRule: rule28
  }, {
      start: 386,
      length: 1,
      convRule: rule21
  }, {
      start: 387,
      length: 1,
      convRule: rule22
  }, {
      start: 388,
      length: 1,
      convRule: rule21
  }, {
      start: 389,
      length: 1,
      convRule: rule22
  }, {
      start: 390,
      length: 1,
      convRule: rule29
  }, {
      start: 391,
      length: 1,
      convRule: rule21
  }, {
      start: 392,
      length: 1,
      convRule: rule22
  }, {
      start: 393,
      length: 2,
      convRule: rule30
  }, {
      start: 395,
      length: 1,
      convRule: rule21
  }, {
      start: 396,
      length: 1,
      convRule: rule22
  }, {
      start: 398,
      length: 1,
      convRule: rule31
  }, {
      start: 399,
      length: 1,
      convRule: rule32
  }, {
      start: 400,
      length: 1,
      convRule: rule33
  }, {
      start: 401,
      length: 1,
      convRule: rule21
  }, {
      start: 402,
      length: 1,
      convRule: rule22
  }, {
      start: 403,
      length: 1,
      convRule: rule30
  }, {
      start: 404,
      length: 1,
      convRule: rule34
  }, {
      start: 405,
      length: 1,
      convRule: rule35
  }, {
      start: 406,
      length: 1,
      convRule: rule36
  }, {
      start: 407,
      length: 1,
      convRule: rule37
  }, {
      start: 408,
      length: 1,
      convRule: rule21
  }, {
      start: 409,
      length: 1,
      convRule: rule22
  }, {
      start: 410,
      length: 1,
      convRule: rule38
  }, {
      start: 412,
      length: 1,
      convRule: rule36
  }, {
      start: 413,
      length: 1,
      convRule: rule39
  }, {
      start: 414,
      length: 1,
      convRule: rule40
  }, {
      start: 415,
      length: 1,
      convRule: rule41
  }, {
      start: 416,
      length: 1,
      convRule: rule21
  }, {
      start: 417,
      length: 1,
      convRule: rule22
  }, {
      start: 418,
      length: 1,
      convRule: rule21
  }, {
      start: 419,
      length: 1,
      convRule: rule22
  }, {
      start: 420,
      length: 1,
      convRule: rule21
  }, {
      start: 421,
      length: 1,
      convRule: rule22
  }, {
      start: 422,
      length: 1,
      convRule: rule42
  }, {
      start: 423,
      length: 1,
      convRule: rule21
  }, {
      start: 424,
      length: 1,
      convRule: rule22
  }, {
      start: 425,
      length: 1,
      convRule: rule42
  }, {
      start: 428,
      length: 1,
      convRule: rule21
  }, {
      start: 429,
      length: 1,
      convRule: rule22
  }, {
      start: 430,
      length: 1,
      convRule: rule42
  }, {
      start: 431,
      length: 1,
      convRule: rule21
  }, {
      start: 432,
      length: 1,
      convRule: rule22
  }, {
      start: 433,
      length: 2,
      convRule: rule43
  }, {
      start: 435,
      length: 1,
      convRule: rule21
  }, {
      start: 436,
      length: 1,
      convRule: rule22
  }, {
      start: 437,
      length: 1,
      convRule: rule21
  }, {
      start: 438,
      length: 1,
      convRule: rule22
  }, {
      start: 439,
      length: 1,
      convRule: rule44
  }, {
      start: 440,
      length: 1,
      convRule: rule21
  }, {
      start: 441,
      length: 1,
      convRule: rule22
  }, {
      start: 444,
      length: 1,
      convRule: rule21
  }, {
      start: 445,
      length: 1,
      convRule: rule22
  }, {
      start: 447,
      length: 1,
      convRule: rule46
  }, {
      start: 452,
      length: 1,
      convRule: rule47
  }, {
      start: 453,
      length: 1,
      convRule: rule48
  }, {
      start: 454,
      length: 1,
      convRule: rule49
  }, {
      start: 455,
      length: 1,
      convRule: rule47
  }, {
      start: 456,
      length: 1,
      convRule: rule48
  }, {
      start: 457,
      length: 1,
      convRule: rule49
  }, {
      start: 458,
      length: 1,
      convRule: rule47
  }, {
      start: 459,
      length: 1,
      convRule: rule48
  }, {
      start: 460,
      length: 1,
      convRule: rule49
  }, {
      start: 461,
      length: 1,
      convRule: rule21
  }, {
      start: 462,
      length: 1,
      convRule: rule22
  }, {
      start: 463,
      length: 1,
      convRule: rule21
  }, {
      start: 464,
      length: 1,
      convRule: rule22
  }, {
      start: 465,
      length: 1,
      convRule: rule21
  }, {
      start: 466,
      length: 1,
      convRule: rule22
  }, {
      start: 467,
      length: 1,
      convRule: rule21
  }, {
      start: 468,
      length: 1,
      convRule: rule22
  }, {
      start: 469,
      length: 1,
      convRule: rule21
  }, {
      start: 470,
      length: 1,
      convRule: rule22
  }, {
      start: 471,
      length: 1,
      convRule: rule21
  }, {
      start: 472,
      length: 1,
      convRule: rule22
  }, {
      start: 473,
      length: 1,
      convRule: rule21
  }, {
      start: 474,
      length: 1,
      convRule: rule22
  }, {
      start: 475,
      length: 1,
      convRule: rule21
  }, {
      start: 476,
      length: 1,
      convRule: rule22
  }, {
      start: 477,
      length: 1,
      convRule: rule50
  }, {
      start: 478,
      length: 1,
      convRule: rule21
  }, {
      start: 479,
      length: 1,
      convRule: rule22
  }, {
      start: 480,
      length: 1,
      convRule: rule21
  }, {
      start: 481,
      length: 1,
      convRule: rule22
  }, {
      start: 482,
      length: 1,
      convRule: rule21
  }, {
      start: 483,
      length: 1,
      convRule: rule22
  }, {
      start: 484,
      length: 1,
      convRule: rule21
  }, {
      start: 485,
      length: 1,
      convRule: rule22
  }, {
      start: 486,
      length: 1,
      convRule: rule21
  }, {
      start: 487,
      length: 1,
      convRule: rule22
  }, {
      start: 488,
      length: 1,
      convRule: rule21
  }, {
      start: 489,
      length: 1,
      convRule: rule22
  }, {
      start: 490,
      length: 1,
      convRule: rule21
  }, {
      start: 491,
      length: 1,
      convRule: rule22
  }, {
      start: 492,
      length: 1,
      convRule: rule21
  }, {
      start: 493,
      length: 1,
      convRule: rule22
  }, {
      start: 494,
      length: 1,
      convRule: rule21
  }, {
      start: 495,
      length: 1,
      convRule: rule22
  }, {
      start: 497,
      length: 1,
      convRule: rule47
  }, {
      start: 498,
      length: 1,
      convRule: rule48
  }, {
      start: 499,
      length: 1,
      convRule: rule49
  }, {
      start: 500,
      length: 1,
      convRule: rule21
  }, {
      start: 501,
      length: 1,
      convRule: rule22
  }, {
      start: 502,
      length: 1,
      convRule: rule51
  }, {
      start: 503,
      length: 1,
      convRule: rule52
  }, {
      start: 504,
      length: 1,
      convRule: rule21
  }, {
      start: 505,
      length: 1,
      convRule: rule22
  }, {
      start: 506,
      length: 1,
      convRule: rule21
  }, {
      start: 507,
      length: 1,
      convRule: rule22
  }, {
      start: 508,
      length: 1,
      convRule: rule21
  }, {
      start: 509,
      length: 1,
      convRule: rule22
  }, {
      start: 510,
      length: 1,
      convRule: rule21
  }, {
      start: 511,
      length: 1,
      convRule: rule22
  }, {
      start: 512,
      length: 1,
      convRule: rule21
  }, {
      start: 513,
      length: 1,
      convRule: rule22
  }, {
      start: 514,
      length: 1,
      convRule: rule21
  }, {
      start: 515,
      length: 1,
      convRule: rule22
  }, {
      start: 516,
      length: 1,
      convRule: rule21
  }, {
      start: 517,
      length: 1,
      convRule: rule22
  }, {
      start: 518,
      length: 1,
      convRule: rule21
  }, {
      start: 519,
      length: 1,
      convRule: rule22
  }, {
      start: 520,
      length: 1,
      convRule: rule21
  }, {
      start: 521,
      length: 1,
      convRule: rule22
  }, {
      start: 522,
      length: 1,
      convRule: rule21
  }, {
      start: 523,
      length: 1,
      convRule: rule22
  }, {
      start: 524,
      length: 1,
      convRule: rule21
  }, {
      start: 525,
      length: 1,
      convRule: rule22
  }, {
      start: 526,
      length: 1,
      convRule: rule21
  }, {
      start: 527,
      length: 1,
      convRule: rule22
  }, {
      start: 528,
      length: 1,
      convRule: rule21
  }, {
      start: 529,
      length: 1,
      convRule: rule22
  }, {
      start: 530,
      length: 1,
      convRule: rule21
  }, {
      start: 531,
      length: 1,
      convRule: rule22
  }, {
      start: 532,
      length: 1,
      convRule: rule21
  }, {
      start: 533,
      length: 1,
      convRule: rule22
  }, {
      start: 534,
      length: 1,
      convRule: rule21
  }, {
      start: 535,
      length: 1,
      convRule: rule22
  }, {
      start: 536,
      length: 1,
      convRule: rule21
  }, {
      start: 537,
      length: 1,
      convRule: rule22
  }, {
      start: 538,
      length: 1,
      convRule: rule21
  }, {
      start: 539,
      length: 1,
      convRule: rule22
  }, {
      start: 540,
      length: 1,
      convRule: rule21
  }, {
      start: 541,
      length: 1,
      convRule: rule22
  }, {
      start: 542,
      length: 1,
      convRule: rule21
  }, {
      start: 543,
      length: 1,
      convRule: rule22
  }, {
      start: 544,
      length: 1,
      convRule: rule53
  }, {
      start: 546,
      length: 1,
      convRule: rule21
  }, {
      start: 547,
      length: 1,
      convRule: rule22
  }, {
      start: 548,
      length: 1,
      convRule: rule21
  }, {
      start: 549,
      length: 1,
      convRule: rule22
  }, {
      start: 550,
      length: 1,
      convRule: rule21
  }, {
      start: 551,
      length: 1,
      convRule: rule22
  }, {
      start: 552,
      length: 1,
      convRule: rule21
  }, {
      start: 553,
      length: 1,
      convRule: rule22
  }, {
      start: 554,
      length: 1,
      convRule: rule21
  }, {
      start: 555,
      length: 1,
      convRule: rule22
  }, {
      start: 556,
      length: 1,
      convRule: rule21
  }, {
      start: 557,
      length: 1,
      convRule: rule22
  }, {
      start: 558,
      length: 1,
      convRule: rule21
  }, {
      start: 559,
      length: 1,
      convRule: rule22
  }, {
      start: 560,
      length: 1,
      convRule: rule21
  }, {
      start: 561,
      length: 1,
      convRule: rule22
  }, {
      start: 562,
      length: 1,
      convRule: rule21
  }, {
      start: 563,
      length: 1,
      convRule: rule22
  }, {
      start: 570,
      length: 1,
      convRule: rule54
  }, {
      start: 571,
      length: 1,
      convRule: rule21
  }, {
      start: 572,
      length: 1,
      convRule: rule22
  }, {
      start: 573,
      length: 1,
      convRule: rule55
  }, {
      start: 574,
      length: 1,
      convRule: rule56
  }, {
      start: 575,
      length: 2,
      convRule: rule57
  }, {
      start: 577,
      length: 1,
      convRule: rule21
  }, {
      start: 578,
      length: 1,
      convRule: rule22
  }, {
      start: 579,
      length: 1,
      convRule: rule58
  }, {
      start: 580,
      length: 1,
      convRule: rule59
  }, {
      start: 581,
      length: 1,
      convRule: rule60
  }, {
      start: 582,
      length: 1,
      convRule: rule21
  }, {
      start: 583,
      length: 1,
      convRule: rule22
  }, {
      start: 584,
      length: 1,
      convRule: rule21
  }, {
      start: 585,
      length: 1,
      convRule: rule22
  }, {
      start: 586,
      length: 1,
      convRule: rule21
  }, {
      start: 587,
      length: 1,
      convRule: rule22
  }, {
      start: 588,
      length: 1,
      convRule: rule21
  }, {
      start: 589,
      length: 1,
      convRule: rule22
  }, {
      start: 590,
      length: 1,
      convRule: rule21
  }, {
      start: 591,
      length: 1,
      convRule: rule22
  }, {
      start: 592,
      length: 1,
      convRule: rule61
  }, {
      start: 593,
      length: 1,
      convRule: rule62
  }, {
      start: 594,
      length: 1,
      convRule: rule63
  }, {
      start: 595,
      length: 1,
      convRule: rule64
  }, {
      start: 596,
      length: 1,
      convRule: rule65
  }, {
      start: 598,
      length: 2,
      convRule: rule66
  }, {
      start: 601,
      length: 1,
      convRule: rule67
  }, {
      start: 603,
      length: 1,
      convRule: rule68
  }, {
      start: 608,
      length: 1,
      convRule: rule66
  }, {
      start: 611,
      length: 1,
      convRule: rule69
  }, {
      start: 613,
      length: 1,
      convRule: rule70
  }, {
      start: 616,
      length: 1,
      convRule: rule71
  }, {
      start: 617,
      length: 1,
      convRule: rule72
  }, {
      start: 619,
      length: 1,
      convRule: rule73
  }, {
      start: 623,
      length: 1,
      convRule: rule72
  }, {
      start: 625,
      length: 1,
      convRule: rule74
  }, {
      start: 626,
      length: 1,
      convRule: rule75
  }, {
      start: 629,
      length: 1,
      convRule: rule76
  }, {
      start: 637,
      length: 1,
      convRule: rule77
  }, {
      start: 640,
      length: 1,
      convRule: rule78
  }, {
      start: 643,
      length: 1,
      convRule: rule78
  }, {
      start: 648,
      length: 1,
      convRule: rule78
  }, {
      start: 649,
      length: 1,
      convRule: rule79
  }, {
      start: 650,
      length: 2,
      convRule: rule80
  }, {
      start: 652,
      length: 1,
      convRule: rule81
  }, {
      start: 658,
      length: 1,
      convRule: rule82
  }, {
      start: 837,
      length: 1,
      convRule: rule85
  }, {
      start: 880,
      length: 1,
      convRule: rule21
  }, {
      start: 881,
      length: 1,
      convRule: rule22
  }, {
      start: 882,
      length: 1,
      convRule: rule21
  }, {
      start: 883,
      length: 1,
      convRule: rule22
  }, {
      start: 886,
      length: 1,
      convRule: rule21
  }, {
      start: 887,
      length: 1,
      convRule: rule22
  }, {
      start: 891,
      length: 3,
      convRule: rule40
  }, {
      start: 902,
      length: 1,
      convRule: rule86
  }, {
      start: 904,
      length: 3,
      convRule: rule87
  }, {
      start: 908,
      length: 1,
      convRule: rule88
  }, {
      start: 910,
      length: 2,
      convRule: rule89
  }, {
      start: 913,
      length: 17,
      convRule: rule9
  }, {
      start: 931,
      length: 9,
      convRule: rule9
  }, {
      start: 940,
      length: 1,
      convRule: rule90
  }, {
      start: 941,
      length: 3,
      convRule: rule91
  }, {
      start: 945,
      length: 17,
      convRule: rule12
  }, {
      start: 962,
      length: 1,
      convRule: rule92
  }, {
      start: 963,
      length: 9,
      convRule: rule12
  }, {
      start: 972,
      length: 1,
      convRule: rule93
  }, {
      start: 973,
      length: 2,
      convRule: rule94
  }, {
      start: 975,
      length: 1,
      convRule: rule95
  }, {
      start: 976,
      length: 1,
      convRule: rule96
  }, {
      start: 977,
      length: 1,
      convRule: rule97
  }, {
      start: 981,
      length: 1,
      convRule: rule99
  }, {
      start: 982,
      length: 1,
      convRule: rule100
  }, {
      start: 983,
      length: 1,
      convRule: rule101
  }, {
      start: 984,
      length: 1,
      convRule: rule21
  }, {
      start: 985,
      length: 1,
      convRule: rule22
  }, {
      start: 986,
      length: 1,
      convRule: rule21
  }, {
      start: 987,
      length: 1,
      convRule: rule22
  }, {
      start: 988,
      length: 1,
      convRule: rule21
  }, {
      start: 989,
      length: 1,
      convRule: rule22
  }, {
      start: 990,
      length: 1,
      convRule: rule21
  }, {
      start: 991,
      length: 1,
      convRule: rule22
  }, {
      start: 992,
      length: 1,
      convRule: rule21
  }, {
      start: 993,
      length: 1,
      convRule: rule22
  }, {
      start: 994,
      length: 1,
      convRule: rule21
  }, {
      start: 995,
      length: 1,
      convRule: rule22
  }, {
      start: 996,
      length: 1,
      convRule: rule21
  }, {
      start: 997,
      length: 1,
      convRule: rule22
  }, {
      start: 998,
      length: 1,
      convRule: rule21
  }, {
      start: 999,
      length: 1,
      convRule: rule22
  }, {
      start: 1000,
      length: 1,
      convRule: rule21
  }, {
      start: 1001,
      length: 1,
      convRule: rule22
  }, {
      start: 1002,
      length: 1,
      convRule: rule21
  }, {
      start: 1003,
      length: 1,
      convRule: rule22
  }, {
      start: 1004,
      length: 1,
      convRule: rule21
  }, {
      start: 1005,
      length: 1,
      convRule: rule22
  }, {
      start: 1006,
      length: 1,
      convRule: rule21
  }, {
      start: 1007,
      length: 1,
      convRule: rule22
  }, {
      start: 1008,
      length: 1,
      convRule: rule102
  }, {
      start: 1009,
      length: 1,
      convRule: rule103
  }, {
      start: 1010,
      length: 1,
      convRule: rule104
  }, {
      start: 1012,
      length: 1,
      convRule: rule105
  }, {
      start: 1013,
      length: 1,
      convRule: rule106
  }, {
      start: 1015,
      length: 1,
      convRule: rule21
  }, {
      start: 1016,
      length: 1,
      convRule: rule22
  }, {
      start: 1017,
      length: 1,
      convRule: rule107
  }, {
      start: 1018,
      length: 1,
      convRule: rule21
  }, {
      start: 1019,
      length: 1,
      convRule: rule22
  }, {
      start: 1021,
      length: 3,
      convRule: rule53
  }, {
      start: 1024,
      length: 16,
      convRule: rule108
  }, {
      start: 1040,
      length: 32,
      convRule: rule9
  }, {
      start: 1072,
      length: 32,
      convRule: rule12
  }, {
      start: 1104,
      length: 16,
      convRule: rule103
  }, {
      start: 1120,
      length: 1,
      convRule: rule21
  }, {
      start: 1121,
      length: 1,
      convRule: rule22
  }, {
      start: 1122,
      length: 1,
      convRule: rule21
  }, {
      start: 1123,
      length: 1,
      convRule: rule22
  }, {
      start: 1124,
      length: 1,
      convRule: rule21
  }, {
      start: 1125,
      length: 1,
      convRule: rule22
  }, {
      start: 1126,
      length: 1,
      convRule: rule21
  }, {
      start: 1127,
      length: 1,
      convRule: rule22
  }, {
      start: 1128,
      length: 1,
      convRule: rule21
  }, {
      start: 1129,
      length: 1,
      convRule: rule22
  }, {
      start: 1130,
      length: 1,
      convRule: rule21
  }, {
      start: 1131,
      length: 1,
      convRule: rule22
  }, {
      start: 1132,
      length: 1,
      convRule: rule21
  }, {
      start: 1133,
      length: 1,
      convRule: rule22
  }, {
      start: 1134,
      length: 1,
      convRule: rule21
  }, {
      start: 1135,
      length: 1,
      convRule: rule22
  }, {
      start: 1136,
      length: 1,
      convRule: rule21
  }, {
      start: 1137,
      length: 1,
      convRule: rule22
  }, {
      start: 1138,
      length: 1,
      convRule: rule21
  }, {
      start: 1139,
      length: 1,
      convRule: rule22
  }, {
      start: 1140,
      length: 1,
      convRule: rule21
  }, {
      start: 1141,
      length: 1,
      convRule: rule22
  }, {
      start: 1142,
      length: 1,
      convRule: rule21
  }, {
      start: 1143,
      length: 1,
      convRule: rule22
  }, {
      start: 1144,
      length: 1,
      convRule: rule21
  }, {
      start: 1145,
      length: 1,
      convRule: rule22
  }, {
      start: 1146,
      length: 1,
      convRule: rule21
  }, {
      start: 1147,
      length: 1,
      convRule: rule22
  }, {
      start: 1148,
      length: 1,
      convRule: rule21
  }, {
      start: 1149,
      length: 1,
      convRule: rule22
  }, {
      start: 1150,
      length: 1,
      convRule: rule21
  }, {
      start: 1151,
      length: 1,
      convRule: rule22
  }, {
      start: 1152,
      length: 1,
      convRule: rule21
  }, {
      start: 1153,
      length: 1,
      convRule: rule22
  }, {
      start: 1162,
      length: 1,
      convRule: rule21
  }, {
      start: 1163,
      length: 1,
      convRule: rule22
  }, {
      start: 1164,
      length: 1,
      convRule: rule21
  }, {
      start: 1165,
      length: 1,
      convRule: rule22
  }, {
      start: 1166,
      length: 1,
      convRule: rule21
  }, {
      start: 1167,
      length: 1,
      convRule: rule22
  }, {
      start: 1168,
      length: 1,
      convRule: rule21
  }, {
      start: 1169,
      length: 1,
      convRule: rule22
  }, {
      start: 1170,
      length: 1,
      convRule: rule21
  }, {
      start: 1171,
      length: 1,
      convRule: rule22
  }, {
      start: 1172,
      length: 1,
      convRule: rule21
  }, {
      start: 1173,
      length: 1,
      convRule: rule22
  }, {
      start: 1174,
      length: 1,
      convRule: rule21
  }, {
      start: 1175,
      length: 1,
      convRule: rule22
  }, {
      start: 1176,
      length: 1,
      convRule: rule21
  }, {
      start: 1177,
      length: 1,
      convRule: rule22
  }, {
      start: 1178,
      length: 1,
      convRule: rule21
  }, {
      start: 1179,
      length: 1,
      convRule: rule22
  }, {
      start: 1180,
      length: 1,
      convRule: rule21
  }, {
      start: 1181,
      length: 1,
      convRule: rule22
  }, {
      start: 1182,
      length: 1,
      convRule: rule21
  }, {
      start: 1183,
      length: 1,
      convRule: rule22
  }, {
      start: 1184,
      length: 1,
      convRule: rule21
  }, {
      start: 1185,
      length: 1,
      convRule: rule22
  }, {
      start: 1186,
      length: 1,
      convRule: rule21
  }, {
      start: 1187,
      length: 1,
      convRule: rule22
  }, {
      start: 1188,
      length: 1,
      convRule: rule21
  }, {
      start: 1189,
      length: 1,
      convRule: rule22
  }, {
      start: 1190,
      length: 1,
      convRule: rule21
  }, {
      start: 1191,
      length: 1,
      convRule: rule22
  }, {
      start: 1192,
      length: 1,
      convRule: rule21
  }, {
      start: 1193,
      length: 1,
      convRule: rule22
  }, {
      start: 1194,
      length: 1,
      convRule: rule21
  }, {
      start: 1195,
      length: 1,
      convRule: rule22
  }, {
      start: 1196,
      length: 1,
      convRule: rule21
  }, {
      start: 1197,
      length: 1,
      convRule: rule22
  }, {
      start: 1198,
      length: 1,
      convRule: rule21
  }, {
      start: 1199,
      length: 1,
      convRule: rule22
  }, {
      start: 1200,
      length: 1,
      convRule: rule21
  }, {
      start: 1201,
      length: 1,
      convRule: rule22
  }, {
      start: 1202,
      length: 1,
      convRule: rule21
  }, {
      start: 1203,
      length: 1,
      convRule: rule22
  }, {
      start: 1204,
      length: 1,
      convRule: rule21
  }, {
      start: 1205,
      length: 1,
      convRule: rule22
  }, {
      start: 1206,
      length: 1,
      convRule: rule21
  }, {
      start: 1207,
      length: 1,
      convRule: rule22
  }, {
      start: 1208,
      length: 1,
      convRule: rule21
  }, {
      start: 1209,
      length: 1,
      convRule: rule22
  }, {
      start: 1210,
      length: 1,
      convRule: rule21
  }, {
      start: 1211,
      length: 1,
      convRule: rule22
  }, {
      start: 1212,
      length: 1,
      convRule: rule21
  }, {
      start: 1213,
      length: 1,
      convRule: rule22
  }, {
      start: 1214,
      length: 1,
      convRule: rule21
  }, {
      start: 1215,
      length: 1,
      convRule: rule22
  }, {
      start: 1216,
      length: 1,
      convRule: rule110
  }, {
      start: 1217,
      length: 1,
      convRule: rule21
  }, {
      start: 1218,
      length: 1,
      convRule: rule22
  }, {
      start: 1219,
      length: 1,
      convRule: rule21
  }, {
      start: 1220,
      length: 1,
      convRule: rule22
  }, {
      start: 1221,
      length: 1,
      convRule: rule21
  }, {
      start: 1222,
      length: 1,
      convRule: rule22
  }, {
      start: 1223,
      length: 1,
      convRule: rule21
  }, {
      start: 1224,
      length: 1,
      convRule: rule22
  }, {
      start: 1225,
      length: 1,
      convRule: rule21
  }, {
      start: 1226,
      length: 1,
      convRule: rule22
  }, {
      start: 1227,
      length: 1,
      convRule: rule21
  }, {
      start: 1228,
      length: 1,
      convRule: rule22
  }, {
      start: 1229,
      length: 1,
      convRule: rule21
  }, {
      start: 1230,
      length: 1,
      convRule: rule22
  }, {
      start: 1231,
      length: 1,
      convRule: rule111
  }, {
      start: 1232,
      length: 1,
      convRule: rule21
  }, {
      start: 1233,
      length: 1,
      convRule: rule22
  }, {
      start: 1234,
      length: 1,
      convRule: rule21
  }, {
      start: 1235,
      length: 1,
      convRule: rule22
  }, {
      start: 1236,
      length: 1,
      convRule: rule21
  }, {
      start: 1237,
      length: 1,
      convRule: rule22
  }, {
      start: 1238,
      length: 1,
      convRule: rule21
  }, {
      start: 1239,
      length: 1,
      convRule: rule22
  }, {
      start: 1240,
      length: 1,
      convRule: rule21
  }, {
      start: 1241,
      length: 1,
      convRule: rule22
  }, {
      start: 1242,
      length: 1,
      convRule: rule21
  }, {
      start: 1243,
      length: 1,
      convRule: rule22
  }, {
      start: 1244,
      length: 1,
      convRule: rule21
  }, {
      start: 1245,
      length: 1,
      convRule: rule22
  }, {
      start: 1246,
      length: 1,
      convRule: rule21
  }, {
      start: 1247,
      length: 1,
      convRule: rule22
  }, {
      start: 1248,
      length: 1,
      convRule: rule21
  }, {
      start: 1249,
      length: 1,
      convRule: rule22
  }, {
      start: 1250,
      length: 1,
      convRule: rule21
  }, {
      start: 1251,
      length: 1,
      convRule: rule22
  }, {
      start: 1252,
      length: 1,
      convRule: rule21
  }, {
      start: 1253,
      length: 1,
      convRule: rule22
  }, {
      start: 1254,
      length: 1,
      convRule: rule21
  }, {
      start: 1255,
      length: 1,
      convRule: rule22
  }, {
      start: 1256,
      length: 1,
      convRule: rule21
  }, {
      start: 1257,
      length: 1,
      convRule: rule22
  }, {
      start: 1258,
      length: 1,
      convRule: rule21
  }, {
      start: 1259,
      length: 1,
      convRule: rule22
  }, {
      start: 1260,
      length: 1,
      convRule: rule21
  }, {
      start: 1261,
      length: 1,
      convRule: rule22
  }, {
      start: 1262,
      length: 1,
      convRule: rule21
  }, {
      start: 1263,
      length: 1,
      convRule: rule22
  }, {
      start: 1264,
      length: 1,
      convRule: rule21
  }, {
      start: 1265,
      length: 1,
      convRule: rule22
  }, {
      start: 1266,
      length: 1,
      convRule: rule21
  }, {
      start: 1267,
      length: 1,
      convRule: rule22
  }, {
      start: 1268,
      length: 1,
      convRule: rule21
  }, {
      start: 1269,
      length: 1,
      convRule: rule22
  }, {
      start: 1270,
      length: 1,
      convRule: rule21
  }, {
      start: 1271,
      length: 1,
      convRule: rule22
  }, {
      start: 1272,
      length: 1,
      convRule: rule21
  }, {
      start: 1273,
      length: 1,
      convRule: rule22
  }, {
      start: 1274,
      length: 1,
      convRule: rule21
  }, {
      start: 1275,
      length: 1,
      convRule: rule22
  }, {
      start: 1276,
      length: 1,
      convRule: rule21
  }, {
      start: 1277,
      length: 1,
      convRule: rule22
  }, {
      start: 1278,
      length: 1,
      convRule: rule21
  }, {
      start: 1279,
      length: 1,
      convRule: rule22
  }, {
      start: 1280,
      length: 1,
      convRule: rule21
  }, {
      start: 1281,
      length: 1,
      convRule: rule22
  }, {
      start: 1282,
      length: 1,
      convRule: rule21
  }, {
      start: 1283,
      length: 1,
      convRule: rule22
  }, {
      start: 1284,
      length: 1,
      convRule: rule21
  }, {
      start: 1285,
      length: 1,
      convRule: rule22
  }, {
      start: 1286,
      length: 1,
      convRule: rule21
  }, {
      start: 1287,
      length: 1,
      convRule: rule22
  }, {
      start: 1288,
      length: 1,
      convRule: rule21
  }, {
      start: 1289,
      length: 1,
      convRule: rule22
  }, {
      start: 1290,
      length: 1,
      convRule: rule21
  }, {
      start: 1291,
      length: 1,
      convRule: rule22
  }, {
      start: 1292,
      length: 1,
      convRule: rule21
  }, {
      start: 1293,
      length: 1,
      convRule: rule22
  }, {
      start: 1294,
      length: 1,
      convRule: rule21
  }, {
      start: 1295,
      length: 1,
      convRule: rule22
  }, {
      start: 1296,
      length: 1,
      convRule: rule21
  }, {
      start: 1297,
      length: 1,
      convRule: rule22
  }, {
      start: 1298,
      length: 1,
      convRule: rule21
  }, {
      start: 1299,
      length: 1,
      convRule: rule22
  }, {
      start: 1300,
      length: 1,
      convRule: rule21
  }, {
      start: 1301,
      length: 1,
      convRule: rule22
  }, {
      start: 1302,
      length: 1,
      convRule: rule21
  }, {
      start: 1303,
      length: 1,
      convRule: rule22
  }, {
      start: 1304,
      length: 1,
      convRule: rule21
  }, {
      start: 1305,
      length: 1,
      convRule: rule22
  }, {
      start: 1306,
      length: 1,
      convRule: rule21
  }, {
      start: 1307,
      length: 1,
      convRule: rule22
  }, {
      start: 1308,
      length: 1,
      convRule: rule21
  }, {
      start: 1309,
      length: 1,
      convRule: rule22
  }, {
      start: 1310,
      length: 1,
      convRule: rule21
  }, {
      start: 1311,
      length: 1,
      convRule: rule22
  }, {
      start: 1312,
      length: 1,
      convRule: rule21
  }, {
      start: 1313,
      length: 1,
      convRule: rule22
  }, {
      start: 1314,
      length: 1,
      convRule: rule21
  }, {
      start: 1315,
      length: 1,
      convRule: rule22
  }, {
      start: 1316,
      length: 1,
      convRule: rule21
  }, {
      start: 1317,
      length: 1,
      convRule: rule22
  }, {
      start: 1318,
      length: 1,
      convRule: rule21
  }, {
      start: 1319,
      length: 1,
      convRule: rule22
  }, {
      start: 1329,
      length: 38,
      convRule: rule112
  }, {
      start: 1377,
      length: 38,
      convRule: rule113
  }, {
      start: 4256,
      length: 38,
      convRule: rule115
  }, {
      start: 7545,
      length: 1,
      convRule: rule117
  }, {
      start: 7549,
      length: 1,
      convRule: rule118
  }, {
      start: 7680,
      length: 1,
      convRule: rule21
  }, {
      start: 7681,
      length: 1,
      convRule: rule22
  }, {
      start: 7682,
      length: 1,
      convRule: rule21
  }, {
      start: 7683,
      length: 1,
      convRule: rule22
  }, {
      start: 7684,
      length: 1,
      convRule: rule21
  }, {
      start: 7685,
      length: 1,
      convRule: rule22
  }, {
      start: 7686,
      length: 1,
      convRule: rule21
  }, {
      start: 7687,
      length: 1,
      convRule: rule22
  }, {
      start: 7688,
      length: 1,
      convRule: rule21
  }, {
      start: 7689,
      length: 1,
      convRule: rule22
  }, {
      start: 7690,
      length: 1,
      convRule: rule21
  }, {
      start: 7691,
      length: 1,
      convRule: rule22
  }, {
      start: 7692,
      length: 1,
      convRule: rule21
  }, {
      start: 7693,
      length: 1,
      convRule: rule22
  }, {
      start: 7694,
      length: 1,
      convRule: rule21
  }, {
      start: 7695,
      length: 1,
      convRule: rule22
  }, {
      start: 7696,
      length: 1,
      convRule: rule21
  }, {
      start: 7697,
      length: 1,
      convRule: rule22
  }, {
      start: 7698,
      length: 1,
      convRule: rule21
  }, {
      start: 7699,
      length: 1,
      convRule: rule22
  }, {
      start: 7700,
      length: 1,
      convRule: rule21
  }, {
      start: 7701,
      length: 1,
      convRule: rule22
  }, {
      start: 7702,
      length: 1,
      convRule: rule21
  }, {
      start: 7703,
      length: 1,
      convRule: rule22
  }, {
      start: 7704,
      length: 1,
      convRule: rule21
  }, {
      start: 7705,
      length: 1,
      convRule: rule22
  }, {
      start: 7706,
      length: 1,
      convRule: rule21
  }, {
      start: 7707,
      length: 1,
      convRule: rule22
  }, {
      start: 7708,
      length: 1,
      convRule: rule21
  }, {
      start: 7709,
      length: 1,
      convRule: rule22
  }, {
      start: 7710,
      length: 1,
      convRule: rule21
  }, {
      start: 7711,
      length: 1,
      convRule: rule22
  }, {
      start: 7712,
      length: 1,
      convRule: rule21
  }, {
      start: 7713,
      length: 1,
      convRule: rule22
  }, {
      start: 7714,
      length: 1,
      convRule: rule21
  }, {
      start: 7715,
      length: 1,
      convRule: rule22
  }, {
      start: 7716,
      length: 1,
      convRule: rule21
  }, {
      start: 7717,
      length: 1,
      convRule: rule22
  }, {
      start: 7718,
      length: 1,
      convRule: rule21
  }, {
      start: 7719,
      length: 1,
      convRule: rule22
  }, {
      start: 7720,
      length: 1,
      convRule: rule21
  }, {
      start: 7721,
      length: 1,
      convRule: rule22
  }, {
      start: 7722,
      length: 1,
      convRule: rule21
  }, {
      start: 7723,
      length: 1,
      convRule: rule22
  }, {
      start: 7724,
      length: 1,
      convRule: rule21
  }, {
      start: 7725,
      length: 1,
      convRule: rule22
  }, {
      start: 7726,
      length: 1,
      convRule: rule21
  }, {
      start: 7727,
      length: 1,
      convRule: rule22
  }, {
      start: 7728,
      length: 1,
      convRule: rule21
  }, {
      start: 7729,
      length: 1,
      convRule: rule22
  }, {
      start: 7730,
      length: 1,
      convRule: rule21
  }, {
      start: 7731,
      length: 1,
      convRule: rule22
  }, {
      start: 7732,
      length: 1,
      convRule: rule21
  }, {
      start: 7733,
      length: 1,
      convRule: rule22
  }, {
      start: 7734,
      length: 1,
      convRule: rule21
  }, {
      start: 7735,
      length: 1,
      convRule: rule22
  }, {
      start: 7736,
      length: 1,
      convRule: rule21
  }, {
      start: 7737,
      length: 1,
      convRule: rule22
  }, {
      start: 7738,
      length: 1,
      convRule: rule21
  }, {
      start: 7739,
      length: 1,
      convRule: rule22
  }, {
      start: 7740,
      length: 1,
      convRule: rule21
  }, {
      start: 7741,
      length: 1,
      convRule: rule22
  }, {
      start: 7742,
      length: 1,
      convRule: rule21
  }, {
      start: 7743,
      length: 1,
      convRule: rule22
  }, {
      start: 7744,
      length: 1,
      convRule: rule21
  }, {
      start: 7745,
      length: 1,
      convRule: rule22
  }, {
      start: 7746,
      length: 1,
      convRule: rule21
  }, {
      start: 7747,
      length: 1,
      convRule: rule22
  }, {
      start: 7748,
      length: 1,
      convRule: rule21
  }, {
      start: 7749,
      length: 1,
      convRule: rule22
  }, {
      start: 7750,
      length: 1,
      convRule: rule21
  }, {
      start: 7751,
      length: 1,
      convRule: rule22
  }, {
      start: 7752,
      length: 1,
      convRule: rule21
  }, {
      start: 7753,
      length: 1,
      convRule: rule22
  }, {
      start: 7754,
      length: 1,
      convRule: rule21
  }, {
      start: 7755,
      length: 1,
      convRule: rule22
  }, {
      start: 7756,
      length: 1,
      convRule: rule21
  }, {
      start: 7757,
      length: 1,
      convRule: rule22
  }, {
      start: 7758,
      length: 1,
      convRule: rule21
  }, {
      start: 7759,
      length: 1,
      convRule: rule22
  }, {
      start: 7760,
      length: 1,
      convRule: rule21
  }, {
      start: 7761,
      length: 1,
      convRule: rule22
  }, {
      start: 7762,
      length: 1,
      convRule: rule21
  }, {
      start: 7763,
      length: 1,
      convRule: rule22
  }, {
      start: 7764,
      length: 1,
      convRule: rule21
  }, {
      start: 7765,
      length: 1,
      convRule: rule22
  }, {
      start: 7766,
      length: 1,
      convRule: rule21
  }, {
      start: 7767,
      length: 1,
      convRule: rule22
  }, {
      start: 7768,
      length: 1,
      convRule: rule21
  }, {
      start: 7769,
      length: 1,
      convRule: rule22
  }, {
      start: 7770,
      length: 1,
      convRule: rule21
  }, {
      start: 7771,
      length: 1,
      convRule: rule22
  }, {
      start: 7772,
      length: 1,
      convRule: rule21
  }, {
      start: 7773,
      length: 1,
      convRule: rule22
  }, {
      start: 7774,
      length: 1,
      convRule: rule21
  }, {
      start: 7775,
      length: 1,
      convRule: rule22
  }, {
      start: 7776,
      length: 1,
      convRule: rule21
  }, {
      start: 7777,
      length: 1,
      convRule: rule22
  }, {
      start: 7778,
      length: 1,
      convRule: rule21
  }, {
      start: 7779,
      length: 1,
      convRule: rule22
  }, {
      start: 7780,
      length: 1,
      convRule: rule21
  }, {
      start: 7781,
      length: 1,
      convRule: rule22
  }, {
      start: 7782,
      length: 1,
      convRule: rule21
  }, {
      start: 7783,
      length: 1,
      convRule: rule22
  }, {
      start: 7784,
      length: 1,
      convRule: rule21
  }, {
      start: 7785,
      length: 1,
      convRule: rule22
  }, {
      start: 7786,
      length: 1,
      convRule: rule21
  }, {
      start: 7787,
      length: 1,
      convRule: rule22
  }, {
      start: 7788,
      length: 1,
      convRule: rule21
  }, {
      start: 7789,
      length: 1,
      convRule: rule22
  }, {
      start: 7790,
      length: 1,
      convRule: rule21
  }, {
      start: 7791,
      length: 1,
      convRule: rule22
  }, {
      start: 7792,
      length: 1,
      convRule: rule21
  }, {
      start: 7793,
      length: 1,
      convRule: rule22
  }, {
      start: 7794,
      length: 1,
      convRule: rule21
  }, {
      start: 7795,
      length: 1,
      convRule: rule22
  }, {
      start: 7796,
      length: 1,
      convRule: rule21
  }, {
      start: 7797,
      length: 1,
      convRule: rule22
  }, {
      start: 7798,
      length: 1,
      convRule: rule21
  }, {
      start: 7799,
      length: 1,
      convRule: rule22
  }, {
      start: 7800,
      length: 1,
      convRule: rule21
  }, {
      start: 7801,
      length: 1,
      convRule: rule22
  }, {
      start: 7802,
      length: 1,
      convRule: rule21
  }, {
      start: 7803,
      length: 1,
      convRule: rule22
  }, {
      start: 7804,
      length: 1,
      convRule: rule21
  }, {
      start: 7805,
      length: 1,
      convRule: rule22
  }, {
      start: 7806,
      length: 1,
      convRule: rule21
  }, {
      start: 7807,
      length: 1,
      convRule: rule22
  }, {
      start: 7808,
      length: 1,
      convRule: rule21
  }, {
      start: 7809,
      length: 1,
      convRule: rule22
  }, {
      start: 7810,
      length: 1,
      convRule: rule21
  }, {
      start: 7811,
      length: 1,
      convRule: rule22
  }, {
      start: 7812,
      length: 1,
      convRule: rule21
  }, {
      start: 7813,
      length: 1,
      convRule: rule22
  }, {
      start: 7814,
      length: 1,
      convRule: rule21
  }, {
      start: 7815,
      length: 1,
      convRule: rule22
  }, {
      start: 7816,
      length: 1,
      convRule: rule21
  }, {
      start: 7817,
      length: 1,
      convRule: rule22
  }, {
      start: 7818,
      length: 1,
      convRule: rule21
  }, {
      start: 7819,
      length: 1,
      convRule: rule22
  }, {
      start: 7820,
      length: 1,
      convRule: rule21
  }, {
      start: 7821,
      length: 1,
      convRule: rule22
  }, {
      start: 7822,
      length: 1,
      convRule: rule21
  }, {
      start: 7823,
      length: 1,
      convRule: rule22
  }, {
      start: 7824,
      length: 1,
      convRule: rule21
  }, {
      start: 7825,
      length: 1,
      convRule: rule22
  }, {
      start: 7826,
      length: 1,
      convRule: rule21
  }, {
      start: 7827,
      length: 1,
      convRule: rule22
  }, {
      start: 7828,
      length: 1,
      convRule: rule21
  }, {
      start: 7829,
      length: 1,
      convRule: rule22
  }, {
      start: 7835,
      length: 1,
      convRule: rule119
  }, {
      start: 7838,
      length: 1,
      convRule: rule120
  }, {
      start: 7840,
      length: 1,
      convRule: rule21
  }, {
      start: 7841,
      length: 1,
      convRule: rule22
  }, {
      start: 7842,
      length: 1,
      convRule: rule21
  }, {
      start: 7843,
      length: 1,
      convRule: rule22
  }, {
      start: 7844,
      length: 1,
      convRule: rule21
  }, {
      start: 7845,
      length: 1,
      convRule: rule22
  }, {
      start: 7846,
      length: 1,
      convRule: rule21
  }, {
      start: 7847,
      length: 1,
      convRule: rule22
  }, {
      start: 7848,
      length: 1,
      convRule: rule21
  }, {
      start: 7849,
      length: 1,
      convRule: rule22
  }, {
      start: 7850,
      length: 1,
      convRule: rule21
  }, {
      start: 7851,
      length: 1,
      convRule: rule22
  }, {
      start: 7852,
      length: 1,
      convRule: rule21
  }, {
      start: 7853,
      length: 1,
      convRule: rule22
  }, {
      start: 7854,
      length: 1,
      convRule: rule21
  }, {
      start: 7855,
      length: 1,
      convRule: rule22
  }, {
      start: 7856,
      length: 1,
      convRule: rule21
  }, {
      start: 7857,
      length: 1,
      convRule: rule22
  }, {
      start: 7858,
      length: 1,
      convRule: rule21
  }, {
      start: 7859,
      length: 1,
      convRule: rule22
  }, {
      start: 7860,
      length: 1,
      convRule: rule21
  }, {
      start: 7861,
      length: 1,
      convRule: rule22
  }, {
      start: 7862,
      length: 1,
      convRule: rule21
  }, {
      start: 7863,
      length: 1,
      convRule: rule22
  }, {
      start: 7864,
      length: 1,
      convRule: rule21
  }, {
      start: 7865,
      length: 1,
      convRule: rule22
  }, {
      start: 7866,
      length: 1,
      convRule: rule21
  }, {
      start: 7867,
      length: 1,
      convRule: rule22
  }, {
      start: 7868,
      length: 1,
      convRule: rule21
  }, {
      start: 7869,
      length: 1,
      convRule: rule22
  }, {
      start: 7870,
      length: 1,
      convRule: rule21
  }, {
      start: 7871,
      length: 1,
      convRule: rule22
  }, {
      start: 7872,
      length: 1,
      convRule: rule21
  }, {
      start: 7873,
      length: 1,
      convRule: rule22
  }, {
      start: 7874,
      length: 1,
      convRule: rule21
  }, {
      start: 7875,
      length: 1,
      convRule: rule22
  }, {
      start: 7876,
      length: 1,
      convRule: rule21
  }, {
      start: 7877,
      length: 1,
      convRule: rule22
  }, {
      start: 7878,
      length: 1,
      convRule: rule21
  }, {
      start: 7879,
      length: 1,
      convRule: rule22
  }, {
      start: 7880,
      length: 1,
      convRule: rule21
  }, {
      start: 7881,
      length: 1,
      convRule: rule22
  }, {
      start: 7882,
      length: 1,
      convRule: rule21
  }, {
      start: 7883,
      length: 1,
      convRule: rule22
  }, {
      start: 7884,
      length: 1,
      convRule: rule21
  }, {
      start: 7885,
      length: 1,
      convRule: rule22
  }, {
      start: 7886,
      length: 1,
      convRule: rule21
  }, {
      start: 7887,
      length: 1,
      convRule: rule22
  }, {
      start: 7888,
      length: 1,
      convRule: rule21
  }, {
      start: 7889,
      length: 1,
      convRule: rule22
  }, {
      start: 7890,
      length: 1,
      convRule: rule21
  }, {
      start: 7891,
      length: 1,
      convRule: rule22
  }, {
      start: 7892,
      length: 1,
      convRule: rule21
  }, {
      start: 7893,
      length: 1,
      convRule: rule22
  }, {
      start: 7894,
      length: 1,
      convRule: rule21
  }, {
      start: 7895,
      length: 1,
      convRule: rule22
  }, {
      start: 7896,
      length: 1,
      convRule: rule21
  }, {
      start: 7897,
      length: 1,
      convRule: rule22
  }, {
      start: 7898,
      length: 1,
      convRule: rule21
  }, {
      start: 7899,
      length: 1,
      convRule: rule22
  }, {
      start: 7900,
      length: 1,
      convRule: rule21
  }, {
      start: 7901,
      length: 1,
      convRule: rule22
  }, {
      start: 7902,
      length: 1,
      convRule: rule21
  }, {
      start: 7903,
      length: 1,
      convRule: rule22
  }, {
      start: 7904,
      length: 1,
      convRule: rule21
  }, {
      start: 7905,
      length: 1,
      convRule: rule22
  }, {
      start: 7906,
      length: 1,
      convRule: rule21
  }, {
      start: 7907,
      length: 1,
      convRule: rule22
  }, {
      start: 7908,
      length: 1,
      convRule: rule21
  }, {
      start: 7909,
      length: 1,
      convRule: rule22
  }, {
      start: 7910,
      length: 1,
      convRule: rule21
  }, {
      start: 7911,
      length: 1,
      convRule: rule22
  }, {
      start: 7912,
      length: 1,
      convRule: rule21
  }, {
      start: 7913,
      length: 1,
      convRule: rule22
  }, {
      start: 7914,
      length: 1,
      convRule: rule21
  }, {
      start: 7915,
      length: 1,
      convRule: rule22
  }, {
      start: 7916,
      length: 1,
      convRule: rule21
  }, {
      start: 7917,
      length: 1,
      convRule: rule22
  }, {
      start: 7918,
      length: 1,
      convRule: rule21
  }, {
      start: 7919,
      length: 1,
      convRule: rule22
  }, {
      start: 7920,
      length: 1,
      convRule: rule21
  }, {
      start: 7921,
      length: 1,
      convRule: rule22
  }, {
      start: 7922,
      length: 1,
      convRule: rule21
  }, {
      start: 7923,
      length: 1,
      convRule: rule22
  }, {
      start: 7924,
      length: 1,
      convRule: rule21
  }, {
      start: 7925,
      length: 1,
      convRule: rule22
  }, {
      start: 7926,
      length: 1,
      convRule: rule21
  }, {
      start: 7927,
      length: 1,
      convRule: rule22
  }, {
      start: 7928,
      length: 1,
      convRule: rule21
  }, {
      start: 7929,
      length: 1,
      convRule: rule22
  }, {
      start: 7930,
      length: 1,
      convRule: rule21
  }, {
      start: 7931,
      length: 1,
      convRule: rule22
  }, {
      start: 7932,
      length: 1,
      convRule: rule21
  }, {
      start: 7933,
      length: 1,
      convRule: rule22
  }, {
      start: 7934,
      length: 1,
      convRule: rule21
  }, {
      start: 7935,
      length: 1,
      convRule: rule22
  }, {
      start: 7936,
      length: 8,
      convRule: rule121
  }, {
      start: 7944,
      length: 8,
      convRule: rule122
  }, {
      start: 7952,
      length: 6,
      convRule: rule121
  }, {
      start: 7960,
      length: 6,
      convRule: rule122
  }, {
      start: 7968,
      length: 8,
      convRule: rule121
  }, {
      start: 7976,
      length: 8,
      convRule: rule122
  }, {
      start: 7984,
      length: 8,
      convRule: rule121
  }, {
      start: 7992,
      length: 8,
      convRule: rule122
  }, {
      start: 8000,
      length: 6,
      convRule: rule121
  }, {
      start: 8008,
      length: 6,
      convRule: rule122
  }, {
      start: 8017,
      length: 1,
      convRule: rule121
  }, {
      start: 8019,
      length: 1,
      convRule: rule121
  }, {
      start: 8021,
      length: 1,
      convRule: rule121
  }, {
      start: 8023,
      length: 1,
      convRule: rule121
  }, {
      start: 8025,
      length: 1,
      convRule: rule122
  }, {
      start: 8027,
      length: 1,
      convRule: rule122
  }, {
      start: 8029,
      length: 1,
      convRule: rule122
  }, {
      start: 8031,
      length: 1,
      convRule: rule122
  }, {
      start: 8032,
      length: 8,
      convRule: rule121
  }, {
      start: 8040,
      length: 8,
      convRule: rule122
  }, {
      start: 8048,
      length: 2,
      convRule: rule123
  }, {
      start: 8050,
      length: 4,
      convRule: rule124
  }, {
      start: 8054,
      length: 2,
      convRule: rule125
  }, {
      start: 8056,
      length: 2,
      convRule: rule126
  }, {
      start: 8058,
      length: 2,
      convRule: rule127
  }, {
      start: 8060,
      length: 2,
      convRule: rule128
  }, {
      start: 8064,
      length: 8,
      convRule: rule121
  }, {
      start: 8072,
      length: 8,
      convRule: rule129
  }, {
      start: 8080,
      length: 8,
      convRule: rule121
  }, {
      start: 8088,
      length: 8,
      convRule: rule129
  }, {
      start: 8096,
      length: 8,
      convRule: rule121
  }, {
      start: 8104,
      length: 8,
      convRule: rule129
  }, {
      start: 8112,
      length: 2,
      convRule: rule121
  }, {
      start: 8115,
      length: 1,
      convRule: rule130
  }, {
      start: 8120,
      length: 2,
      convRule: rule122
  }, {
      start: 8122,
      length: 2,
      convRule: rule131
  }, {
      start: 8124,
      length: 1,
      convRule: rule132
  }, {
      start: 8126,
      length: 1,
      convRule: rule133
  }, {
      start: 8131,
      length: 1,
      convRule: rule130
  }, {
      start: 8136,
      length: 4,
      convRule: rule134
  }, {
      start: 8140,
      length: 1,
      convRule: rule132
  }, {
      start: 8144,
      length: 2,
      convRule: rule121
  }, {
      start: 8152,
      length: 2,
      convRule: rule122
  }, {
      start: 8154,
      length: 2,
      convRule: rule135
  }, {
      start: 8160,
      length: 2,
      convRule: rule121
  }, {
      start: 8165,
      length: 1,
      convRule: rule104
  }, {
      start: 8168,
      length: 2,
      convRule: rule122
  }, {
      start: 8170,
      length: 2,
      convRule: rule136
  }, {
      start: 8172,
      length: 1,
      convRule: rule107
  }, {
      start: 8179,
      length: 1,
      convRule: rule130
  }, {
      start: 8184,
      length: 2,
      convRule: rule137
  }, {
      start: 8186,
      length: 2,
      convRule: rule138
  }, {
      start: 8188,
      length: 1,
      convRule: rule132
  }, {
      start: 8486,
      length: 1,
      convRule: rule141
  }, {
      start: 8490,
      length: 1,
      convRule: rule142
  }, {
      start: 8491,
      length: 1,
      convRule: rule143
  }, {
      start: 8498,
      length: 1,
      convRule: rule144
  }, {
      start: 8526,
      length: 1,
      convRule: rule145
  }, {
      start: 8544,
      length: 16,
      convRule: rule146
  }, {
      start: 8560,
      length: 16,
      convRule: rule147
  }, {
      start: 8579,
      length: 1,
      convRule: rule21
  }, {
      start: 8580,
      length: 1,
      convRule: rule22
  }, {
      start: 9398,
      length: 26,
      convRule: rule148
  }, {
      start: 9424,
      length: 26,
      convRule: rule149
  }, {
      start: 11264,
      length: 47,
      convRule: rule112
  }, {
      start: 11312,
      length: 47,
      convRule: rule113
  }, {
      start: 11360,
      length: 1,
      convRule: rule21
  }, {
      start: 11361,
      length: 1,
      convRule: rule22
  }, {
      start: 11362,
      length: 1,
      convRule: rule150
  }, {
      start: 11363,
      length: 1,
      convRule: rule151
  }, {
      start: 11364,
      length: 1,
      convRule: rule152
  }, {
      start: 11365,
      length: 1,
      convRule: rule153
  }, {
      start: 11366,
      length: 1,
      convRule: rule154
  }, {
      start: 11367,
      length: 1,
      convRule: rule21
  }, {
      start: 11368,
      length: 1,
      convRule: rule22
  }, {
      start: 11369,
      length: 1,
      convRule: rule21
  }, {
      start: 11370,
      length: 1,
      convRule: rule22
  }, {
      start: 11371,
      length: 1,
      convRule: rule21
  }, {
      start: 11372,
      length: 1,
      convRule: rule22
  }, {
      start: 11373,
      length: 1,
      convRule: rule155
  }, {
      start: 11374,
      length: 1,
      convRule: rule156
  }, {
      start: 11375,
      length: 1,
      convRule: rule157
  }, {
      start: 11376,
      length: 1,
      convRule: rule158
  }, {
      start: 11378,
      length: 1,
      convRule: rule21
  }, {
      start: 11379,
      length: 1,
      convRule: rule22
  }, {
      start: 11381,
      length: 1,
      convRule: rule21
  }, {
      start: 11382,
      length: 1,
      convRule: rule22
  }, {
      start: 11390,
      length: 2,
      convRule: rule159
  }, {
      start: 11392,
      length: 1,
      convRule: rule21
  }, {
      start: 11393,
      length: 1,
      convRule: rule22
  }, {
      start: 11394,
      length: 1,
      convRule: rule21
  }, {
      start: 11395,
      length: 1,
      convRule: rule22
  }, {
      start: 11396,
      length: 1,
      convRule: rule21
  }, {
      start: 11397,
      length: 1,
      convRule: rule22
  }, {
      start: 11398,
      length: 1,
      convRule: rule21
  }, {
      start: 11399,
      length: 1,
      convRule: rule22
  }, {
      start: 11400,
      length: 1,
      convRule: rule21
  }, {
      start: 11401,
      length: 1,
      convRule: rule22
  }, {
      start: 11402,
      length: 1,
      convRule: rule21
  }, {
      start: 11403,
      length: 1,
      convRule: rule22
  }, {
      start: 11404,
      length: 1,
      convRule: rule21
  }, {
      start: 11405,
      length: 1,
      convRule: rule22
  }, {
      start: 11406,
      length: 1,
      convRule: rule21
  }, {
      start: 11407,
      length: 1,
      convRule: rule22
  }, {
      start: 11408,
      length: 1,
      convRule: rule21
  }, {
      start: 11409,
      length: 1,
      convRule: rule22
  }, {
      start: 11410,
      length: 1,
      convRule: rule21
  }, {
      start: 11411,
      length: 1,
      convRule: rule22
  }, {
      start: 11412,
      length: 1,
      convRule: rule21
  }, {
      start: 11413,
      length: 1,
      convRule: rule22
  }, {
      start: 11414,
      length: 1,
      convRule: rule21
  }, {
      start: 11415,
      length: 1,
      convRule: rule22
  }, {
      start: 11416,
      length: 1,
      convRule: rule21
  }, {
      start: 11417,
      length: 1,
      convRule: rule22
  }, {
      start: 11418,
      length: 1,
      convRule: rule21
  }, {
      start: 11419,
      length: 1,
      convRule: rule22
  }, {
      start: 11420,
      length: 1,
      convRule: rule21
  }, {
      start: 11421,
      length: 1,
      convRule: rule22
  }, {
      start: 11422,
      length: 1,
      convRule: rule21
  }, {
      start: 11423,
      length: 1,
      convRule: rule22
  }, {
      start: 11424,
      length: 1,
      convRule: rule21
  }, {
      start: 11425,
      length: 1,
      convRule: rule22
  }, {
      start: 11426,
      length: 1,
      convRule: rule21
  }, {
      start: 11427,
      length: 1,
      convRule: rule22
  }, {
      start: 11428,
      length: 1,
      convRule: rule21
  }, {
      start: 11429,
      length: 1,
      convRule: rule22
  }, {
      start: 11430,
      length: 1,
      convRule: rule21
  }, {
      start: 11431,
      length: 1,
      convRule: rule22
  }, {
      start: 11432,
      length: 1,
      convRule: rule21
  }, {
      start: 11433,
      length: 1,
      convRule: rule22
  }, {
      start: 11434,
      length: 1,
      convRule: rule21
  }, {
      start: 11435,
      length: 1,
      convRule: rule22
  }, {
      start: 11436,
      length: 1,
      convRule: rule21
  }, {
      start: 11437,
      length: 1,
      convRule: rule22
  }, {
      start: 11438,
      length: 1,
      convRule: rule21
  }, {
      start: 11439,
      length: 1,
      convRule: rule22
  }, {
      start: 11440,
      length: 1,
      convRule: rule21
  }, {
      start: 11441,
      length: 1,
      convRule: rule22
  }, {
      start: 11442,
      length: 1,
      convRule: rule21
  }, {
      start: 11443,
      length: 1,
      convRule: rule22
  }, {
      start: 11444,
      length: 1,
      convRule: rule21
  }, {
      start: 11445,
      length: 1,
      convRule: rule22
  }, {
      start: 11446,
      length: 1,
      convRule: rule21
  }, {
      start: 11447,
      length: 1,
      convRule: rule22
  }, {
      start: 11448,
      length: 1,
      convRule: rule21
  }, {
      start: 11449,
      length: 1,
      convRule: rule22
  }, {
      start: 11450,
      length: 1,
      convRule: rule21
  }, {
      start: 11451,
      length: 1,
      convRule: rule22
  }, {
      start: 11452,
      length: 1,
      convRule: rule21
  }, {
      start: 11453,
      length: 1,
      convRule: rule22
  }, {
      start: 11454,
      length: 1,
      convRule: rule21
  }, {
      start: 11455,
      length: 1,
      convRule: rule22
  }, {
      start: 11456,
      length: 1,
      convRule: rule21
  }, {
      start: 11457,
      length: 1,
      convRule: rule22
  }, {
      start: 11458,
      length: 1,
      convRule: rule21
  }, {
      start: 11459,
      length: 1,
      convRule: rule22
  }, {
      start: 11460,
      length: 1,
      convRule: rule21
  }, {
      start: 11461,
      length: 1,
      convRule: rule22
  }, {
      start: 11462,
      length: 1,
      convRule: rule21
  }, {
      start: 11463,
      length: 1,
      convRule: rule22
  }, {
      start: 11464,
      length: 1,
      convRule: rule21
  }, {
      start: 11465,
      length: 1,
      convRule: rule22
  }, {
      start: 11466,
      length: 1,
      convRule: rule21
  }, {
      start: 11467,
      length: 1,
      convRule: rule22
  }, {
      start: 11468,
      length: 1,
      convRule: rule21
  }, {
      start: 11469,
      length: 1,
      convRule: rule22
  }, {
      start: 11470,
      length: 1,
      convRule: rule21
  }, {
      start: 11471,
      length: 1,
      convRule: rule22
  }, {
      start: 11472,
      length: 1,
      convRule: rule21
  }, {
      start: 11473,
      length: 1,
      convRule: rule22
  }, {
      start: 11474,
      length: 1,
      convRule: rule21
  }, {
      start: 11475,
      length: 1,
      convRule: rule22
  }, {
      start: 11476,
      length: 1,
      convRule: rule21
  }, {
      start: 11477,
      length: 1,
      convRule: rule22
  }, {
      start: 11478,
      length: 1,
      convRule: rule21
  }, {
      start: 11479,
      length: 1,
      convRule: rule22
  }, {
      start: 11480,
      length: 1,
      convRule: rule21
  }, {
      start: 11481,
      length: 1,
      convRule: rule22
  }, {
      start: 11482,
      length: 1,
      convRule: rule21
  }, {
      start: 11483,
      length: 1,
      convRule: rule22
  }, {
      start: 11484,
      length: 1,
      convRule: rule21
  }, {
      start: 11485,
      length: 1,
      convRule: rule22
  }, {
      start: 11486,
      length: 1,
      convRule: rule21
  }, {
      start: 11487,
      length: 1,
      convRule: rule22
  }, {
      start: 11488,
      length: 1,
      convRule: rule21
  }, {
      start: 11489,
      length: 1,
      convRule: rule22
  }, {
      start: 11490,
      length: 1,
      convRule: rule21
  }, {
      start: 11491,
      length: 1,
      convRule: rule22
  }, {
      start: 11499,
      length: 1,
      convRule: rule21
  }, {
      start: 11500,
      length: 1,
      convRule: rule22
  }, {
      start: 11501,
      length: 1,
      convRule: rule21
  }, {
      start: 11502,
      length: 1,
      convRule: rule22
  }, {
      start: 11520,
      length: 38,
      convRule: rule160
  }, {
      start: 42560,
      length: 1,
      convRule: rule21
  }, {
      start: 42561,
      length: 1,
      convRule: rule22
  }, {
      start: 42562,
      length: 1,
      convRule: rule21
  }, {
      start: 42563,
      length: 1,
      convRule: rule22
  }, {
      start: 42564,
      length: 1,
      convRule: rule21
  }, {
      start: 42565,
      length: 1,
      convRule: rule22
  }, {
      start: 42566,
      length: 1,
      convRule: rule21
  }, {
      start: 42567,
      length: 1,
      convRule: rule22
  }, {
      start: 42568,
      length: 1,
      convRule: rule21
  }, {
      start: 42569,
      length: 1,
      convRule: rule22
  }, {
      start: 42570,
      length: 1,
      convRule: rule21
  }, {
      start: 42571,
      length: 1,
      convRule: rule22
  }, {
      start: 42572,
      length: 1,
      convRule: rule21
  }, {
      start: 42573,
      length: 1,
      convRule: rule22
  }, {
      start: 42574,
      length: 1,
      convRule: rule21
  }, {
      start: 42575,
      length: 1,
      convRule: rule22
  }, {
      start: 42576,
      length: 1,
      convRule: rule21
  }, {
      start: 42577,
      length: 1,
      convRule: rule22
  }, {
      start: 42578,
      length: 1,
      convRule: rule21
  }, {
      start: 42579,
      length: 1,
      convRule: rule22
  }, {
      start: 42580,
      length: 1,
      convRule: rule21
  }, {
      start: 42581,
      length: 1,
      convRule: rule22
  }, {
      start: 42582,
      length: 1,
      convRule: rule21
  }, {
      start: 42583,
      length: 1,
      convRule: rule22
  }, {
      start: 42584,
      length: 1,
      convRule: rule21
  }, {
      start: 42585,
      length: 1,
      convRule: rule22
  }, {
      start: 42586,
      length: 1,
      convRule: rule21
  }, {
      start: 42587,
      length: 1,
      convRule: rule22
  }, {
      start: 42588,
      length: 1,
      convRule: rule21
  }, {
      start: 42589,
      length: 1,
      convRule: rule22
  }, {
      start: 42590,
      length: 1,
      convRule: rule21
  }, {
      start: 42591,
      length: 1,
      convRule: rule22
  }, {
      start: 42592,
      length: 1,
      convRule: rule21
  }, {
      start: 42593,
      length: 1,
      convRule: rule22
  }, {
      start: 42594,
      length: 1,
      convRule: rule21
  }, {
      start: 42595,
      length: 1,
      convRule: rule22
  }, {
      start: 42596,
      length: 1,
      convRule: rule21
  }, {
      start: 42597,
      length: 1,
      convRule: rule22
  }, {
      start: 42598,
      length: 1,
      convRule: rule21
  }, {
      start: 42599,
      length: 1,
      convRule: rule22
  }, {
      start: 42600,
      length: 1,
      convRule: rule21
  }, {
      start: 42601,
      length: 1,
      convRule: rule22
  }, {
      start: 42602,
      length: 1,
      convRule: rule21
  }, {
      start: 42603,
      length: 1,
      convRule: rule22
  }, {
      start: 42604,
      length: 1,
      convRule: rule21
  }, {
      start: 42605,
      length: 1,
      convRule: rule22
  }, {
      start: 42624,
      length: 1,
      convRule: rule21
  }, {
      start: 42625,
      length: 1,
      convRule: rule22
  }, {
      start: 42626,
      length: 1,
      convRule: rule21
  }, {
      start: 42627,
      length: 1,
      convRule: rule22
  }, {
      start: 42628,
      length: 1,
      convRule: rule21
  }, {
      start: 42629,
      length: 1,
      convRule: rule22
  }, {
      start: 42630,
      length: 1,
      convRule: rule21
  }, {
      start: 42631,
      length: 1,
      convRule: rule22
  }, {
      start: 42632,
      length: 1,
      convRule: rule21
  }, {
      start: 42633,
      length: 1,
      convRule: rule22
  }, {
      start: 42634,
      length: 1,
      convRule: rule21
  }, {
      start: 42635,
      length: 1,
      convRule: rule22
  }, {
      start: 42636,
      length: 1,
      convRule: rule21
  }, {
      start: 42637,
      length: 1,
      convRule: rule22
  }, {
      start: 42638,
      length: 1,
      convRule: rule21
  }, {
      start: 42639,
      length: 1,
      convRule: rule22
  }, {
      start: 42640,
      length: 1,
      convRule: rule21
  }, {
      start: 42641,
      length: 1,
      convRule: rule22
  }, {
      start: 42642,
      length: 1,
      convRule: rule21
  }, {
      start: 42643,
      length: 1,
      convRule: rule22
  }, {
      start: 42644,
      length: 1,
      convRule: rule21
  }, {
      start: 42645,
      length: 1,
      convRule: rule22
  }, {
      start: 42646,
      length: 1,
      convRule: rule21
  }, {
      start: 42647,
      length: 1,
      convRule: rule22
  }, {
      start: 42786,
      length: 1,
      convRule: rule21
  }, {
      start: 42787,
      length: 1,
      convRule: rule22
  }, {
      start: 42788,
      length: 1,
      convRule: rule21
  }, {
      start: 42789,
      length: 1,
      convRule: rule22
  }, {
      start: 42790,
      length: 1,
      convRule: rule21
  }, {
      start: 42791,
      length: 1,
      convRule: rule22
  }, {
      start: 42792,
      length: 1,
      convRule: rule21
  }, {
      start: 42793,
      length: 1,
      convRule: rule22
  }, {
      start: 42794,
      length: 1,
      convRule: rule21
  }, {
      start: 42795,
      length: 1,
      convRule: rule22
  }, {
      start: 42796,
      length: 1,
      convRule: rule21
  }, {
      start: 42797,
      length: 1,
      convRule: rule22
  }, {
      start: 42798,
      length: 1,
      convRule: rule21
  }, {
      start: 42799,
      length: 1,
      convRule: rule22
  }, {
      start: 42802,
      length: 1,
      convRule: rule21
  }, {
      start: 42803,
      length: 1,
      convRule: rule22
  }, {
      start: 42804,
      length: 1,
      convRule: rule21
  }, {
      start: 42805,
      length: 1,
      convRule: rule22
  }, {
      start: 42806,
      length: 1,
      convRule: rule21
  }, {
      start: 42807,
      length: 1,
      convRule: rule22
  }, {
      start: 42808,
      length: 1,
      convRule: rule21
  }, {
      start: 42809,
      length: 1,
      convRule: rule22
  }, {
      start: 42810,
      length: 1,
      convRule: rule21
  }, {
      start: 42811,
      length: 1,
      convRule: rule22
  }, {
      start: 42812,
      length: 1,
      convRule: rule21
  }, {
      start: 42813,
      length: 1,
      convRule: rule22
  }, {
      start: 42814,
      length: 1,
      convRule: rule21
  }, {
      start: 42815,
      length: 1,
      convRule: rule22
  }, {
      start: 42816,
      length: 1,
      convRule: rule21
  }, {
      start: 42817,
      length: 1,
      convRule: rule22
  }, {
      start: 42818,
      length: 1,
      convRule: rule21
  }, {
      start: 42819,
      length: 1,
      convRule: rule22
  }, {
      start: 42820,
      length: 1,
      convRule: rule21
  }, {
      start: 42821,
      length: 1,
      convRule: rule22
  }, {
      start: 42822,
      length: 1,
      convRule: rule21
  }, {
      start: 42823,
      length: 1,
      convRule: rule22
  }, {
      start: 42824,
      length: 1,
      convRule: rule21
  }, {
      start: 42825,
      length: 1,
      convRule: rule22
  }, {
      start: 42826,
      length: 1,
      convRule: rule21
  }, {
      start: 42827,
      length: 1,
      convRule: rule22
  }, {
      start: 42828,
      length: 1,
      convRule: rule21
  }, {
      start: 42829,
      length: 1,
      convRule: rule22
  }, {
      start: 42830,
      length: 1,
      convRule: rule21
  }, {
      start: 42831,
      length: 1,
      convRule: rule22
  }, {
      start: 42832,
      length: 1,
      convRule: rule21
  }, {
      start: 42833,
      length: 1,
      convRule: rule22
  }, {
      start: 42834,
      length: 1,
      convRule: rule21
  }, {
      start: 42835,
      length: 1,
      convRule: rule22
  }, {
      start: 42836,
      length: 1,
      convRule: rule21
  }, {
      start: 42837,
      length: 1,
      convRule: rule22
  }, {
      start: 42838,
      length: 1,
      convRule: rule21
  }, {
      start: 42839,
      length: 1,
      convRule: rule22
  }, {
      start: 42840,
      length: 1,
      convRule: rule21
  }, {
      start: 42841,
      length: 1,
      convRule: rule22
  }, {
      start: 42842,
      length: 1,
      convRule: rule21
  }, {
      start: 42843,
      length: 1,
      convRule: rule22
  }, {
      start: 42844,
      length: 1,
      convRule: rule21
  }, {
      start: 42845,
      length: 1,
      convRule: rule22
  }, {
      start: 42846,
      length: 1,
      convRule: rule21
  }, {
      start: 42847,
      length: 1,
      convRule: rule22
  }, {
      start: 42848,
      length: 1,
      convRule: rule21
  }, {
      start: 42849,
      length: 1,
      convRule: rule22
  }, {
      start: 42850,
      length: 1,
      convRule: rule21
  }, {
      start: 42851,
      length: 1,
      convRule: rule22
  }, {
      start: 42852,
      length: 1,
      convRule: rule21
  }, {
      start: 42853,
      length: 1,
      convRule: rule22
  }, {
      start: 42854,
      length: 1,
      convRule: rule21
  }, {
      start: 42855,
      length: 1,
      convRule: rule22
  }, {
      start: 42856,
      length: 1,
      convRule: rule21
  }, {
      start: 42857,
      length: 1,
      convRule: rule22
  }, {
      start: 42858,
      length: 1,
      convRule: rule21
  }, {
      start: 42859,
      length: 1,
      convRule: rule22
  }, {
      start: 42860,
      length: 1,
      convRule: rule21
  }, {
      start: 42861,
      length: 1,
      convRule: rule22
  }, {
      start: 42862,
      length: 1,
      convRule: rule21
  }, {
      start: 42863,
      length: 1,
      convRule: rule22
  }, {
      start: 42873,
      length: 1,
      convRule: rule21
  }, {
      start: 42874,
      length: 1,
      convRule: rule22
  }, {
      start: 42875,
      length: 1,
      convRule: rule21
  }, {
      start: 42876,
      length: 1,
      convRule: rule22
  }, {
      start: 42877,
      length: 1,
      convRule: rule161
  }, {
      start: 42878,
      length: 1,
      convRule: rule21
  }, {
      start: 42879,
      length: 1,
      convRule: rule22
  }, {
      start: 42880,
      length: 1,
      convRule: rule21
  }, {
      start: 42881,
      length: 1,
      convRule: rule22
  }, {
      start: 42882,
      length: 1,
      convRule: rule21
  }, {
      start: 42883,
      length: 1,
      convRule: rule22
  }, {
      start: 42884,
      length: 1,
      convRule: rule21
  }, {
      start: 42885,
      length: 1,
      convRule: rule22
  }, {
      start: 42886,
      length: 1,
      convRule: rule21
  }, {
      start: 42887,
      length: 1,
      convRule: rule22
  }, {
      start: 42891,
      length: 1,
      convRule: rule21
  }, {
      start: 42892,
      length: 1,
      convRule: rule22
  }, {
      start: 42893,
      length: 1,
      convRule: rule162
  }, {
      start: 42896,
      length: 1,
      convRule: rule21
  }, {
      start: 42897,
      length: 1,
      convRule: rule22
  }, {
      start: 42912,
      length: 1,
      convRule: rule21
  }, {
      start: 42913,
      length: 1,
      convRule: rule22
  }, {
      start: 42914,
      length: 1,
      convRule: rule21
  }, {
      start: 42915,
      length: 1,
      convRule: rule22
  }, {
      start: 42916,
      length: 1,
      convRule: rule21
  }, {
      start: 42917,
      length: 1,
      convRule: rule22
  }, {
      start: 42918,
      length: 1,
      convRule: rule21
  }, {
      start: 42919,
      length: 1,
      convRule: rule22
  }, {
      start: 42920,
      length: 1,
      convRule: rule21
  }, {
      start: 42921,
      length: 1,
      convRule: rule22
  }, {
      start: 65313,
      length: 26,
      convRule: rule9
  }, {
      start: 65345,
      length: 26,
      convRule: rule12
  }, {
      start: 66560,
      length: 40,
      convRule: rule165
  }, {
      start: 66600,
      length: 40,
      convRule: rule166
  } ];

  // The third argument is a  size.  It says to only look at this many elements
  // in the array.  There are times when we don't want to look at ALL the
  // elements, but only a subset.
  var bsearch = function (a) {
      return function (array) {
          return function (size) {
              return function (compare) {
                  var go = function ($copy_i) {
                      return function ($copy_k) {
                          var $tco_var_i = $copy_i;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(i, k) {
                              if (i > k) {
                                  $tco_done = true;
                                  return Data_Maybe.Nothing.value;
                              };
                              if (Data_Boolean.otherwise) {
                                  var j = Data_Int.floor(Data_Int.toNumber(i + k | 0) / 2.0);
                                  var v = compare(a)(array[j]);
                                  if (v instanceof Data_Ordering.EQ) {
                                      $tco_done = true;
                                      return new Data_Maybe.Just(array[j]);
                                  };
                                  if (v instanceof Data_Ordering.GT) {
                                      $tco_var_i = j + 1 | 0;
                                      $copy_k = k;
                                      return;
                                  };
                                  $tco_var_i = i;
                                  $copy_k = j - 1 | 0;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4783, column 5 - line 4789, column 49): " + [ i.constructor.name, k.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_i, $copy_k);
                          };
                          return $tco_result;
                      };
                  };
                  return go(0)(size);
              };
          };
      };
  };
  var blkCmp = function (v) {
      return function (v1) {
          if (v.start >= v1.start && v.start < (v1.start + v1.length | 0)) {
              return Data_Ordering.EQ.value;
          };
          if (v.start > v1.start) {
              return Data_Ordering.GT.value;
          };
          if (Data_Boolean.otherwise) {
              return Data_Ordering.LT.value;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4760, column 1 - line 4760, column 45): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };

  // TODO: This might be better if it returned Nothing instead of the nullrule.
  var getRule = function (blocks) {
      return function (unichar) {
          return function (size) {
              var key = {
                  start: unichar,
                  length: 1,
                  convRule: nullrule
              };
              var maybeCharBlock = bsearch(key)(blocks)(size)(blkCmp);
              if (maybeCharBlock instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (maybeCharBlock instanceof Data_Maybe.Just) {
                  return new Data_Maybe.Just(maybeCharBlock.value0.convRule);
              };
              throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4773, column 8 - line 4775, column 62): " + [ maybeCharBlock.constructor.name ]);
          };
      };
  };

  //
  // Define predicate functions for some combinations of categories.
  //
  var caseConv = function (f) {
      return function ($$char) {
          var maybeConversionRule = getRule(convchars)($$char)(numConvBlocks);
          if (maybeConversionRule instanceof Data_Maybe.Nothing) {
              return $$char;
          };
          if (maybeConversionRule instanceof Data_Maybe.Just) {
              return $$char + f(maybeConversionRule.value0) | 0;
          };
          throw new Error("Failed pattern match at Data.Char.Unicode.Internal (line 4850, column 8 - line 4852, column 55): " + [ maybeConversionRule.constructor.name ]);
      };
  };
  var uTowlower = caseConv(function (v) {
      return v.lowdist;
  });
  exports["NUMCAT_LU"] = NUMCAT_LU;
  exports["NUMCAT_LL"] = NUMCAT_LL;
  exports["NUMCAT_LT"] = NUMCAT_LT;
  exports["NUMCAT_MN"] = NUMCAT_MN;
  exports["NUMCAT_NL"] = NUMCAT_NL;
  exports["NUMCAT_SO"] = NUMCAT_SO;
  exports["NUMCAT_CN"] = NUMCAT_CN;
  exports["gencatSO"] = gencatSO;
  exports["gencatMN"] = gencatMN;
  exports["gencatLL"] = gencatLL;
  exports["gencatLT"] = gencatLT;
  exports["gencatLU"] = gencatLU;
  exports["gencatNL"] = gencatNL;
  exports["numConvBlocks"] = numConvBlocks;
  exports["rule165"] = rule165;
  exports["rule63"] = rule63;
  exports["rule126"] = rule126;
  exports["rule162"] = rule162;
  exports["rule71"] = rule71;
  exports["rule21"] = rule21;
  exports["rule128"] = rule128;
  exports["rule44"] = rule44;
  exports["rule161"] = rule161;
  exports["rule105"] = rule105;
  exports["rule101"] = rule101;
  exports["rule43"] = rule43;
  exports["rule77"] = rule77;
  exports["rule143"] = rule143;
  exports["rule39"] = rule39;
  exports["rule41"] = rule41;
  exports["rule72"] = rule72;
  exports["rule28"] = rule28;
  exports["rule31"] = rule31;
  exports["rule36"] = rule36;
  exports["rule102"] = rule102;
  exports["rule80"] = rule80;
  exports["rule113"] = rule113;
  exports["rule142"] = rule142;
  exports["rule145"] = rule145;
  exports["rule104"] = rule104;
  exports["rule61"] = rule61;
  exports["rule93"] = rule93;
  exports["rule62"] = rule62;
  exports["rule103"] = rule103;
  exports["rule60"] = rule60;
  exports["rule96"] = rule96;
  exports["rule51"] = rule51;
  exports["rule87"] = rule87;
  exports["rule86"] = rule86;
  exports["rule123"] = rule123;
  exports["rule166"] = rule166;
  exports["rule27"] = rule27;
  exports["rule158"] = rule158;
  exports["rule157"] = rule157;
  exports["rule9"] = rule9;
  exports["rule159"] = rule159;
  exports["rule138"] = rule138;
  exports["rule133"] = rule133;
  exports["rule155"] = rule155;
  exports["rule132"] = rule132;
  exports["rule153"] = rule153;
  exports["rule24"] = rule24;
  exports["rule26"] = rule26;
  exports["rule74"] = rule74;
  exports["rule122"] = rule122;
  exports["rule25"] = rule25;
  exports["rule127"] = rule127;
  exports["rule40"] = rule40;
  exports["rule30"] = rule30;
  exports["rule29"] = rule29;
  exports["rule69"] = rule69;
  exports["rule135"] = rule135;
  exports["rule23"] = rule23;
  exports["rule32"] = rule32;
  exports["rule33"] = rule33;
  exports["rule50"] = rule50;
  exports["rule154"] = rule154;
  exports["rule58"] = rule58;
  exports["rule67"] = rule67;
  exports["rule76"] = rule76;
  exports["rule119"] = rule119;
  exports["rule57"] = rule57;
  exports["rule97"] = rule97;
  exports["rule108"] = rule108;
  exports["rule100"] = rule100;
  exports["rule70"] = rule70;
  exports["rule141"] = rule141;
  exports["rule91"] = rule91;
  exports["rule121"] = rule121;
  exports["rule117"] = rule117;
  exports["rule12"] = rule12;
  exports["rule85"] = rule85;
  exports["rule134"] = rule134;
  exports["rule147"] = rule147;
  exports["rule64"] = rule64;
  exports["rule38"] = rule38;
  exports["rule42"] = rule42;
  exports["rule53"] = rule53;
  exports["rule136"] = rule136;
  exports["rule120"] = rule120;
  exports["rule20"] = rule20;
  exports["rule115"] = rule115;
  exports["rule125"] = rule125;
  exports["rule49"] = rule49;
  exports["rule79"] = rule79;
  exports["rule148"] = rule148;
  exports["rule66"] = rule66;
  exports["rule99"] = rule99;
  exports["rule94"] = rule94;
  exports["rule55"] = rule55;
  exports["rule54"] = rule54;
  exports["rule124"] = rule124;
  exports["rule65"] = rule65;
  exports["rule78"] = rule78;
  exports["rule56"] = rule56;
  exports["rule137"] = rule137;
  exports["rule131"] = rule131;
  exports["rule130"] = rule130;
  exports["rule110"] = rule110;
  exports["rule48"] = rule48;
  exports["rule52"] = rule52;
  exports["rule156"] = rule156;
  exports["rule75"] = rule75;
  exports["rule129"] = rule129;
  exports["rule37"] = rule37;
  exports["rule18"] = rule18;
  exports["rule152"] = rule152;
  exports["rule35"] = rule35;
  exports["rule46"] = rule46;
  exports["rule82"] = rule82;
  exports["rule34"] = rule34;
  exports["rule150"] = rule150;
  exports["rule107"] = rule107;
  exports["rule47"] = rule47;
  exports["rule160"] = rule160;
  exports["rule73"] = rule73;
  exports["rule59"] = rule59;
  exports["rule106"] = rule106;
  exports["rule151"] = rule151;
  exports["rule112"] = rule112;
  exports["rule90"] = rule90;
  exports["rule146"] = rule146;
  exports["rule89"] = rule89;
  exports["rule81"] = rule81;
  exports["rule88"] = rule88;
  exports["rule149"] = rule149;
  exports["rule111"] = rule111;
  exports["rule144"] = rule144;
  exports["rule92"] = rule92;
  exports["rule118"] = rule118;
  exports["rule22"] = rule22;
  exports["rule68"] = rule68;
  exports["rule95"] = rule95;
  exports["convchars"] = convchars;
  exports["nullrule"] = nullrule;
  exports["blkCmp"] = blkCmp;
  exports["getRule"] = getRule;
  exports["bsearch"] = bsearch;
  exports["caseConv"] = caseConv;
  exports["uTowlower"] = uTowlower;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Char.Unicode"] = $PS["Data.Char.Unicode"] || {};
  var exports = $PS["Data.Char.Unicode"];
  var $foreign = $PS["Data.Char.Unicode"];
  var Data_Char_Unicode_Internal = $PS["Data.Char.Unicode.Internal"];       

  // | Convert a letter to the corresponding lower-case letter, if any.
  // | Any other character is returned unchanged.
  var toLower = $foreign.withCharCode(Data_Char_Unicode_Internal.uTowlower);
  exports["toLower"] = toLower;
})(PS);
(function(exports) {
  "use strict";

  exports.intSub = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x - y | 0;
    };
  };
})(PS["Data.Ring"] = PS["Data.Ring"] || {});
(function(exports) {
  "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Semiring"] = $PS["Data.Semiring"] || {};
  var exports = $PS["Data.Semiring"];
  var $foreign = $PS["Data.Semiring"];

  // | The `Semiring` class is for types that support an addition and
  // | multiplication operation.
  // |
  // | Instances must satisfy the following laws:
  // |
  // | - Commutative monoid under addition:
  // |   - Associativity: `(a + b) + c = a + (b + c)`
  // |   - Identity: `zero + a = a + zero = a`
  // |   - Commutative: `a + b = b + a`
  // | - Monoid under multiplication:
  // |   - Associativity: `(a * b) * c = a * (b * c)`
  // |   - Identity: `one * a = a * one = a`
  // | - Multiplication distributes over addition:
  // |   - Left distributivity: `a * (b + c) = (a * b) + (a * c)`
  // |   - Right distributivity: `(a + b) * c = (a * c) + (b * c)`
  // | - Annihilation: `zero * a = a * zero = zero`
  // |
  // | **Note:** The `Number` and `Int` types are not fully law abiding
  // | members of this class hierarchy due to the potential for arithmetic
  // | overflows, and in the case of `Number`, the presence of `NaN` and
  // | `Infinity` values. The behaviour is unspecified in these cases.
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Ring"] = $PS["Data.Ring"] || {};
  var exports = $PS["Data.Ring"];
  var $foreign = $PS["Data.Ring"];
  var Data_Semiring = $PS["Data.Semiring"];

  // | The `Ring` class is for types that support addition, multiplication,
  // | and subtraction operations.
  // |
  // | Instances must satisfy the following law in addition to the `Semiring`
  // | laws:
  // |
  // | - Additive inverse: `a - a = (zero - a) + a = zero`
  var Ring = function (Semiring0, sub) {
      this.Semiring0 = Semiring0;
      this.sub = sub;
  };
  var sub = function (dict) {
      return dict.sub;
  };                  
  var ringInt = new Ring(function () {
      return Data_Semiring.semiringInt;
  }, $foreign.intSub);
  exports["Ring"] = Ring;
  exports["sub"] = sub;
  exports["ringInt"] = ringInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.CommutativeRing"] = $PS["Data.CommutativeRing"] || {};
  var exports = $PS["Data.CommutativeRing"];
  var Data_Ring = $PS["Data.Ring"];

  // | The `CommutativeRing` class is for rings where multiplication is
  // | commutative.
  // |
  // | Instances must satisfy the following law in addition to the `Ring`
  // | laws:
  // |
  // | - Commutative multiplication: `a * b = b * a`
  var CommutativeRing = function (Ring0) {
      this.Ring0 = Ring0;
  }; 
  var commutativeRingInt = new CommutativeRing(function () {
      return Data_Ring.ringInt;
  });
  exports["CommutativeRing"] = CommutativeRing;
  exports["commutativeRingInt"] = commutativeRingInt;
})(PS);
(function(exports) {
  "use strict";

  var createDate = function (y, m, d) {
    var date = new Date(Date.UTC(y, m, d));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date;
  };

  exports.canonicalDateImpl = function (ctor, y, m, d) {
    var date = createDate(y, m - 1, d);
    return ctor(date.getUTCFullYear())(date.getUTCMonth() + 1)(date.getUTCDate());
  };
})(PS["Data.Date"] = PS["Data.Date"] || {});
(function(exports) {
  "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };

  exports.fromCharCode = function (c) {
    return String.fromCharCode(c);
  };
})(PS["Data.Enum"] = PS["Data.Enum"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Enum"] = $PS["Data.Enum"] || {};
  var exports = $PS["Data.Enum"];
  var $foreign = $PS["Data.Enum"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];

  // | Type class for enumerations.
  // |
  // | Laws:
  // | - Successor: `all (a < _) (succ a)`
  // | - Predecessor: `all (_ < a) (pred a)`
  // | - Succ retracts pred: `pred >=> succ >=> pred = pred`
  // | - Pred retracts succ: `succ >=> pred >=> succ = succ`
  // | - Non-skipping succ: `b <= a || any (_ <= b) (succ a)`
  // | - Non-skipping pred: `a <= b || any (b <= _) (pred a)`
  // |
  // | The retraction laws can intuitively be understood as saying that `succ` is
  // | the opposite of `pred`; if you apply `succ` and then `pred` to something,
  // | you should end up with what you started with (although of course this
  // | doesn't apply if you tried to `succ` the last value in an enumeration and
  // | therefore got `Nothing` out).
  // |
  // | The non-skipping laws can intuitively be understood as saying that `succ`
  // | shouldn't skip over any elements of your type. For example, _without_ the
  // | non-skipping laws, it would be permissible to write an `Enum Int` instance
  // | where `succ x = Just (x+2)`, and similarly `pred x = Just (x-2)`.
  var Enum = function (Ord0, pred, succ) {
      this.Ord0 = Ord0;
      this.pred = pred;
      this.succ = succ;
  };

  // | Type class for finite enumerations.
  // |
  // | This should not be considered a part of a numeric hierarchy, as in Haskell.
  // | Rather, this is a type class for small, ordered sum types with
  // | statically-determined cardinality and the ability to easily compute
  // | successor and predecessor elements like `DayOfWeek`.
  // |
  // | Laws:
  // |
  // | - ```succ bottom >>= succ >>= succ ... succ [cardinality - 1 times] == top```
  // | - ```pred top    >>= pred >>= pred ... pred [cardinality - 1 times] == bottom```
  // | - ```forall a > bottom: pred a >>= succ == Just a```
  // | - ```forall a < top:  succ a >>= pred == Just a```
  // | - ```forall a > bottom: fromEnum <$> pred a = pred (fromEnum a)```
  // | - ```forall a < top:  fromEnum <$> succ a = succ (fromEnum a)```
  // | - ```e1 `compare` e2 == fromEnum e1 `compare` fromEnum e2```
  // | - ```toEnum (fromEnum a) = Just a```
  var BoundedEnum = function (Bounded0, Enum1, cardinality, fromEnum, toEnum) {
      this.Bounded0 = Bounded0;
      this.Enum1 = Enum1;
      this.cardinality = cardinality;
      this.fromEnum = fromEnum;
      this.toEnum = toEnum;
  };
  var toEnum = function (dict) {
      return dict.toEnum;
  };
  var succ = function (dict) {
      return dict.succ;
  }; 
  var pred = function (dict) {
      return dict.pred;
  };              
  var fromEnum = function (dict) {
      return dict.fromEnum;
  };

  // | Like `toEnum` but returns the first argument if `x` is less than
  // | `fromEnum bottom` and the second argument if `x` is greater than
  // | `fromEnum top`.
  // |
  // | ``` purescript
  // | toEnumWithDefaults False True (-1) -- False
  // | toEnumWithDefaults False True 0    -- False
  // | toEnumWithDefaults False True 1    -- True
  // | toEnumWithDefaults False True 2    -- True
  // | ```
  var toEnumWithDefaults = function (dictBoundedEnum) {
      return function (low) {
          return function (high) {
              return function (x) {
                  var v = toEnum(dictBoundedEnum)(x);
                  if (v instanceof Data_Maybe.Just) {
                      return v.value0;
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var $54 = x < fromEnum(dictBoundedEnum)(Data_Bounded.bottom(dictBoundedEnum.Bounded0()));
                      if ($54) {
                          return low;
                      };
                      return high;
                  };
                  throw new Error("Failed pattern match at Data.Enum (line 158, column 33 - line 160, column 62): " + [ v.constructor.name ]);
              };
          };
      };
  };

  // | Provides a default implementation for `succ`, given a function that maps
  // | integers to values in the `Enum`, and a function that maps values in the
  // | `Enum` back to integers. The integer mapping must agree in both directions
  // | for this to implement a law-abiding `succ`.
  // |
  // | If a `BoundedEnum` instance exists for `a`, the `toEnum` and `fromEnum`
  // | functions can be used here:
  // |
  // | ``` purescript
  // | succ = defaultSucc toEnum fromEnum
  // | ```
  var defaultSucc = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) + 1 | 0);
          };
      };
  };

  // | Provides a default implementation for `pred`, given a function that maps
  // | integers to values in the `Enum`, and a function that maps values in the
  // | `Enum` back to integers. The integer mapping must agree in both directions
  // | for this to implement a law-abiding `pred`.
  // |
  // | If a `BoundedEnum` instance exists for `a`, the `toEnum` and `fromEnum`
  // | functions can be used here:
  // |
  // | ``` purescript
  // | pred = defaultPred toEnum fromEnum
  // | ```
  var defaultPred = function (toEnum$prime) {
      return function (fromEnum$prime) {
          return function (a) {
              return toEnum$prime(fromEnum$prime(a) - 1 | 0);
          };
      };
  };
  var charToEnum = function (v) {
      if (v >= Data_Bounded.bottom(Data_Bounded.boundedInt) && v <= Data_Bounded.top(Data_Bounded.boundedInt)) {
          return new Data_Maybe.Just($foreign.fromCharCode(v));
      };
      return Data_Maybe.Nothing.value;
  };
  var enumChar = new Enum(function () {
      return Data_Ord.ordChar;
  }, defaultPred(charToEnum)($foreign.toCharCode), defaultSucc(charToEnum)($foreign.toCharCode));
  var cardinality = function (dict) {
      return dict.cardinality;
  }; 
  var boundedEnumChar = new BoundedEnum(function () {
      return Data_Bounded.boundedChar;
  }, function () {
      return enumChar;
  }, $foreign.toCharCode(Data_Bounded.top(Data_Bounded.boundedChar)) - $foreign.toCharCode(Data_Bounded.bottom(Data_Bounded.boundedChar)) | 0, $foreign.toCharCode, charToEnum);
  exports["Enum"] = Enum;
  exports["succ"] = succ;
  exports["pred"] = pred;
  exports["BoundedEnum"] = BoundedEnum;
  exports["cardinality"] = cardinality;
  exports["toEnum"] = toEnum;
  exports["fromEnum"] = fromEnum;
  exports["toEnumWithDefaults"] = toEnumWithDefaults;
  exports["defaultSucc"] = defaultSucc;
  exports["defaultPred"] = defaultPred;
  exports["enumChar"] = enumChar;
  exports["boundedEnumChar"] = boundedEnumChar;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Date.Component"] = $PS["Data.Date.Component"] || {};
  var exports = $PS["Data.Date.Component"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];

  // | A month component for a date in the Gregorian calendar.
  var January = (function () {
      function January() {

      };
      January.value = new January();
      return January;
  })();

  // | A month component for a date in the Gregorian calendar.
  var February = (function () {
      function February() {

      };
      February.value = new February();
      return February;
  })();

  // | A month component for a date in the Gregorian calendar.
  var March = (function () {
      function March() {

      };
      March.value = new March();
      return March;
  })();

  // | A month component for a date in the Gregorian calendar.
  var April = (function () {
      function April() {

      };
      April.value = new April();
      return April;
  })();

  // | A month component for a date in the Gregorian calendar.
  var May = (function () {
      function May() {

      };
      May.value = new May();
      return May;
  })();

  // | A month component for a date in the Gregorian calendar.
  var June = (function () {
      function June() {

      };
      June.value = new June();
      return June;
  })();

  // | A month component for a date in the Gregorian calendar.
  var July = (function () {
      function July() {

      };
      July.value = new July();
      return July;
  })();

  // | A month component for a date in the Gregorian calendar.
  var August = (function () {
      function August() {

      };
      August.value = new August();
      return August;
  })();

  // | A month component for a date in the Gregorian calendar.
  var September = (function () {
      function September() {

      };
      September.value = new September();
      return September;
  })();

  // | A month component for a date in the Gregorian calendar.
  var October = (function () {
      function October() {

      };
      October.value = new October();
      return October;
  })();

  // | A month component for a date in the Gregorian calendar.
  var November = (function () {
      function November() {

      };
      November.value = new November();
      return November;
  })();

  // | A month component for a date in the Gregorian calendar.
  var December = (function () {
      function December() {

      };
      December.value = new December();
      return December;
  })();
  var ordYear = Data_Ord.ordInt;
  var ordDay = Data_Ord.ordInt;
  var eqYear = Data_Eq.eqInt;
  var eqMonth = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return true;
          };
          if (x instanceof February && y instanceof February) {
              return true;
          };
          if (x instanceof March && y instanceof March) {
              return true;
          };
          if (x instanceof April && y instanceof April) {
              return true;
          };
          if (x instanceof May && y instanceof May) {
              return true;
          };
          if (x instanceof June && y instanceof June) {
              return true;
          };
          if (x instanceof July && y instanceof July) {
              return true;
          };
          if (x instanceof August && y instanceof August) {
              return true;
          };
          if (x instanceof September && y instanceof September) {
              return true;
          };
          if (x instanceof October && y instanceof October) {
              return true;
          };
          if (x instanceof November && y instanceof November) {
              return true;
          };
          if (x instanceof December && y instanceof December) {
              return true;
          };
          return false;
      };
  });
  var ordMonth = new Data_Ord.Ord(function () {
      return eqMonth;
  }, function (x) {
      return function (y) {
          if (x instanceof January && y instanceof January) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof January) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof January) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof February && y instanceof February) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof February) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof February) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof March && y instanceof March) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof March) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof March) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof April && y instanceof April) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof April) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof April) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof May && y instanceof May) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof May) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof May) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof June && y instanceof June) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof June) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof June) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof July && y instanceof July) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof July) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof July) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof August && y instanceof August) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof August) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof August) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof September && y instanceof September) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof September) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof September) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof October && y instanceof October) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof October) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof October) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof November && y instanceof November) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof November) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof November) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof December && y instanceof December) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at Data.Date.Component (line 61, column 8 - line 61, column 38): " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var eqDay = Data_Eq.eqInt;

  // Note: these seemingly arbitrary bounds come from relying on JS for date
  // manipulations, as it only supports date ±100,000,000 days of the Unix epoch.
  // Using these year values means `Date bottom bottom bottom` is a valid date,
  // likewise for `top`.
  var boundedYear = new Data_Bounded.Bounded(function () {
      return ordYear;
  }, -271820 | 0, 275759);       
  var boundedMonth = new Data_Bounded.Bounded(function () {
      return ordMonth;
  }, January.value, December.value);
  var boundedEnumYear = new Data_Enum.BoundedEnum(function () {
      return boundedYear;
  }, function () {
      return enumYear;
  }, 547580, function (v) {
      return v;
  }, function (n) {
      if (n >= (-271820 | 0) && n <= 275759) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component (line 35, column 1 - line 35, column 45): " + [ n.constructor.name ]);
  });
  var enumYear = new Data_Enum.Enum(function () {
      return ordYear;
  }, function ($46) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($46)));
  }, function ($47) {
      return Data_Enum.toEnum(boundedEnumYear)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumYear)($47)));
  });
  var boundedEnumMonth = new Data_Enum.BoundedEnum(function () {
      return boundedMonth;
  }, function () {
      return enumMonth;
  }, 12, function (v) {
      if (v instanceof January) {
          return 1;
      };
      if (v instanceof February) {
          return 2;
      };
      if (v instanceof March) {
          return 3;
      };
      if (v instanceof April) {
          return 4;
      };
      if (v instanceof May) {
          return 5;
      };
      if (v instanceof June) {
          return 6;
      };
      if (v instanceof July) {
          return 7;
      };
      if (v instanceof August) {
          return 8;
      };
      if (v instanceof September) {
          return 9;
      };
      if (v instanceof October) {
          return 10;
      };
      if (v instanceof November) {
          return 11;
      };
      if (v instanceof December) {
          return 12;
      };
      throw new Error("Failed pattern match at Data.Date.Component (line 87, column 14 - line 101, column 1): " + [ v.constructor.name ]);
  }, function (v) {
      if (v === 1) {
          return new Data_Maybe.Just(January.value);
      };
      if (v === 2) {
          return new Data_Maybe.Just(February.value);
      };
      if (v === 3) {
          return new Data_Maybe.Just(March.value);
      };
      if (v === 4) {
          return new Data_Maybe.Just(April.value);
      };
      if (v === 5) {
          return new Data_Maybe.Just(May.value);
      };
      if (v === 6) {
          return new Data_Maybe.Just(June.value);
      };
      if (v === 7) {
          return new Data_Maybe.Just(July.value);
      };
      if (v === 8) {
          return new Data_Maybe.Just(August.value);
      };
      if (v === 9) {
          return new Data_Maybe.Just(September.value);
      };
      if (v === 10) {
          return new Data_Maybe.Just(October.value);
      };
      if (v === 11) {
          return new Data_Maybe.Just(November.value);
      };
      if (v === 12) {
          return new Data_Maybe.Just(December.value);
      };
      return Data_Maybe.Nothing.value;
  });
  var enumMonth = new Data_Enum.Enum(function () {
      return ordMonth;
  }, function ($50) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($50)));
  }, function ($51) {
      return Data_Enum.toEnum(boundedEnumMonth)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMonth)($51)));
  });
  var boundedDay = new Data_Bounded.Bounded(function () {
      return ordDay;
  }, 1, 31);
  var boundedEnumDay = new Data_Enum.BoundedEnum(function () {
      return boundedDay;
  }, function () {
      return enumDay;
  }, 31, function (v) {
      return v;
  }, function (n) {
      if (n >= 1 && n <= 31) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Date.Component (line 133, column 1 - line 133, column 43): " + [ n.constructor.name ]);
  });
  var enumDay = new Data_Enum.Enum(function () {
      return ordDay;
  }, function ($52) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($52)));
  }, function ($53) {
      return Data_Enum.toEnum(boundedEnumDay)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumDay)($53)));
  });
  exports["January"] = January;
  exports["February"] = February;
  exports["March"] = March;
  exports["April"] = April;
  exports["May"] = May;
  exports["June"] = June;
  exports["July"] = July;
  exports["August"] = August;
  exports["September"] = September;
  exports["October"] = October;
  exports["November"] = November;
  exports["December"] = December;
  exports["eqYear"] = eqYear;
  exports["ordYear"] = ordYear;
  exports["boundedYear"] = boundedYear;
  exports["enumYear"] = enumYear;
  exports["boundedEnumYear"] = boundedEnumYear;
  exports["eqMonth"] = eqMonth;
  exports["ordMonth"] = ordMonth;
  exports["boundedMonth"] = boundedMonth;
  exports["enumMonth"] = enumMonth;
  exports["boundedEnumMonth"] = boundedEnumMonth;
  exports["eqDay"] = eqDay;
  exports["ordDay"] = ordDay;
  exports["boundedDay"] = boundedDay;
  exports["enumDay"] = enumDay;
  exports["boundedEnumDay"] = boundedEnumDay;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Date"] = $PS["Data.Date"] || {};
  var exports = $PS["Data.Date"];
  var $foreign = $PS["Data.Date"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];                          

  // | A date value in the Gregorian calendar.
  var $$Date = (function () {
      function $$Date(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      $$Date.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new $$Date(value0, value1, value2);
              };
          };
      };
      return $$Date;
  })();

  // | The year component of a date value.
  var year = function (v) {
      return v.value0;
  }; 

  // | The month component of a date value.
  var month = function (v) {
      return v.value1;
  };
  var eqDate = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date_Component.eqYear)(x.value0)(y.value0) && Data_Eq.eq(Data_Date_Component.eqMonth)(x.value1)(y.value1) && Data_Eq.eq(Data_Date_Component.eqDay)(x.value2)(y.value2);
      };
  });
  var ordDate = new Data_Ord.Ord(function () {
      return eqDate;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date_Component.ordYear)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Date_Component.ordMonth)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Date_Component.ordDay)(x.value2)(y.value2);
      };
  });

  // | The day component of a date value.
  var day = function (v) {
      return v.value2;
  };

  // | Constructs a date from year, month, and day components. The resulting date
  // | components may not be identical to the input values, as the date will be
  // | canonicalised according to the Gregorian calendar. For example, date
  // | values for the invalid date 2016-02-31 will be corrected to 2016-03-02.
  var canonicalDate = function (y) {
      return function (m) {
          return function (d) {
              var mkDate = function (y$prime) {
                  return function (m$prime) {
                      return function (d$prime) {
                          return new $$Date(y$prime, Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(m$prime)), d$prime);
                      };
                  };
              };
              return $foreign.canonicalDateImpl(mkDate, y, Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(m), d);
          };
      };
  };
  var boundedDate = new Data_Bounded.Bounded(function () {
      return ordDate;
  }, new $$Date(Data_Bounded.bottom(Data_Date_Component.boundedYear), Data_Bounded.bottom(Data_Date_Component.boundedMonth), Data_Bounded.bottom(Data_Date_Component.boundedDay)), new $$Date(Data_Bounded.top(Data_Date_Component.boundedYear), Data_Bounded.top(Data_Date_Component.boundedMonth), Data_Bounded.top(Data_Date_Component.boundedDay)));
  exports["canonicalDate"] = canonicalDate;
  exports["year"] = year;
  exports["month"] = month;
  exports["day"] = day;
  exports["eqDate"] = eqDate;
  exports["ordDate"] = ordDate;
  exports["boundedDate"] = boundedDate;
})(PS);
(function(exports) {
  "use strict";

  var createUTC = function (y, mo, d, h, m, s, ms) {
    var date = new Date(Date.UTC(y, mo, d, h, m, s, ms));
    if (y >= 0 && y < 100) {
      date.setUTCFullYear(y);
    }
    return date.getTime();
  };

  exports.calcDiff = function (rec1, rec2) {
    var msUTC1 = createUTC(rec1.year, rec1.month - 1, rec1.day, rec1.hour, rec1.minute, rec1.second, rec1.millisecond);
    var msUTC2 = createUTC(rec2.year, rec2.month - 1, rec2.day, rec2.hour, rec2.minute, rec2.second, rec2.millisecond);
    return msUTC1 - msUTC2;
  };
})(PS["Data.DateTime"] = PS["Data.DateTime"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Time.Component"] = $PS["Data.Time.Component"] || {};
  var exports = $PS["Data.Time.Component"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var ordSecond = Data_Ord.ordInt;
  var ordMinute = Data_Ord.ordInt;
  var ordMillisecond = Data_Ord.ordInt;
  var ordHour = Data_Ord.ordInt;
  var eqSecond = Data_Eq.eqInt;
  var eqMinute = Data_Eq.eqInt;
  var eqMillisecond = Data_Eq.eqInt;
  var eqHour = Data_Eq.eqInt;
  var boundedSecond = new Data_Bounded.Bounded(function () {
      return ordSecond;
  }, 0, 59);
  var boundedMinute = new Data_Bounded.Bounded(function () {
      return ordMinute;
  }, 0, 59);
  var boundedMillisecond = new Data_Bounded.Bounded(function () {
      return ordMillisecond;
  }, 0, 999);
  var boundedHour = new Data_Bounded.Bounded(function () {
      return ordHour;
  }, 0, 23);
  var boundedEnumSecond = new Data_Enum.BoundedEnum(function () {
      return boundedSecond;
  }, function () {
      return enumSecond;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component (line 90, column 1 - line 90, column 49): " + [ n.constructor.name ]);
  });
  var enumSecond = new Data_Enum.Enum(function () {
      return ordSecond;
  }, function ($28) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($28)));
  }, function ($29) {
      return Data_Enum.toEnum(boundedEnumSecond)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumSecond)($29)));
  });
  var boundedEnumMinute = new Data_Enum.BoundedEnum(function () {
      return boundedMinute;
  }, function () {
      return enumMinute;
  }, 60, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 59) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component (line 61, column 1 - line 61, column 49): " + [ n.constructor.name ]);
  });
  var enumMinute = new Data_Enum.Enum(function () {
      return ordMinute;
  }, function ($30) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($30)));
  }, function ($31) {
      return Data_Enum.toEnum(boundedEnumMinute)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMinute)($31)));
  });
  var boundedEnumMillisecond = new Data_Enum.BoundedEnum(function () {
      return boundedMillisecond;
  }, function () {
      return enumMillisecond;
  }, 1000, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 999) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component (line 120, column 1 - line 120, column 59): " + [ n.constructor.name ]);
  });
  var enumMillisecond = new Data_Enum.Enum(function () {
      return ordMillisecond;
  }, function ($32) {
      return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMillisecond)($32)));
  }, function ($33) {
      return Data_Enum.toEnum(boundedEnumMillisecond)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumMillisecond)($33)));
  });
  var boundedEnumHour = new Data_Enum.BoundedEnum(function () {
      return boundedHour;
  }, function () {
      return enumHour;
  }, 24, function (v) {
      return v;
  }, function (n) {
      if (n >= 0 && n <= 23) {
          return new Data_Maybe.Just(n);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.Nothing.value;
      };
      throw new Error("Failed pattern match at Data.Time.Component (line 32, column 1 - line 32, column 45): " + [ n.constructor.name ]);
  });
  var enumHour = new Data_Enum.Enum(function () {
      return ordHour;
  }, function ($34) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v - 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($34)));
  }, function ($35) {
      return Data_Enum.toEnum(boundedEnumHour)((function (v) {
          return v + 1 | 0;
      })(Data_Enum.fromEnum(boundedEnumHour)($35)));
  });
  exports["eqHour"] = eqHour;
  exports["ordHour"] = ordHour;
  exports["boundedHour"] = boundedHour;
  exports["enumHour"] = enumHour;
  exports["boundedEnumHour"] = boundedEnumHour;
  exports["eqMinute"] = eqMinute;
  exports["ordMinute"] = ordMinute;
  exports["boundedMinute"] = boundedMinute;
  exports["enumMinute"] = enumMinute;
  exports["boundedEnumMinute"] = boundedEnumMinute;
  exports["eqSecond"] = eqSecond;
  exports["ordSecond"] = ordSecond;
  exports["boundedSecond"] = boundedSecond;
  exports["enumSecond"] = enumSecond;
  exports["boundedEnumSecond"] = boundedEnumSecond;
  exports["eqMillisecond"] = eqMillisecond;
  exports["ordMillisecond"] = ordMillisecond;
  exports["boundedMillisecond"] = boundedMillisecond;
  exports["enumMillisecond"] = enumMillisecond;
  exports["boundedEnumMillisecond"] = boundedEnumMillisecond;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Time"] = $PS["Data.Time"] || {};
  var exports = $PS["Data.Time"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Time_Component = $PS["Data.Time.Component"];
  var Time = (function () {
      function Time(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Time.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Time(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Time;
  })();

  // | The second component of a time value.
  var second = function (v) {
      return v.value2;
  };

  // | The minute component of a time value.
  var minute = function (v) {
      return v.value1;
  };

  // | The millisecond component of a time value.
  var millisecond = function (v) {
      return v.value3;
  };

  // | The hour component of a time value.
  var hour = function (v) {
      return v.value0;
  };
  var eqTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Time_Component.eqHour)(x.value0)(y.value0) && Data_Eq.eq(Data_Time_Component.eqMinute)(x.value1)(y.value1) && Data_Eq.eq(Data_Time_Component.eqSecond)(x.value2)(y.value2) && Data_Eq.eq(Data_Time_Component.eqMillisecond)(x.value3)(y.value3);
      };
  });
  var ordTime = new Data_Ord.Ord(function () {
      return eqTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Time_Component.ordHour)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v1 = Data_Ord.compare(Data_Time_Component.ordMinute)(x.value1)(y.value1);
          if (v1 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v1 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          var v2 = Data_Ord.compare(Data_Time_Component.ordSecond)(x.value2)(y.value2);
          if (v2 instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v2 instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time_Component.ordMillisecond)(x.value3)(y.value3);
      };
  });
  var boundedTime = new Data_Bounded.Bounded(function () {
      return ordTime;
  }, new Time(Data_Bounded.bottom(Data_Time_Component.boundedHour), Data_Bounded.bottom(Data_Time_Component.boundedMinute), Data_Bounded.bottom(Data_Time_Component.boundedSecond), Data_Bounded.bottom(Data_Time_Component.boundedMillisecond)), new Time(Data_Bounded.top(Data_Time_Component.boundedHour), Data_Bounded.top(Data_Time_Component.boundedMinute), Data_Bounded.top(Data_Time_Component.boundedSecond), Data_Bounded.top(Data_Time_Component.boundedMillisecond)));
  exports["Time"] = Time;
  exports["hour"] = hour;
  exports["minute"] = minute;
  exports["second"] = second;
  exports["millisecond"] = millisecond;
  exports["eqTime"] = eqTime;
  exports["ordTime"] = ordTime;
  exports["boundedTime"] = boundedTime;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Time.Duration"] = $PS["Data.Time.Duration"] || {};
  var exports = $PS["Data.Time.Duration"];
  var Control_Category = $PS["Control.Category"];
  var Data_Ord = $PS["Data.Ord"];

  // | A class for enabling conversions between duration types.
  var Duration = function (fromDuration, toDuration) {
      this.fromDuration = fromDuration;
      this.toDuration = toDuration;
  };
  var toDuration = function (dict) {
      return dict.toDuration;
  };                                  
  var ordMilliseconds = Data_Ord.ordNumber;
  var fromDuration = function (dict) {
      return dict.fromDuration;
  };  
  var durationMilliseconds = new Duration(Control_Category.identity(Control_Category.categoryFn), Control_Category.identity(Control_Category.categoryFn));
  exports["fromDuration"] = fromDuration;
  exports["toDuration"] = toDuration;
  exports["Duration"] = Duration;
  exports["ordMilliseconds"] = ordMilliseconds;
  exports["durationMilliseconds"] = durationMilliseconds;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.DateTime"] = $PS["Data.DateTime"] || {};
  var exports = $PS["Data.DateTime"];
  var $foreign = $PS["Data.DateTime"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Time = $PS["Data.Time"];
  var Data_Time_Component = $PS["Data.Time.Component"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];                

  // | A date/time value in the Gregorian calendar/UTC time zone.
  var DateTime = (function () {
      function DateTime(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      DateTime.create = function (value0) {
          return function (value1) {
              return new DateTime(value0, value1);
          };
      };
      return DateTime;
  })();
  var toRecord = function (v) {
      return {
          year: Data_Enum.fromEnum(Data_Date_Component.boundedEnumYear)(Data_Date.year(v.value0)),
          month: Data_Enum.fromEnum(Data_Date_Component.boundedEnumMonth)(Data_Date.month(v.value0)),
          day: Data_Enum.fromEnum(Data_Date_Component.boundedEnumDay)(Data_Date.day(v.value0)),
          hour: Data_Enum.fromEnum(Data_Time_Component.boundedEnumHour)(Data_Time.hour(v.value1)),
          minute: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMinute)(Data_Time.minute(v.value1)),
          second: Data_Enum.fromEnum(Data_Time_Component.boundedEnumSecond)(Data_Time.second(v.value1)),
          millisecond: Data_Enum.fromEnum(Data_Time_Component.boundedEnumMillisecond)(Data_Time.millisecond(v.value1))
      };
  };
  var eqDateTime = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(Data_Date.eqDate)(x.value0)(y.value0) && Data_Eq.eq(Data_Time.eqTime)(x.value1)(y.value1);
      };
  });
  var ordDateTime = new Data_Ord.Ord(function () {
      return eqDateTime;
  }, function (x) {
      return function (y) {
          var v = Data_Ord.compare(Data_Date.ordDate)(x.value0)(y.value0);
          if (v instanceof Data_Ordering.LT) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_Ordering.GT) {
              return Data_Ordering.GT.value;
          };
          return Data_Ord.compare(Data_Time.ordTime)(x.value1)(y.value1);
      };
  });

  // | Calculates the difference between two date/time values, returning the
  // | result as a duration.
  var diff = function (dictDuration) {
      return function (dt1) {
          return function (dt2) {
              return Data_Time_Duration.toDuration(dictDuration)($foreign.calcDiff(toRecord(dt1), toRecord(dt2)));
          };
      };
  };
  var boundedDateTime = new Data_Bounded.Bounded(function () {
      return ordDateTime;
  }, new DateTime(Data_Bounded.bottom(Data_Date.boundedDate), Data_Bounded.bottom(Data_Time.boundedTime)), new DateTime(Data_Bounded.top(Data_Date.boundedDate), Data_Bounded.top(Data_Time.boundedTime)));
  exports["DateTime"] = DateTime;
  exports["diff"] = diff;
  exports["eqDateTime"] = eqDateTime;
  exports["ordDateTime"] = ordDateTime;
  exports["boundedDateTime"] = boundedDateTime;
})(PS);
(function(exports) {
  "use strict";

  exports.toDateTimeImpl = function (ctor) {
    return function (instant) {
      var dt = new Date(instant);
      return ctor (dt.getUTCFullYear())(dt.getUTCMonth() + 1)(dt.getUTCDate())(dt.getUTCHours())(dt.getUTCMinutes())(dt.getUTCSeconds())(dt.getUTCMilliseconds());
    };
  };
})(PS["Data.DateTime.Instant"] = PS["Data.DateTime.Instant"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.DateTime.Instant"] = $PS["Data.DateTime.Instant"] || {};
  var exports = $PS["Data.DateTime.Instant"];
  var $foreign = $PS["Data.DateTime.Instant"];
  var Data_Date = $PS["Data.Date"];
  var Data_Date_Component = $PS["Data.Date.Component"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Time = $PS["Data.Time"];

  // | Creates a `DateTime` value from an `Instant`.
  var toDateTime = (function () {
      var mkDateTime = function (y) {
          return function (mo) {
              return function (d) {
                  return function (h) {
                      return function (mi) {
                          return function (s) {
                              return function (ms) {
                                  return new Data_DateTime.DateTime(Data_Date.canonicalDate(y)(Data_Maybe.fromJust()(Data_Enum.toEnum(Data_Date_Component.boundedEnumMonth)(mo)))(d), new Data_Time.Time(h, mi, s, ms));
                              };
                          };
                      };
                  };
              };
          };
      };
      return $foreign.toDateTimeImpl(mkDateTime);
  })();
  exports["toDateTime"] = toDateTime;
})(PS);
(function(exports) {
  "use strict";

  exports.intDegree = function (x) {
    return Math.min(Math.abs(x), 2147483647);
  };

  // See the Euclidean definition in
  // https://en.m.wikipedia.org/wiki/Modulo_operation.
  exports.intDiv = function (x) {
    return function (y) {
      if (y === 0) return 0;
      return y > 0 ? Math.floor(x / y) : -Math.floor(x / -y);
    };
  };

  exports.intMod = function (x) {
    return function (y) {
      if (y === 0) return 0;
      var yy = Math.abs(y);
      return ((x % yy) + yy) % yy;
    };
  };
})(PS["Data.EuclideanRing"] = PS["Data.EuclideanRing"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.EuclideanRing"] = $PS["Data.EuclideanRing"] || {};
  var exports = $PS["Data.EuclideanRing"];
  var $foreign = $PS["Data.EuclideanRing"];
  var Data_CommutativeRing = $PS["Data.CommutativeRing"];  

  // | The `EuclideanRing` class is for commutative rings that support division.
  // | The mathematical structure this class is based on is sometimes also called
  // | a *Euclidean domain*.
  // |
  // | Instances must satisfy the following laws in addition to the `Ring`
  // | laws:
  // |
  // | - Integral domain: `one /= zero`, and if `a` and `b` are both nonzero then
  // |   so is their product `a * b`
  // | - Euclidean function `degree`:
  // |   - Nonnegativity: For all nonzero `a`, `degree a >= 0`
  // |   - Quotient/remainder: For all `a` and `b`, where `b` is nonzero,
  // |     let `q = a / b` and ``r = a `mod` b``; then `a = q*b + r`, and also
  // |     either `r = zero` or `degree r < degree b`
  // | - Submultiplicative euclidean function:
  // |   - For all nonzero `a` and `b`, `degree a <= degree (a * b)`
  // |
  // | The behaviour of division by `zero` is unconstrained by these laws,
  // | meaning that individual instances are free to choose how to behave in this
  // | case. Similarly, there are no restrictions on what the result of
  // | `degree zero` is; it doesn't make sense to ask for `degree zero` in the
  // | same way that it doesn't make sense to divide by `zero`, so again,
  // | individual instances may choose how to handle this case.
  // |
  // | For any `EuclideanRing` which is also a `Field`, one valid choice
  // | for `degree` is simply `const 1`. In fact, unless there's a specific
  // | reason not to, `Field` types should normally use this definition of
  // | `degree`.
  // |
  // | The `EuclideanRing Int` instance is one of the most commonly used
  // | `EuclideanRing` instances and deserves a little more discussion. In
  // | particular, there are a few different sensible law-abiding implementations
  // | to choose from, with slightly different behaviour in the presence of
  // | negative dividends or divisors. The most common definitions are "truncating"
  // | division, where the result of `a / b` is rounded towards 0, and "Knuthian"
  // | or "flooring" division, where the result of `a / b` is rounded towards
  // | negative infinity. A slightly less common, but arguably more useful, option
  // | is "Euclidean" division, which is defined so as to ensure that ``a `mod` b``
  // | is always nonnegative. With Euclidean division, `a / b` rounds towards
  // | negative infinity if the divisor is positive, and towards positive infinity
  // | if the divisor is negative. Note that all three definitions are identical if
  // | we restrict our attention to nonnegative dividends and divisors.
  // |
  // | In versions 1.x, 2.x, and 3.x of the Prelude, the `EuclideanRing Int`
  // | instance used truncating division. As of 4.x, the `EuclideanRing Int`
  // | instance uses Euclidean division. Additional functions `quot` and `rem` are
  // | supplied if truncating division is desired.
  var EuclideanRing = function (CommutativeRing0, degree, div, mod) {
      this.CommutativeRing0 = CommutativeRing0;
      this.degree = degree;
      this.div = div;
      this.mod = mod;
  };
  var mod = function (dict) {
      return dict.mod;
  }; 
  var euclideanRingInt = new EuclideanRing(function () {
      return Data_CommutativeRing.commutativeRingInt;
  }, $foreign.intDegree, $foreign.intDiv, $foreign.intMod);
  var div = function (dict) {
      return dict.div;
  };
  var degree = function (dict) {
      return dict.degree;
  };
  exports["EuclideanRing"] = EuclideanRing;
  exports["degree"] = degree;
  exports["div"] = div;
  exports["mod"] = mod;
  exports["euclideanRingInt"] = euclideanRingInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines a type of _strict_ linked lists, and associated helper
  // | functions and type class instances.
  // |
  // | _Note_: Depending on your use-case, you may prefer to use
  // | `Data.Sequence` instead, which might give better performance for certain
  // | use cases. This module is an improvement over `Data.Array` when working with
  // | immutable lists of data in a purely-functional setting, but does not have
  // | good random-access performance.
  "use strict";
  $PS["Data.List"] = $PS["Data.List"] || {};
  var exports = $PS["Data.List"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                                  

  // | Break a list into its first element, and the remaining elements,
  // | or `Nothing` if the list is empty.
  // |
  // | Running time: `O(1)`
  var uncons = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just({
              head: v.value0,
              tail: v.value1
          });
      };
      throw new Error("Failed pattern match at Data.List (line 259, column 1 - line 259, column 66): " + [ v.constructor.name ]);
  };

  // | Convert a list into any unfoldable structure.
  // |
  // | Running time: `O(n)`
  var toUnfoldable = function (dictUnfoldable) {
      return Data_Unfoldable.unfoldr(dictUnfoldable)(function (xs) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function (rec) {
              return new Data_Tuple.Tuple(rec.head, rec.tail);
          })(uncons(xs));
      });
  };

  // | Get all but the first element of a list, or `Nothing` if the list is empty.
  // |
  // | Running time: `O(1)`
  var tail = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value1);
      };
      throw new Error("Failed pattern match at Data.List (line 245, column 1 - line 245, column 43): " + [ v.constructor.name ]);
  };

  //------------------------------------------------------------------------------
  // List size -------------------------------------------------------------------
  //------------------------------------------------------------------------------
  // | Test whether a list is empty.
  // |
  // | Running time: `O(1)`
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };

  // | Attempt a computation multiple times, requiring at least one success.
  // |
  // | The `Lazy` constraint is used to generate the result lazily, to ensure
  // | termination.
  var some = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Apply.apply((dictAlternative.Applicative0()).Apply0())(Data_Functor.map(((dictAlternative.Plus1()).Alt0()).Functor0())(Data_List_Types.Cons.create)(v))(Control_Lazy.defer(dictLazy)(function (v1) {
                  return many(dictAlternative)(dictLazy)(v);
              }));
          };
      };
  };

  // | Attempt a computation multiple times, returning as many successful results
  // | as possible (possibly zero).
  // |
  // | The `Lazy` constraint is used to generate the result lazily, to ensure
  // | termination.
  var many = function (dictAlternative) {
      return function (dictLazy) {
          return function (v) {
              return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(some(dictAlternative)(dictLazy)(v))(Control_Applicative.pure(dictAlternative.Applicative0())(Data_List_Types.Nil.value));
          };
      };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------
  // | Get the first element in a list, or `Nothing` if the list is empty.
  // |
  // | Running time: `O(1)`.
  var head = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof Data_List_Types.Cons) {
          return new Data_Maybe.Just(v.value0);
      };
      throw new Error("Failed pattern match at Data.List (line 230, column 1 - line 230, column 22): " + [ v.constructor.name ]);
  };

  // | Construct a list from a foldable structure.
  // |
  // | Running time: `O(n)`
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["toUnfoldable"] = toUnfoldable;
  exports["fromFoldable"] = fromFoldable;
  exports["some"] = some;
  exports["many"] = many;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["tail"] = tail;
  exports["uncons"] = uncons;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.List.NonEmpty"] = $PS["Data.List.NonEmpty"] || {};
  var exports = $PS["Data.List.NonEmpty"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_NonEmpty = $PS["Data.NonEmpty"];
  var singleton = function ($165) {
      return Data_List_Types.NonEmptyList(Data_NonEmpty.singleton(Data_List_Types.plusList)($165));
  };
  exports["singleton"] = singleton;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines a type of maps as balanced 2-3 trees, based on
  // | <http://www.cs.princeton.edu/~dpw/courses/cos326-12/ass/2-3-trees.pdf>
  "use strict";
  $PS["Data.Map.Internal"] = $PS["Data.Map.Internal"] || {};
  var exports = $PS["Data.Map.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                

  // | `Map k v` represents maps from keys of type `k` to values of type `v`.
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();

  // | `Map k v` represents maps from keys of type `k` to values of type `v`.
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();

  // | `Map k v` represents maps from keys of type `k` to values of type `v`.
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();

  // | Create a map with one key/value pair
  var singleton = function (k) {
      return function (v) {
          return new Two(Leaf.value, k, v, Leaf.value);
      };
  };

  // | Convert a map to an unfoldable structure of key/value pairs where the keys are in ascending order
  var toUnfoldable = function (dictUnfoldable) {
      return function (m) {
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof Leaf) {
                          $copy_v = v.value1;
                          return;
                      };
                      if (v.value0 instanceof Two && (v.value0.value0 instanceof Leaf && v.value0.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), v.value1));
                      };
                      if (v.value0 instanceof Two && v.value0.value0 instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Just.create(new Data_Tuple.Tuple(new Data_Tuple.Tuple(v.value0.value1, v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                      };
                      if (v.value0 instanceof Two) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, v.value1)));
                          return;
                      };
                      if (v.value0 instanceof Three) {
                          $copy_v = new Data_List_Types.Cons(v.value0.value0, new Data_List_Types.Cons(singleton(v.value0.value1)(v.value0.value2), new Data_List_Types.Cons(v.value0.value3, new Data_List_Types.Cons(singleton(v.value0.value4)(v.value0.value5), new Data_List_Types.Cons(v.value0.value6, v.value1)))));
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 577, column 18 - line 586, column 71): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 576, column 3 - line 576, column 19): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return Data_Unfoldable.unfoldr(dictUnfoldable)(go)(new Data_List_Types.Cons(m, Data_List_Types.Nil.value));
      };
  };

  // Internal use
  var toAscArray = toUnfoldable(Data_Unfoldable.unfoldableArray);
  var showMap = function (dictShow) {
      return function (dictShow1) {
          return new Data_Show.Show(function (m) {
              return "(fromFoldable " + (Data_Show.show(Data_Show.showArray(Data_Tuple.showTuple(dictShow)(dictShow1)))(toAscArray(m)) + ")");
          });
      };
  };

  // | Look up a value for the specified key
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 200, column 5 - line 200, column 22): " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };

  // | Get a list of the keys contained in a map
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map.Internal (line 606, column 1 - line 606, column 38): " + [ v.constructor.name ]);
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map.Internal (line 96, column 1 - line 96, column 39): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 418, column 3 - line 423, column 88): " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 415, column 1 - line 415, column 80): " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };

  // | Insert or replace a key/value pair in a map
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map.Internal (line 454, column 5 - line 459, column 108): " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 451, column 3 - line 451, column 56): " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 434, column 3 - line 434, column 55): " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };

  // | Delete a key and its corresponding value from a map, returning the value
  // | as well as the subsequent map.
  var pop = function (dictOrd) {
      return function (k) {
          var up = function ($copy_ctxs) {
              return function ($copy_tree) {
                  var $tco_var_ctxs = $copy_ctxs;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctxs, tree) {
                      if (ctxs instanceof Data_List_Types.Nil) {
                          $tco_done = true;
                          return tree;
                      };
                      if (ctxs instanceof Data_List_Types.Cons) {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              $tco_var_ctxs = ctxs.value1;
                              $copy_tree = new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree);
                              return;
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              $tco_done = true;
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map.Internal (line 511, column 9 - line 528, column 136): " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 508, column 5 - line 528, column 136): " + [ ctxs.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctxs, $copy_tree);
                  };
                  return $tco_result;
              };
          };
          var removeMaxNode = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          $tco_done = true;
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          $tco_done = true;
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 540, column 5 - line 544, column 107): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          var maxNode = function ($copy_m) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(m) {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      $copy_m = m.value3;
                      return;
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      $tco_done = true;
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      $copy_m = m.value6;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 531, column 33 - line 535, column 45): " + [ m.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_m);
              };
              return $tco_result;
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map.Internal (line 481, column 34 - line 504, column 80): " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };

  // | An empty map
  var empty = Leaf.value;

  // | Delete a key and its corresponding value from a map.
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  }; 

  // | Insert the value, delete a value, or update a value for a key in a map
  var alter = function (dictOrd) {
      return function (f) {
          return function (k) {
              return function (m) {
                  var v = f(lookup(dictOrd)(k)(m));
                  if (v instanceof Data_Maybe.Nothing) {
                      return $$delete(dictOrd)(k)(m);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return insert(dictOrd)(k)(v.value0)(m);
                  };
                  throw new Error("Failed pattern match at Data.Map.Internal (line 549, column 15 - line 551, column 25): " + [ v.constructor.name ]);
              };
          };
      };
  };

  // | Compute the union of two maps, using the specified function
  // | to combine values for duplicate keys.
  var unionWith = function (dictOrd) {
      return function (f) {
          return function (m1) {
              return function (m2) {
                  var go = function (m) {
                      return function (v) {
                          return alter(dictOrd)(function ($763) {
                              return Data_Maybe.Just.create(Data_Maybe.maybe(v.value1)(f(v.value1))($763));
                          })(v.value0)(m);
                      };
                  };
                  return Data_Foldable.foldl(Data_List_Types.foldableList)(go)(m2)(toUnfoldable(Data_List_Types.unfoldableList)(m1));
              };
          };
      };
  };

  // | Compute the union of two maps, preferring values from the first map in the case
  // | of duplicate keys
  var union = function (dictOrd) {
      return unionWith(dictOrd)(Data_Function["const"]);
  };

  // | Compute the union of a collection of maps
  var unions = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["toUnfoldable"] = toUnfoldable;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["alter"] = alter;
  exports["keys"] = keys;
  exports["union"] = union;
  exports["unionWith"] = unionWith;
  exports["unions"] = unions;
  exports["showMap"] = showMap;
  exports["functorMap"] = functorMap;
})(PS);
(function(exports) {
  "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines types and functions for working with nullable types
  // | using the FFI.
  "use strict";
  $PS["Data.Nullable"] = $PS["Data.Nullable"] || {};
  var exports = $PS["Data.Nullable"];
  var $foreign = $PS["Data.Nullable"];
  var Data_Maybe = $PS["Data.Maybe"];              

  // | Takes `Nothing` to `null`, and `Just a` to `a`.
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);

  // | Represent `null` using `Maybe a` as `Nothing`. Note that this function
  // | can violate parametricity, as it inspects the runtime representation of
  // | its argument (see the warning about the pitfall of `Nullable` above).
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Op"] = $PS["Data.Op"] || {};
  var exports = $PS["Data.Op"];
  var Data_Newtype = $PS["Data.Newtype"];                    

  // | The opposite of the function category.
  var Op = function (x) {
      return x;
  };
  var newtypeOp = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Op);
  exports["Op"] = Op;
  exports["newtypeOp"] = newtypeOp;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeToForeign = function (value) {
    return value;
  };

  exports.unsafeFromForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };

  exports.tagOf = function (value) {
    return Object.prototype.toString.call(value).slice(8, -1);
  };

  exports.isNull = function (value) {
    return value === null;
  };

  exports.isUndefined = function (value) {
    return value === undefined;
  };

  exports.isArray = Array.isArray || function (value) {
    return Object.prototype.toString.call(value) === "[object Array]";
  };
})(PS["Foreign"] = PS["Foreign"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines types and functions for working with _foreign_
  // | data.
  "use strict";
  $PS["Foreign"] = $PS["Foreign"] || {};
  var exports = $PS["Foreign"];
  var $foreign = $PS["Foreign"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List_NonEmpty = $PS["Data.List.NonEmpty"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                                        

  // | A type for foreign type errors
  var ForeignError = (function () {
      function ForeignError(value0) {
          this.value0 = value0;
      };
      ForeignError.create = function (value0) {
          return new ForeignError(value0);
      };
      return ForeignError;
  })();

  // | A type for foreign type errors
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();

  // | A type for foreign type errors
  var ErrorAtIndex = (function () {
      function ErrorAtIndex(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtIndex.create = function (value0) {
          return function (value1) {
              return new ErrorAtIndex(value0, value1);
          };
      };
      return ErrorAtIndex;
  })();

  // | A type for foreign type errors
  var ErrorAtProperty = (function () {
      function ErrorAtProperty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ErrorAtProperty.create = function (value0) {
          return function (value1) {
              return new ErrorAtProperty(value0, value1);
          };
      };
      return ErrorAtProperty;
  })();
  var showForeignError = new Data_Show.Show(function (v) {
      if (v instanceof ForeignError) {
          return "(ForeignError " + (Data_Show.show(Data_Show.showString)(v.value0) + ")");
      };
      if (v instanceof ErrorAtIndex) {
          return "(ErrorAtIndex " + (Data_Show.show(Data_Show.showInt)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof ErrorAtProperty) {
          return "(ErrorAtProperty " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(showForeignError)(v.value1) + ")")));
      };
      if (v instanceof TypeMismatch) {
          return "(TypeMismatch " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Data_Show.showString)(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at Foreign (line 63, column 1 - line 63, column 47): " + [ v.constructor.name ]);
  });
  var renderForeignError = function (v) {
      if (v instanceof ForeignError) {
          return v.value0;
      };
      if (v instanceof ErrorAtIndex) {
          return "Error at array index " + (Data_Show.show(Data_Show.showInt)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof ErrorAtProperty) {
          return "Error at property " + (Data_Show.show(Data_Show.showString)(v.value0) + (": " + renderForeignError(v.value1)));
      };
      if (v instanceof TypeMismatch) {
          return "Type mismatch: expected " + (v.value0 + (", found " + v.value1));
      };
      throw new Error("Failed pattern match at Foreign (line 72, column 1 - line 72, column 45): " + [ v.constructor.name ]);
  };

  // | Throws a failure error in `F`.
  var fail = function ($107) {
      return Control_Monad_Error_Class.throwError(Control_Monad_Except_Trans.monadThrowExceptT(Data_Identity.monadIdentity))(Data_List_NonEmpty.singleton($107));
  };

  // | Attempt to coerce a foreign value to an array.
  var readArray = function (value) {
      if ($foreign.isArray(value)) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
      };
      if (Data_Boolean.otherwise) {
          return fail(new TypeMismatch("array", $foreign.tagOf(value)));
      };
      throw new Error("Failed pattern match at Foreign (line 147, column 1 - line 147, column 42): " + [ value.constructor.name ]);
  };

  // | Unsafely coerce a `Foreign` value when the value has a particular `tagOf`
  // | value.
  var unsafeReadTagged = function (tag) {
      return function (value) {
          if ($foreign.tagOf(value) === tag) {
              return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))($foreign.unsafeFromForeign(value));
          };
          if (Data_Boolean.otherwise) {
              return fail(new TypeMismatch(tag, $foreign.tagOf(value)));
          };
          throw new Error("Failed pattern match at Foreign (line 106, column 1 - line 106, column 55): " + [ tag.constructor.name, value.constructor.name ]);
      };
  };                                            

  // | Attempt to coerce a foreign value to a `Number`.
  var readNumber = unsafeReadTagged("Number");

  // | Attempt to coerce a foreign value to an `Int`.
  var readInt = function (value) {
      var error = Data_Either.Left.create(Data_List_NonEmpty.singleton(new TypeMismatch("Int", $foreign.tagOf(value))));
      var fromNumber = function ($108) {
          return Data_Maybe.maybe(error)(Control_Applicative.pure(Data_Either.applicativeEither))(Data_Int.fromNumber($108));
      };
      return Control_Monad_Except.mapExcept(Data_Either.either(Data_Function["const"](error))(fromNumber))(readNumber(value));
  };

  // | Attempt to coerce a foreign value to a `String`.
  var readString = unsafeReadTagged("String");
  exports["ForeignError"] = ForeignError;
  exports["TypeMismatch"] = TypeMismatch;
  exports["ErrorAtIndex"] = ErrorAtIndex;
  exports["ErrorAtProperty"] = ErrorAtProperty;
  exports["renderForeignError"] = renderForeignError;
  exports["unsafeReadTagged"] = unsafeReadTagged;
  exports["readString"] = readString;
  exports["readNumber"] = readNumber;
  exports["readInt"] = readInt;
  exports["readArray"] = readArray;
  exports["fail"] = fail;
  exports["showForeignError"] = showForeignError;
  exports["unsafeToForeign"] = $foreign.unsafeToForeign;
  exports["unsafeFromForeign"] = $foreign.unsafeFromForeign;
  exports["typeOf"] = $foreign.typeOf;
  exports["tagOf"] = $foreign.tagOf;
  exports["isNull"] = $foreign.isNull;
  exports["isUndefined"] = $foreign.isUndefined;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module provides a way of dealing with the JS idiom of options
  // | objects in PureScript, by giving you the tools to provide a reasonably
  // | comfortable typed layer on top of JavaScript APIs which make use of this
  // | idiom.
  // |
  // | Many JavaScript APIs include functions which take an object argument,
  // | where the object's properties come from a fixed set of optional
  // | configuration values. For example, the `createWriteStream` function from
  // | the Node.js `fs` module may contain properties such as:
  // |
  // | - `flags`, which should be a `String`, such as `"w"`, `"rw"`, or `"r+"`,
  // | - `defaultEncoding`, which should be a `String` representing an
  // |   encoding, such as `"utf8"`,
  // |
  // | and so on.
  // |
  // | PureScript's record types can be a little awkward for this, since it is
  // | usually the case that any subset of these properties can be specified;
  // | however, a value of  type `{ flags :: String, defaultEncoding :: String, [...] }`
  // | must include every property listed, even if you only want to specify
  // | one or two properties.
  // |
  // | Using this module, you could wrap `fs.createWriteStream` as follows:
  // |
  // | First, create a phantom type used for the options object:
  // |
  // | ```purescript
  // | data CreateWriteStreamOptions
  // | ```
  // |
  // | Then, create `Option` values for each of the options:
  // |
  // | ```purescript
  // | flags :: Option CreateWriteStreamOptions String
  // | flags = opt "flags"
  // |
  // | defaultEncoding :: Option CreateWriteStreamOptions String
  // | defaultEncoding = opt "defaultEncoding"
  // |
  // | -- and so on
  // | ```
  // |
  // | Import the function you're wrapping using the FFI, using the `Foreign`
  // | type for the options object:
  // |
  // | ```purescript
  // | -- don't export this!
  // | foreign import createWriteStreamImpl :: forall eff. FilePath -> Foreign -> Effect Unit
  // | ```
  // |
  // | Finally, in the function you are going to export, take an `Options` value
  // | for the options argument, and use the `options` function provided by this
  // | library to convert it into a `Foreign` value, which will then have a
  // | suitable representation for passing to the JavaScript API.
  // |
  // | ```
  // | createWriteStream :: forall eff. FilePath -> Options CreateWriteStreamOptions -> Effect Unit
  // | createWriteStream path opts = createWriteStreamImpl path (options opts)
  // | ```
  // |
  // | Then, users of your API can create `Options` values using the `:=`
  // | operator to assign values for the options they want to configure, and the
  // | `Monoid Options` instance to combine them. For example, as a user of this
  // | API, you might write:
  // |
  // | ```purescript
  // | FS.createWriteStream "file.txt" $
  // |    defaultEncoding := "utf8" <>
  // |    flags := "rw"
  // | ```
  // |
  // | You can also use more specific types for more type safety. For example,
  // | it would be safer to use the existing `FileFlags` and `Encoding` types
  // | already provided by the `node-fs` library. However, we cannot use them
  // | directly because they will have the wrong runtime representation. This is
  // | where the `Contravariant` instance for `Option` comes in; it can be used
  // | to transform an option's value to give it a suitable runtime
  // | representation based on what the JS API is expecting. For example:
  // |
  // | ```purescript
  // | flags :: Option CreateWriteStreamOptions FileFlags
  // | flags = cmap fileFlagsToNode (opt "flags")
  // | ```
  // |
  // | Note that `fileFlagsToNode` takes a `FileFlags` and returns a `String`
  // | suitable for passing to a Node.js API.
  "use strict";
  $PS["Data.Options"] = $PS["Data.Options"] || {};
  var exports = $PS["Data.Options"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Op = $PS["Data.Op"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Foreign = $PS["Foreign"];
  var Foreign_Object = $PS["Foreign.Object"];          

  // | Convert an `Options` value into a JavaScript object, suitable for passing
  // | to JavaScript APIs.
  var options = function (v) {
      return Foreign.unsafeToForeign(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(v));
  };          
  var monoidOptions = Data_Monoid.monoidArray;

  // | The default method for turning a string property key into an
  // | `Option`. This function simply calls `unsafeToForeign` on the value. If
  // | you need some other behaviour, you can write your own function to replace
  // | this one, and construct an `Option` yourself.
  var defaultToOptions = function (k) {
      return function (v) {
          return [ new Data_Tuple.Tuple(k, Foreign.unsafeToForeign(v)) ];
      };
  };

  // | The default way of creating `Option` values. Constructs an `Option` with
  // | the given key, which passes the given value through unchanged.
  var opt = function ($7) {
      return Data_Op.Op(defaultToOptions($7));
  };

  // | Associates a value with a specific option.
  var assoc = Data_Newtype.unwrap(Data_Op.newtypeOp);
  exports["options"] = options;
  exports["assoc"] = assoc;
  exports["opt"] = opt;
  exports["defaultToOptions"] = defaultToOptions;
  exports["monoidOptions"] = monoidOptions;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Posix.Signal"] = $PS["Data.Posix.Signal"] || {};
  var exports = $PS["Data.Posix.Signal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];                
  var SIGABRT = (function () {
      function SIGABRT() {

      };
      SIGABRT.value = new SIGABRT();
      return SIGABRT;
  })();
  var SIGALRM = (function () {
      function SIGALRM() {

      };
      SIGALRM.value = new SIGALRM();
      return SIGALRM;
  })();
  var SIGBUS = (function () {
      function SIGBUS() {

      };
      SIGBUS.value = new SIGBUS();
      return SIGBUS;
  })();
  var SIGCHLD = (function () {
      function SIGCHLD() {

      };
      SIGCHLD.value = new SIGCHLD();
      return SIGCHLD;
  })();
  var SIGCLD = (function () {
      function SIGCLD() {

      };
      SIGCLD.value = new SIGCLD();
      return SIGCLD;
  })();
  var SIGCONT = (function () {
      function SIGCONT() {

      };
      SIGCONT.value = new SIGCONT();
      return SIGCONT;
  })();
  var SIGEMT = (function () {
      function SIGEMT() {

      };
      SIGEMT.value = new SIGEMT();
      return SIGEMT;
  })();
  var SIGFPE = (function () {
      function SIGFPE() {

      };
      SIGFPE.value = new SIGFPE();
      return SIGFPE;
  })();
  var SIGHUP = (function () {
      function SIGHUP() {

      };
      SIGHUP.value = new SIGHUP();
      return SIGHUP;
  })();
  var SIGILL = (function () {
      function SIGILL() {

      };
      SIGILL.value = new SIGILL();
      return SIGILL;
  })();
  var SIGINFO = (function () {
      function SIGINFO() {

      };
      SIGINFO.value = new SIGINFO();
      return SIGINFO;
  })();
  var SIGINT = (function () {
      function SIGINT() {

      };
      SIGINT.value = new SIGINT();
      return SIGINT;
  })();
  var SIGIO = (function () {
      function SIGIO() {

      };
      SIGIO.value = new SIGIO();
      return SIGIO;
  })();
  var SIGIOT = (function () {
      function SIGIOT() {

      };
      SIGIOT.value = new SIGIOT();
      return SIGIOT;
  })();
  var SIGKILL = (function () {
      function SIGKILL() {

      };
      SIGKILL.value = new SIGKILL();
      return SIGKILL;
  })();
  var SIGLOST = (function () {
      function SIGLOST() {

      };
      SIGLOST.value = new SIGLOST();
      return SIGLOST;
  })();
  var SIGPIPE = (function () {
      function SIGPIPE() {

      };
      SIGPIPE.value = new SIGPIPE();
      return SIGPIPE;
  })();
  var SIGPOLL = (function () {
      function SIGPOLL() {

      };
      SIGPOLL.value = new SIGPOLL();
      return SIGPOLL;
  })();
  var SIGPROF = (function () {
      function SIGPROF() {

      };
      SIGPROF.value = new SIGPROF();
      return SIGPROF;
  })();
  var SIGPWR = (function () {
      function SIGPWR() {

      };
      SIGPWR.value = new SIGPWR();
      return SIGPWR;
  })();
  var SIGQUIT = (function () {
      function SIGQUIT() {

      };
      SIGQUIT.value = new SIGQUIT();
      return SIGQUIT;
  })();
  var SIGSEGV = (function () {
      function SIGSEGV() {

      };
      SIGSEGV.value = new SIGSEGV();
      return SIGSEGV;
  })();
  var SIGSTKFLT = (function () {
      function SIGSTKFLT() {

      };
      SIGSTKFLT.value = new SIGSTKFLT();
      return SIGSTKFLT;
  })();
  var SIGSTOP = (function () {
      function SIGSTOP() {

      };
      SIGSTOP.value = new SIGSTOP();
      return SIGSTOP;
  })();
  var SIGSYS = (function () {
      function SIGSYS() {

      };
      SIGSYS.value = new SIGSYS();
      return SIGSYS;
  })();
  var SIGTERM = (function () {
      function SIGTERM() {

      };
      SIGTERM.value = new SIGTERM();
      return SIGTERM;
  })();
  var SIGTRAP = (function () {
      function SIGTRAP() {

      };
      SIGTRAP.value = new SIGTRAP();
      return SIGTRAP;
  })();
  var SIGTSTP = (function () {
      function SIGTSTP() {

      };
      SIGTSTP.value = new SIGTSTP();
      return SIGTSTP;
  })();
  var SIGTTIN = (function () {
      function SIGTTIN() {

      };
      SIGTTIN.value = new SIGTTIN();
      return SIGTTIN;
  })();
  var SIGTTOU = (function () {
      function SIGTTOU() {

      };
      SIGTTOU.value = new SIGTTOU();
      return SIGTTOU;
  })();
  var SIGUNUSED = (function () {
      function SIGUNUSED() {

      };
      SIGUNUSED.value = new SIGUNUSED();
      return SIGUNUSED;
  })();
  var SIGURG = (function () {
      function SIGURG() {

      };
      SIGURG.value = new SIGURG();
      return SIGURG;
  })();
  var SIGUSR1 = (function () {
      function SIGUSR1() {

      };
      SIGUSR1.value = new SIGUSR1();
      return SIGUSR1;
  })();
  var SIGUSR2 = (function () {
      function SIGUSR2() {

      };
      SIGUSR2.value = new SIGUSR2();
      return SIGUSR2;
  })();
  var SIGVTALRM = (function () {
      function SIGVTALRM() {

      };
      SIGVTALRM.value = new SIGVTALRM();
      return SIGVTALRM;
  })();
  var SIGWINCH = (function () {
      function SIGWINCH() {

      };
      SIGWINCH.value = new SIGWINCH();
      return SIGWINCH;
  })();
  var SIGXCPU = (function () {
      function SIGXCPU() {

      };
      SIGXCPU.value = new SIGXCPU();
      return SIGXCPU;
  })();
  var SIGXFSZ = (function () {
      function SIGXFSZ() {

      };
      SIGXFSZ.value = new SIGXFSZ();
      return SIGXFSZ;
  })();

  // | Convert a Signal to a String. Suitable for Node.js APIs.
  var toString = function (s) {
      if (s instanceof SIGABRT) {
          return "SIGABRT";
      };
      if (s instanceof SIGALRM) {
          return "SIGALRM";
      };
      if (s instanceof SIGBUS) {
          return "SIGBUS";
      };
      if (s instanceof SIGCHLD) {
          return "SIGCHLD";
      };
      if (s instanceof SIGCLD) {
          return "SIGCLD";
      };
      if (s instanceof SIGCONT) {
          return "SIGCONT";
      };
      if (s instanceof SIGEMT) {
          return "SIGEMT";
      };
      if (s instanceof SIGFPE) {
          return "SIGFPE";
      };
      if (s instanceof SIGHUP) {
          return "SIGHUP";
      };
      if (s instanceof SIGILL) {
          return "SIGILL";
      };
      if (s instanceof SIGINFO) {
          return "SIGINFO";
      };
      if (s instanceof SIGINT) {
          return "SIGINT";
      };
      if (s instanceof SIGIO) {
          return "SIGIO";
      };
      if (s instanceof SIGIOT) {
          return "SIGIOT";
      };
      if (s instanceof SIGKILL) {
          return "SIGKILL";
      };
      if (s instanceof SIGLOST) {
          return "SIGLOST";
      };
      if (s instanceof SIGPIPE) {
          return "SIGPIPE";
      };
      if (s instanceof SIGPOLL) {
          return "SIGPOLL";
      };
      if (s instanceof SIGPROF) {
          return "SIGPROF";
      };
      if (s instanceof SIGPWR) {
          return "SIGPWR";
      };
      if (s instanceof SIGQUIT) {
          return "SIGQUIT";
      };
      if (s instanceof SIGSEGV) {
          return "SIGSEGV";
      };
      if (s instanceof SIGSTKFLT) {
          return "SIGSTKFLT";
      };
      if (s instanceof SIGSTOP) {
          return "SIGSTOP";
      };
      if (s instanceof SIGSYS) {
          return "SIGSYS";
      };
      if (s instanceof SIGTERM) {
          return "SIGTERM";
      };
      if (s instanceof SIGTRAP) {
          return "SIGTRAP";
      };
      if (s instanceof SIGTSTP) {
          return "SIGTSTP";
      };
      if (s instanceof SIGTTIN) {
          return "SIGTTIN";
      };
      if (s instanceof SIGTTOU) {
          return "SIGTTOU";
      };
      if (s instanceof SIGUNUSED) {
          return "SIGUNUSED";
      };
      if (s instanceof SIGURG) {
          return "SIGURG";
      };
      if (s instanceof SIGUSR1) {
          return "SIGUSR1";
      };
      if (s instanceof SIGUSR2) {
          return "SIGUSR2";
      };
      if (s instanceof SIGVTALRM) {
          return "SIGVTALRM";
      };
      if (s instanceof SIGWINCH) {
          return "SIGWINCH";
      };
      if (s instanceof SIGXCPU) {
          return "SIGXCPU";
      };
      if (s instanceof SIGXFSZ) {
          return "SIGXFSZ";
      };
      throw new Error("Failed pattern match at Data.Posix.Signal (line 48, column 14 - line 88, column 1): " + [ s.constructor.name ]);
  };
  var showSignal = new Data_Show.Show(toString);

  // | Try to parse a Signal from a String. Suitable for use with Node.js APIs.
  // | This function is a partial inverse of `toString`; in code, that means, for
  // | all `sig :: Signal`:
  // |
  // |   `fromString (toString sig) == Just sig`
  // |
  var fromString = function (s) {
      if (s === "SIGABRT") {
          return new Data_Maybe.Just(SIGABRT.value);
      };
      if (s === "SIGALRM") {
          return new Data_Maybe.Just(SIGALRM.value);
      };
      if (s === "SIGBUS") {
          return new Data_Maybe.Just(SIGBUS.value);
      };
      if (s === "SIGCHLD") {
          return new Data_Maybe.Just(SIGCHLD.value);
      };
      if (s === "SIGCLD") {
          return new Data_Maybe.Just(SIGCLD.value);
      };
      if (s === "SIGCONT") {
          return new Data_Maybe.Just(SIGCONT.value);
      };
      if (s === "SIGEMT") {
          return new Data_Maybe.Just(SIGEMT.value);
      };
      if (s === "SIGFPE") {
          return new Data_Maybe.Just(SIGFPE.value);
      };
      if (s === "SIGHUP") {
          return new Data_Maybe.Just(SIGHUP.value);
      };
      if (s === "SIGILL") {
          return new Data_Maybe.Just(SIGILL.value);
      };
      if (s === "SIGINFO") {
          return new Data_Maybe.Just(SIGINFO.value);
      };
      if (s === "SIGINT") {
          return new Data_Maybe.Just(SIGINT.value);
      };
      if (s === "SIGIO") {
          return new Data_Maybe.Just(SIGIO.value);
      };
      if (s === "SIGIOT") {
          return new Data_Maybe.Just(SIGIOT.value);
      };
      if (s === "SIGKILL") {
          return new Data_Maybe.Just(SIGKILL.value);
      };
      if (s === "SIGLOST") {
          return new Data_Maybe.Just(SIGLOST.value);
      };
      if (s === "SIGPIPE") {
          return new Data_Maybe.Just(SIGPIPE.value);
      };
      if (s === "SIGPOLL") {
          return new Data_Maybe.Just(SIGPOLL.value);
      };
      if (s === "SIGPROF") {
          return new Data_Maybe.Just(SIGPROF.value);
      };
      if (s === "SIGPWR") {
          return new Data_Maybe.Just(SIGPWR.value);
      };
      if (s === "SIGQUIT") {
          return new Data_Maybe.Just(SIGQUIT.value);
      };
      if (s === "SIGSEGV") {
          return new Data_Maybe.Just(SIGSEGV.value);
      };
      if (s === "SIGSTKFLT") {
          return new Data_Maybe.Just(SIGSTKFLT.value);
      };
      if (s === "SIGSTOP") {
          return new Data_Maybe.Just(SIGSTOP.value);
      };
      if (s === "SIGSYS") {
          return new Data_Maybe.Just(SIGSYS.value);
      };
      if (s === "SIGTERM") {
          return new Data_Maybe.Just(SIGTERM.value);
      };
      if (s === "SIGTRAP") {
          return new Data_Maybe.Just(SIGTRAP.value);
      };
      if (s === "SIGTSTP") {
          return new Data_Maybe.Just(SIGTSTP.value);
      };
      if (s === "SIGTTIN") {
          return new Data_Maybe.Just(SIGTTIN.value);
      };
      if (s === "SIGTTOU") {
          return new Data_Maybe.Just(SIGTTOU.value);
      };
      if (s === "SIGUNUSED") {
          return new Data_Maybe.Just(SIGUNUSED.value);
      };
      if (s === "SIGURG") {
          return new Data_Maybe.Just(SIGURG.value);
      };
      if (s === "SIGUSR1") {
          return new Data_Maybe.Just(SIGUSR1.value);
      };
      if (s === "SIGUSR2") {
          return new Data_Maybe.Just(SIGUSR2.value);
      };
      if (s === "SIGVTALRM") {
          return new Data_Maybe.Just(SIGVTALRM.value);
      };
      if (s === "SIGWINCH") {
          return new Data_Maybe.Just(SIGWINCH.value);
      };
      if (s === "SIGXCPU") {
          return new Data_Maybe.Just(SIGXCPU.value);
      };
      if (s === "SIGXFSZ") {
          return new Data_Maybe.Just(SIGXFSZ.value);
      };
      return Data_Maybe.Nothing.value;
  };
  exports["SIGABRT"] = SIGABRT;
  exports["SIGALRM"] = SIGALRM;
  exports["SIGBUS"] = SIGBUS;
  exports["SIGCHLD"] = SIGCHLD;
  exports["SIGCLD"] = SIGCLD;
  exports["SIGCONT"] = SIGCONT;
  exports["SIGEMT"] = SIGEMT;
  exports["SIGFPE"] = SIGFPE;
  exports["SIGHUP"] = SIGHUP;
  exports["SIGILL"] = SIGILL;
  exports["SIGINFO"] = SIGINFO;
  exports["SIGINT"] = SIGINT;
  exports["SIGIO"] = SIGIO;
  exports["SIGIOT"] = SIGIOT;
  exports["SIGKILL"] = SIGKILL;
  exports["SIGLOST"] = SIGLOST;
  exports["SIGPIPE"] = SIGPIPE;
  exports["SIGPOLL"] = SIGPOLL;
  exports["SIGPROF"] = SIGPROF;
  exports["SIGPWR"] = SIGPWR;
  exports["SIGQUIT"] = SIGQUIT;
  exports["SIGSEGV"] = SIGSEGV;
  exports["SIGSTKFLT"] = SIGSTKFLT;
  exports["SIGSTOP"] = SIGSTOP;
  exports["SIGSYS"] = SIGSYS;
  exports["SIGTERM"] = SIGTERM;
  exports["SIGTRAP"] = SIGTRAP;
  exports["SIGTSTP"] = SIGTSTP;
  exports["SIGTTIN"] = SIGTTIN;
  exports["SIGTTOU"] = SIGTTOU;
  exports["SIGUNUSED"] = SIGUNUSED;
  exports["SIGURG"] = SIGURG;
  exports["SIGUSR1"] = SIGUSR1;
  exports["SIGUSR2"] = SIGUSR2;
  exports["SIGVTALRM"] = SIGVTALRM;
  exports["SIGWINCH"] = SIGWINCH;
  exports["SIGXCPU"] = SIGXCPU;
  exports["SIGXFSZ"] = SIGXFSZ;
  exports["toString"] = toString;
  exports["fromString"] = fromString;
  exports["showSignal"] = showSignal;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines a type of sets as balanced 2-3 trees, based on
  // | <http://www.cs.princeton.edu/~dpw/courses/cos326-12/ass/2-3-trees.pdf>
  // |
  // | Qualified import is encouraged, so as to avoid name clashes with other modules.
  "use strict";
  $PS["Data.Set"] = $PS["Data.Set"] || {};
  var exports = $PS["Data.Set"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List = $PS["Data.List"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Unit = $PS["Data.Unit"];

  // | Form the union of two sets
  // |
  // | Running time: `O(n * log(m))`
  var union = function (dictOrd) {
      return function (v) {
          return function (v1) {
              return Data_Map_Internal.union(dictOrd)(v)(v1);
          };
      };
  };
  var toList = function (v) {
      return Data_Map_Internal.keys(v);
  };

  // | Convert a set to an unfoldable structure.
  var toUnfoldable = function (dictUnfoldable) {
      return function ($64) {
          return Data_List.toUnfoldable(dictUnfoldable)(toList($64));
      };
  };

  // | Create a set with one element
  var singleton = function (a) {
      return Data_Map_Internal.singleton(a)(Data_Unit.unit);
  };

  // | Insert a value into a set
  var insert = function (dictOrd) {
      return function (a) {
          return function (v) {
              return Data_Map_Internal.insert(dictOrd)(a)(Data_Unit.unit)(v);
          };
      };
  }; 

  // | An empty set
  var empty = Data_Map_Internal.empty;

  // | Create a set from a foldable structure.
  var fromFoldable = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (a) {
                  return insert(dictOrd)(a)(m);
              };
          })(empty);
      };
  };

  // | Form the union of a collection of sets
  var unions = function (dictFoldable) {
      return function (dictOrd) {
          return Data_Foldable.foldl(dictFoldable)(union(dictOrd))(empty);
      };
  };
  exports["fromFoldable"] = fromFoldable;
  exports["toUnfoldable"] = toUnfoldable;
  exports["empty"] = empty;
  exports["singleton"] = singleton;
  exports["insert"] = insert;
  exports["union"] = union;
  exports["unions"] = unions;
})(PS);
(function(exports) {
  "use strict";
  /* global Symbol */

  var hasArrayFrom = typeof Array.from === "function";
  var hasStringIterator =
    typeof Symbol !== "undefined" &&
    Symbol != null &&
    typeof Symbol.iterator !== "undefined" &&
    typeof String.prototype[Symbol.iterator] === "function";
  var hasFromCodePoint = typeof String.prototype.fromCodePoint === "function";
  var hasCodePointAt = typeof String.prototype.codePointAt === "function";

  exports._unsafeCodePointAt0 = function (fallback) {
    return hasCodePointAt
      ? function (str) { return str.codePointAt(0); }
      : fallback;
  };

  exports._countPrefix = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasStringIterator) {
        return function (pred) {
          return function (str) {
            var iter = str[Symbol.iterator]();
            for (var cpCount = 0; ; ++cpCount) {
              var o = iter.next();
              if (o.done) return cpCount;
              var cp = unsafeCodePointAt0(o.value);
              if (!pred(cp)) return cpCount;
            }
          };
        };
      }
      return fallback;
    };
  };

  exports._singleton = function (fallback) {
    return hasFromCodePoint ? String.fromCodePoint : fallback;
  };

  exports._take = function (fallback) {
    return function (n) {
      if (hasStringIterator) {
        return function (str) {
          var accum = "";
          var iter = str[Symbol.iterator]();
          for (var i = 0; i < n; ++i) {
            var o = iter.next();
            if (o.done) return accum;
            accum += o.value;
          }
          return accum;
        };
      }
      return fallback(n);
    };
  };

  exports._toCodePointArray = function (fallback) {
    return function (unsafeCodePointAt0) {
      if (hasArrayFrom) {
        return function (str) {
          return Array.from(str, unsafeCodePointAt0);
        };
      }
      return fallback;
    };
  };
})(PS["Data.String.CodePoints"] = PS["Data.String.CodePoints"] || {});
(function(exports) {
  "use strict";

  exports.fromCharArray = function (a) {
    return a.join("");
  };

  exports.toCharArray = function (s) {
    return s.split("");
  };

  exports.singleton = function (c) {
    return c;
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.splitAt = function (i) {
    return function (s) {
      return { before: s.substring(0, i), after: s.substring(i) };
    };
  };
})(PS["Data.String.CodeUnits"] = PS["Data.String.CodeUnits"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.CodeUnits"] = $PS["Data.String.CodeUnits"] || {};
  var exports = $PS["Data.String.CodeUnits"];
  var $foreign = $PS["Data.String.CodeUnits"];
  var Data_Maybe = $PS["Data.Maybe"];

  // | If the string ends with the given suffix, return the portion of the
  // | string left after removing it, as a `Just` value. Otherwise, return
  // | `Nothing`.
  // |
  // | ```purescript
  // | stripSuffix (Pattern ".exe") "psc.exe" == Just "psc"
  // | stripSuffix (Pattern ".exe") "psc" == Nothing
  // | ```
  var stripSuffix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(str) - $foreign.length(v) | 0)(str);
          var $9 = v1.after === v;
          if ($9) {
              return new Data_Maybe.Just(v1.before);
          };
          return Data_Maybe.Nothing.value;
      };
  };

  //-----------------------------------------------------------------------------
  // `stripPrefix`, `stripSuffix`, and `contains` are CodeUnit/CodePoint agnostic
  // as they are based on patterns rather than lengths/indices, but they need to
  // be defined in here to avoid a circular module dependency
  //-----------------------------------------------------------------------------
  // | If the string starts with the given prefix, return the portion of the
  // | string left after removing it, as a Just value. Otherwise, return Nothing.
  // |
  // | ```purescript
  // | stripPrefix (Pattern "http:") "http://purescript.org" == Just "//purescript.org"
  // | stripPrefix (Pattern "http:") "https://purescript.org" == Nothing
  // | ```
  var stripPrefix = function (v) {
      return function (str) {
          var v1 = $foreign.splitAt($foreign.length(v))(str);
          var $15 = v1.before === v;
          if ($15) {
              return new Data_Maybe.Just(v1.after);
          };
          return Data_Maybe.Nothing.value;
      };
  };
  exports["stripPrefix"] = stripPrefix;
  exports["stripSuffix"] = stripSuffix;
  exports["singleton"] = $foreign.singleton;
  exports["fromCharArray"] = $foreign.fromCharArray;
  exports["toCharArray"] = $foreign.toCharArray;
  exports["length"] = $foreign.length;
  exports["drop"] = $foreign.drop;
})(PS);
(function(exports) {
  "use strict";

  exports.charAt = function (i) {
    return function (s) {
      if (i >= 0 && i < s.length) return s.charAt(i);
      throw new Error("Data.String.Unsafe.charAt: Invalid index.");
    };
  };
})(PS["Data.String.Unsafe"] = PS["Data.String.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | Unsafe string and character functions.
  "use strict";
  $PS["Data.String.Unsafe"] = $PS["Data.String.Unsafe"] || {};
  var exports = $PS["Data.String.Unsafe"];
  var $foreign = $PS["Data.String.Unsafe"];
  exports["charAt"] = $foreign.charAt;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | These functions allow PureScript strings to be treated as if they were
  // | sequences of Unicode code points instead of their true underlying
  // | implementation (sequences of UTF-16 code units). For nearly all uses of
  // | strings, these functions should be preferred over the ones in
  // | `Data.String.CodeUnits`.
  "use strict";
  $PS["Data.String.CodePoints"] = $PS["Data.String.CodePoints"] || {};
  var exports = $PS["Data.String.CodePoints"];
  var $foreign = $PS["Data.String.CodePoints"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_Enum = $PS["Data.Enum"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_EuclideanRing = $PS["Data.EuclideanRing"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Unsafe = $PS["Data.String.Unsafe"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];                

  // | CodePoint is an Int bounded between 0 and 0x10FFFF, corresponding to
  // | Unicode code points.
  var CodePoint = function (x) {
      return x;
  };
  var unsurrogate = function (lead) {
      return function (trail) {
          return (((lead - 55296 | 0) * 1024 | 0) + (trail - 56320 | 0) | 0) + 65536 | 0;
      };
  }; 
  var isTrail = function (cu) {
      return 56320 <= cu && cu <= 57343;
  };
  var isLead = function (cu) {
      return 55296 <= cu && cu <= 56319;
  };

  // | Returns a record with the first code point and the remaining code points
  // | of the string. Returns Nothing if the string is empty. Operates in
  // | constant space and time.
  // |
  // | ```purescript
  // | >>> uncons "𝐀𝐀 c 𝐀"
  // | Just { head: CodePoint 0x1D400, tail: "𝐀 c 𝐀" }
  // | >>> uncons ""
  // | Nothing
  // | ```
  // |
  var uncons = function (s) {
      var v = Data_String_CodeUnits.length(s);
      if (v === 0) {
          return Data_Maybe.Nothing.value;
      };
      if (v === 1) {
          return new Data_Maybe.Just({
              head: Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s)),
              tail: ""
          });
      };
      var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $21 = isLead(cu0) && isTrail(cu1);
      if ($21) {
          return new Data_Maybe.Just({
              head: unsurrogate(cu0)(cu1),
              tail: Data_String_CodeUnits.drop(2)(s)
          });
      };
      return new Data_Maybe.Just({
          head: cu0,
          tail: Data_String_CodeUnits.drop(1)(s)
      });
  };
  var unconsButWithTuple = function (s) {
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v) {
          return new Data_Tuple.Tuple(v.head, v.tail);
      })(uncons(s));
  };
  var toCodePointArrayFallback = function (s) {
      return Data_Unfoldable.unfoldr(Data_Unfoldable.unfoldableArray)(unconsButWithTuple)(s);
  };
  var unsafeCodePointAt0Fallback = function (s) {
      var cu0 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(0)(s));
      var $25 = isLead(cu0) && Data_String_CodeUnits.length(s) > 1;
      if ($25) {
          var cu1 = Data_Enum.fromEnum(Data_Enum.boundedEnumChar)(Data_String_Unsafe.charAt(1)(s));
          var $26 = isTrail(cu1);
          if ($26) {
              return unsurrogate(cu0)(cu1);
          };
          return cu0;
      };
      return cu0;
  };

  // WARN: this function expects the String parameter to be non-empty
  var unsafeCodePointAt0 = $foreign["_unsafeCodePointAt0"](unsafeCodePointAt0Fallback);

  // | Creates an array of code points from a string. Operates in space and time
  // | linear to the length of the string.
  // |
  // | ```purescript
  // | >>> codePointArray = toCodePointArray "b 𝐀𝐀"
  // | >>> codePointArray
  // | [CodePoint 0x62, CodePoint 0x20, CodePoint 0x1D400, CodePoint 0x1D400]
  // | >>> map singleton codePointArray
  // | ["b", " ", "𝐀", "𝐀"]
  // | ```
  // |
  var toCodePointArray = $foreign["_toCodePointArray"](toCodePointArrayFallback)(unsafeCodePointAt0);

  // | Returns the number of code points in the string. Operates in constant
  // | space and in time linear to the length of the string.
  // |
  // | ```purescript
  // | >>> length "b 𝐀𝐀 c 𝐀"
  // | 8
  // | -- compare to Data.String:
  // | >>> length "b 𝐀𝐀 c 𝐀"
  // | 11
  // | ```
  // |
  var length = function ($52) {
      return Data_Array.length(toCodePointArray($52));
  };
  var fromCharCode = function ($53) {
      return Data_String_CodeUnits.singleton(Data_Enum.toEnumWithDefaults(Data_Enum.boundedEnumChar)(Data_Bounded.bottom(Data_Bounded.boundedChar))(Data_Bounded.top(Data_Bounded.boundedChar))($53));
  };
  var singletonFallback = function (v) {
      if (v <= 65535) {
          return fromCharCode(v);
      };
      var lead = Data_EuclideanRing.div(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 55296 | 0;
      var trail = Data_EuclideanRing.mod(Data_EuclideanRing.euclideanRingInt)(v - 65536 | 0)(1024) + 56320 | 0;
      return fromCharCode(lead) + fromCharCode(trail);
  };                                                                          

  // | Creates a string containing just the given code point. Operates in
  // | constant space and time.
  // |
  // | ```purescript
  // | >>> map singleton (toEnum 0x1D400)
  // | Just "𝐀"
  // | ```
  // |
  var singleton = $foreign["_singleton"](singletonFallback);
  var takeFallback = function (n) {
      return function (v) {
          if (n < 1) {
              return "";
          };
          var v1 = uncons(v);
          if (v1 instanceof Data_Maybe.Just) {
              return singleton(v1.value0.head) + takeFallback(n - 1 | 0)(v1.value0.tail);
          };
          return v;
      };
  };

  // | Returns a string containing the given number of code points from the
  // | beginning of the given string. If the string does not have that many code
  // | points, returns the empty string. Operates in constant space and in time
  // | linear to the given number.
  // |
  // | ```purescript
  // | >>> take 3 "b 𝐀𝐀 c 𝐀"
  // | "b 𝐀"
  // | -- compare to Data.String:
  // | >>> take 3 "b 𝐀𝐀 c 𝐀"
  // | "b �"
  // | ```
  // |
  var take = $foreign["_take"](takeFallback);
  var eqCodePoint = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x === y;
      };
  });

  // | Drops the given number of code points from the beginning of the string. If
  // | the string does not have that many code points, returns the empty string.
  // | Operates in constant space and in time linear to the given number.
  // |
  // | ```purescript
  // | >>> drop 5 "𝐀𝐀 b c"
  // | "c"
  // | -- compared to Data.String:
  // | >>> drop 5 "𝐀𝐀 b c"
  // | "b c" -- because "𝐀" occupies 2 code units
  // | ```
  // |
  var drop = function (n) {
      return function (s) {
          return Data_String_CodeUnits.drop(Data_String_CodeUnits.length(take(n)(s)))(s);
      };
  };
  var countTail = function ($copy_p) {
      return function ($copy_s) {
          return function ($copy_accum) {
              var $tco_var_p = $copy_p;
              var $tco_var_s = $copy_s;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(p, s, accum) {
                  var v = uncons(s);
                  if (v instanceof Data_Maybe.Just) {
                      var $39 = p(v.value0.head);
                      if ($39) {
                          $tco_var_p = p;
                          $tco_var_s = v.value0.tail;
                          $copy_accum = accum + 1 | 0;
                          return;
                      };
                      $tco_done = true;
                      return accum;
                  };
                  $tco_done = true;
                  return accum;
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_p, $tco_var_s, $copy_accum);
              };
              return $tco_result;
          };
      };
  };
  var countFallback = function (p) {
      return function (s) {
          return countTail(p)(s)(0);
      };
  };

  // | Returns the number of code points in the leading sequence of code points
  // | which all match the given predicate. Operates in constant space and in
  // | time linear to the length of the string.
  // |
  // | ```purescript
  // | >>> countPrefix (\c -> codePointToInt c == 0x1D400) "𝐀𝐀 b c 𝐀"
  // | 2
  // | ```
  // |
  var countPrefix = $foreign["_countPrefix"](countFallback)(unsafeCodePointAt0);

  // | Returns a string containing the leading sequence of code points which all
  // | match the given predicate from the string. Operates in constant space and
  // | in time linear to the length of the string.
  // |
  // | ```purescript
  // | >>> takeWhile (\c -> codePointToInt c == 0x1D400) "𝐀𝐀 b c 𝐀"
  // | "𝐀𝐀"
  // | ```
  // |
  var takeWhile = function (p) {
      return function (s) {
          return take(countPrefix(p)(s))(s);
      };
  };

  // | Creates a CodePoint from a given Char.
  // |
  // | ```purescript
  // | >>> codePointFromChar 'B'
  // | CodePoint 0x42 -- represents 'B'
  // | ```
  // |
  var codePointFromChar = function ($54) {
      return CodePoint(Data_Enum.fromEnum(Data_Enum.boundedEnumChar)($54));
  };
  exports["codePointFromChar"] = codePointFromChar;
  exports["singleton"] = singleton;
  exports["toCodePointArray"] = toCodePointArray;
  exports["uncons"] = uncons;
  exports["length"] = length;
  exports["countPrefix"] = countPrefix;
  exports["take"] = take;
  exports["takeWhile"] = takeWhile;
  exports["drop"] = drop;
  exports["eqCodePoint"] = eqCodePoint;
})(PS);
(function(exports) {
  "use strict";

  exports.replace = function (s1) {
    return function (s2) {
      return function (s3) {
        return s3.replace(s1, s2);
      };
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.toLower = function (s) {
    return s.toLowerCase();
  };

  exports.toUpper = function (s) {
    return s.toUpperCase();
  };

  exports.trim = function (s) {
    return s.trim();
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String.Common"] = PS["Data.String.Common"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.String.Common"] = $PS["Data.String.Common"] || {};
  var exports = $PS["Data.String.Common"];
  var $foreign = $PS["Data.String.Common"];                

  // | Returns `true` if the given string is empty.
  // |
  // | ```purescript
  // | null "" == true
  // | null "Hi" == false
  // | ```
  var $$null = function (s) {
      return s === "";
  };
  exports["null"] = $$null;
  exports["replace"] = $foreign.replace;
  exports["split"] = $foreign.split;
  exports["toLower"] = $foreign.toLower;
  exports["toUpper"] = $foreign.toUpper;
  exports["trim"] = $foreign.trim;
  exports["joinWith"] = $foreign.joinWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Symbol"] = $PS["Data.Symbol"] || {};
  var exports = $PS["Data.Symbol"];      

  // | A value-level proxy for a type-level symbol.
  var SProxy = (function () {
      function SProxy() {

      };
      SProxy.value = new SProxy();
      return SProxy;
  })();

  // | A class for known symbols
  var IsSymbol = function (reflectSymbol) {
      this.reflectSymbol = reflectSymbol;
  };
  var reflectSymbol = function (dict) {
      return dict.reflectSymbol;
  };
  exports["IsSymbol"] = IsSymbol;
  exports["reflectSymbol"] = reflectSymbol;
  exports["SProxy"] = SProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Text.Parsing.Parser.Pos"] = $PS["Text.Parsing.Parser.Pos"] || {};
  var exports = $PS["Text.Parsing.Parser.Pos"];
  var Data_Show = $PS["Data.Show"];
  var showPosition = new Data_Show.Show(function (v) {
      return "(Position { line: " + (Data_Show.show(Data_Show.showInt)(v.line) + (", column: " + (Data_Show.show(Data_Show.showInt)(v.column) + " })")));
  });

  // | The `Position` before any input has been parsed.
  var initialPos = {
      line: 1,
      column: 1
  };
  exports["initialPos"] = initialPos;
  exports["showPosition"] = showPosition;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Text.Parsing.Parser"] = $PS["Text.Parsing.Parser"] || {};
  var exports = $PS["Text.Parsing.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Alternative = $PS["Control.Alternative"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Lazy = $PS["Control.Lazy"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Plus = $PS["Control.Plus"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Show = $PS["Data.Show"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];                

  // | Contains the remaining input and current position.
  var ParseState = (function () {
      function ParseState(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ParseState.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ParseState(value0, value1, value2);
              };
          };
      };
      return ParseState;
  })();

  // | A parsing error, consisting of a message and position information.
  var ParseError = (function () {
      function ParseError(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ParseError.create = function (value0) {
          return function (value1) {
              return new ParseError(value0, value1);
          };
      };
      return ParseError;
  })();

  // | The Parser monad transformer.
  // |
  // | The first type argument is the stream type. Typically, this is either `String`,
  // | or some sort of token stream.
  var ParserT = function (x) {
      return x;
  };
  var showParseError = new Data_Show.Show(function (v) {
      return "(ParseError " + (Data_Show.show(Data_Show.showString)(v.value0) + (" " + (Data_Show.show(Text_Parsing_Parser_Pos.showPosition)(v.value1) + ")")));
  });
  var parseErrorMessage = function (v) {
      return v.value0;
  };
  var newtypeParserT = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ParserT);

  // | Apply a parser, keeping only the parsed result.
  var runParserT = function (dictMonad) {
      return function (s) {
          return function (p) {
              var initialState = new ParseState(s, Text_Parsing_Parser_Pos.initialPos, false);
              return Control_Monad_State_Trans.evalStateT(((dictMonad.Bind1()).Apply0()).Functor0())(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p)))(initialState);
          };
      };
  };

  // | Apply a parser, keeping only the parsed result.
  var runParser = function (s) {
      return function ($90) {
          return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(runParserT(Data_Identity.monadIdentity)(s)($90));
      };
  };
  var monadTransParserT = new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
      return function ($91) {
          return ParserT(Control_Monad_Trans_Class.lift(Control_Monad_Except_Trans.monadTransExceptT)(Control_Monad_State_Trans.monadStateT(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_State_Trans.monadTransStateT)(dictMonad)($91)));
      };
  });
  var monadThrowParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadThrowExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var monadStateParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadStateExceptT(Control_Monad_State_Trans.monadStateStateT(dictMonad));
  };

  // | Returns the current position in the stream.
  var position = function (dictMonad) {
      return Control_Monad_State_Class.gets(monadStateParserT(dictMonad))(function (v) {
          return v.value1;
      });
  };
  var monadParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.monadExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var lazyParserT = new Control_Lazy.Lazy(function (f) {
      return Control_Lazy.defer(Control_Monad_State_Trans.lazyStateT)(function ($93) {
          return Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(f($93)));
      });
  });                           
  var functorParserT = function (dictFunctor) {
      return Control_Monad_Except_Trans.functorExceptT(Control_Monad_State_Trans.functorStateT(dictFunctor));
  };

  // | Fail with a message and a position.
  var failWithPosition = function (dictMonad) {
      return function (message) {
          return function (pos) {
              return Control_Monad_Error_Class.throwError(monadThrowParserT(dictMonad))(new ParseError(message, pos));
          };
      };
  };
  var bindParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.bindExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };

  // | Fail with a message.
  var fail = function (dictMonad) {
      return function (message) {
          return Control_Bind.bindFlipped(bindParserT(dictMonad))(failWithPosition(dictMonad)(message))(position(dictMonad));
      };
  };
  var applyParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applyExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var applicativeParserT = function (dictMonad) {
      return Control_Monad_Except_Trans.applicativeExceptT(Control_Monad_State_Trans.monadStateT(dictMonad));
  };
  var altParserT = function (dictMonad) {
      return new Control_Alt.Alt(function () {
          return functorParserT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, function (p1) {
          return function (p2) {
              return ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p1)))(new ParseState(v.value0, v.value1, false)))(function (v1) {
                      if (v1.value0 instanceof Data_Either.Left && !v1.value1.value2) {
                          return Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(newtypeParserT)(p2)))(v);
                      };
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
                  });
              })));
          };
      });
  };
  var plusParserT = function (dictMonad) {
      return new Control_Plus.Plus(function () {
          return altParserT(dictMonad);
      }, fail(dictMonad)("No alternative"));
  };
  var alternativeParserT = function (dictMonad) {
      return new Control_Alternative.Alternative(function () {
          return applicativeParserT(dictMonad);
      }, function () {
          return plusParserT(dictMonad);
      });
  };
  var monadZeroParserT = function (dictMonad) {
      return new Control_MonadZero.MonadZero(function () {
          return alternativeParserT(dictMonad);
      }, function () {
          return monadParserT(dictMonad);
      });
  };
  exports["ParseError"] = ParseError;
  exports["parseErrorMessage"] = parseErrorMessage;
  exports["ParseState"] = ParseState;
  exports["ParserT"] = ParserT;
  exports["runParser"] = runParser;
  exports["runParserT"] = runParserT;
  exports["position"] = position;
  exports["fail"] = fail;
  exports["failWithPosition"] = failWithPosition;
  exports["showParseError"] = showParseError;
  exports["newtypeParserT"] = newtypeParserT;
  exports["lazyParserT"] = lazyParserT;
  exports["functorParserT"] = functorParserT;
  exports["applyParserT"] = applyParserT;
  exports["applicativeParserT"] = applicativeParserT;
  exports["bindParserT"] = bindParserT;
  exports["monadParserT"] = monadParserT;
  exports["monadStateParserT"] = monadStateParserT;
  exports["monadThrowParserT"] = monadThrowParserT;
  exports["altParserT"] = altParserT;
  exports["plusParserT"] = plusParserT;
  exports["alternativeParserT"] = alternativeParserT;
  exports["monadZeroParserT"] = monadZeroParserT;
  exports["monadTransParserT"] = monadTransParserT;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Combinators for creating parsers.
  // |
  // | ### Notes
  // |
  // | A few of the known combinators from Parsec are missing in this module. That
  // | is because they have already been defined in other libraries.
  // |
  // | ```purescript
  // | Text.Parsec.many  = Data.(Array|List).many
  // | Text.Parsec.many1 = Data.(Array|List).some
  // | Text.Parsec.(<|>) = Control.Alt.alt (<|>)
  // | ```
  // |
  // | Because Strings are not Char Arrays in PureScript `many` and `some` on Char Parsers need to
  // | be used in conjunction with `Data.String.CodeUnits.fromCharArray` to achieve "Parsec-like" results.
  // |
  // | ```purescript
  // | Text.Parsec.many  (char 'x') <=> fromCharArray <$> Data.Array.many (char 'x')
  // | ```
  // |
  // | Note that `Data.(Array|List).(many|some)` are not stack safe. If you need to parse
  // | large numbers of items then consider using `Data.List.(manyRec|someRec)` instead.
  "use strict";
  $PS["Text.Parsing.Parser.Combinators"] = $PS["Text.Parsing.Parser.Combinators"] || {};
  var exports = $PS["Text.Parsing.Parser.Combinators"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Monad_State_Trans = $PS["Control.Monad.State.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Newtype = $PS["Data.Newtype"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                

  // | Provide an error message in the case of failure.
  var withErrorMessage = function (dictMonad) {
      return function (p) {
          return function (msg) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Text_Parsing_Parser.fail(dictMonad)("Expected " + msg));
          };
      };
  };

  // | Like `try`, but will reannotate the error location to the `try` point.
  var tryRethrow = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(new Data_Either.Left(new Text_Parsing_Parser.ParseError(v1.value0.value0.value0, v.value1)), new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };

  // | In case of failure, reset the stream to the unconsumed state.
  var $$try = function (dictMonad) {
      return function (p) {
          return Text_Parsing_Parser.ParserT(Control_Monad_Except_Trans.ExceptT(Control_Monad_State_Trans.StateT(function (v) {
              return Control_Bind.bind(dictMonad.Bind1())(Control_Monad_State_Trans.runStateT(Control_Monad_Except_Trans.runExceptT(Data_Newtype.unwrap(Text_Parsing_Parser.newtypeParserT)(p)))(v))(function (v1) {
                  if (v1.value0 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, new Text_Parsing_Parser.ParseState(v1.value1.value0, v1.value1.value1, v.value2)));
                  };
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Tuple.Tuple(v1.value0, v1.value1));
              });
          })));
      };
  };

  // | Parse phrases delimited by a separator, requiring at least one match.
  var sepBy1 = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(p)(function (v) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Data_List.many(Text_Parsing_Parser.alternativeParserT(dictMonad))(Text_Parsing_Parser.lazyParserT)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(dictMonad))(sep)(p)))(function (v1) {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_List_Types.Cons(v, v1));
                  });
              });
          };
      };
  };

  // | Parse phrases delimited by a separator.
  // |
  // | For example:
  // |
  // | ```purescript
  // | digit `sepBy` string ","
  // | ```
  var sepBy = function (dictMonad) {
      return function (p) {
          return function (sep) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(sepBy1(dictMonad)(p)(sep))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List_Types.Nil.value));
          };
      };
  };

  // | Provide a default result in the case where a parser fails without consuming input.
  var option = function (dictMonad) {
      return function (a) {
          return function (p) {
              return Control_Alt.alt(Text_Parsing_Parser.altParserT(dictMonad))(p)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(a));
          };
      };
  };

  // | pure `Nothing` in the case where a parser fails without consuming input.
  var optionMaybe = function (dictMonad) {
      return function (p) {
          return option(dictMonad)(Data_Maybe.Nothing.value)(Data_Functor.map(Text_Parsing_Parser.functorParserT(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.Just.create)(p));
      };
  };
  exports["withErrorMessage"] = withErrorMessage;
  exports["option"] = option;
  exports["optionMaybe"] = optionMaybe;
  exports["try"] = $$try;
  exports["tryRethrow"] = tryRethrow;
  exports["sepBy"] = sepBy;
  exports["sepBy1"] = sepBy1;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Functions for working with streams of tokens.
  "use strict";
  $PS["Text.Parsing.Parser.Token"] = $PS["Text.Parsing.Parser.Token"] || {};
  var exports = $PS["Text.Parsing.Parser.Token"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];

  // | Create a parser which Returns the first token in the stream.
  var token = function (dictMonad) {
      return function (tokpos) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v) {
              return v.value0;
          }))(function (v) {
              var v1 = Data_List.uncons(v);
              if (v1 instanceof Data_Maybe.Nothing) {
                  return Text_Parsing_Parser.fail(dictMonad)("Unexpected EOF");
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.modify_(Text_Parsing_Parser.monadStateParserT(dictMonad))(function (v2) {
                      return new Text_Parsing_Parser.ParseState(v1.value0.tail, tokpos(v1.value0.head), true);
                  }))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v1.value0.head);
                  });
              };
              throw new Error("Failed pattern match at Text.Parsing.Parser.Token (line 53, column 3 - line 58, column 16): " + [ v1.constructor.name ]);
          });
      };
  };

  // | Create a parser which matches any token satisfying the predicate.
  var when = function (dictMonad) {
      return function (tokpos) {
          return function (f) {
              return Text_Parsing_Parser_Combinators.tryRethrow(dictMonad)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(token(dictMonad)(tokpos))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(dictMonad))(Control_MonadZero.guard(Text_Parsing_Parser.monadZeroParserT(dictMonad))(f(v)))(function () {
                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(v);
                  });
              }));
          };
      };
  };

  // | Match the specified token at the head of the stream.
  var match = function (dictMonad) {
      return function (dictEq) {
          return function (tokpos) {
              return function (tok) {
                  return when(dictMonad)(tokpos)(function (v) {
                      return Data_Eq.eq(dictEq)(v)(tok);
                  });
              };
          };
      };
  };
  exports["token"] = token;
  exports["when"] = when;
  exports["match"] = match;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Data.Version.Internal"] = $PS["Data.Version.Internal"] || {};
  var exports = $PS["Data.Version.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Data_Char_Unicode = $PS["Data.Char.Unicode"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];                
  var lieAboutPos = Data_Function["const"](Text_Parsing_Parser_Pos.initialPos);
  var match$prime = Text_Parsing_Parser_Token.match(Data_Identity.monadIdentity)(Data_Eq.eqChar)(lieAboutPos);
  var when$prime = Text_Parsing_Parser_Token.when(Data_Identity.monadIdentity)(lieAboutPos);
  var isDigit = function (c) {
      return "0" <= c && c <= "9";
  };
  var nonNegativeInt = (function () {
      var intFromList = function ($7) {
          return Data_Int.fromString(Data_String_CodeUnits.fromCharArray(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)($7)));
      };
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(intFromList)(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Token.when(Data_Identity.monadIdentity)(lieAboutPos)(isDigit))))(Data_Maybe.maybe(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("invalid 32-bit integer"))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))));
  })();
  var isAsciiAlpha = function (ch) {
      return Data_Ord.between(Data_Ord.ordChar)("a")("z")(Data_Char_Unicode.toLower(ch));
  };
  var eof = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Control_Monad_State_Class.gets(Text_Parsing_Parser.monadStateParserT(Data_Identity.monadIdentity))(function (v) {
      return v.value0;
  }))(function (v) {
      return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(Data_List["null"](v))(Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("expected eof"));
  });
  exports["isDigit"] = isDigit;
  exports["isAsciiAlpha"] = isAsciiAlpha;
  exports["nonNegativeInt"] = nonNegativeInt;
  exports["lieAboutPos"] = lieAboutPos;
  exports["match'"] = match$prime;
  exports["when'"] = when$prime;
  exports["eof"] = eof;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines a `Version` data type, for representing software
  // | versions, according to the [Semantic Versioning](http://semver.org)
  // | specification. To summarize, a `Version` consists of:
  // |
  // | * a MAJOR, MINOR, and a PATCH component, all of which are nonnegative
  // |   integers.
  // | * optionally, a list of pre-release identifiers, consisting of ASCII
  // |   letters, numbers, and hyphens, and which is separated from the three
  // |   main components with a hyphen.
  // | * optionally, build metadata, consisting of ASCII letters, numbers, and
  // |   hyphens, and which is separated from the rest of the version with a plus
  // |   symbol.
  // |
  // | Note that, according to the semver spec, version precedence must ignore
  // | any build metadata. Therefore, the `Ord` instance ignores the build
  // | metadata. In order to have the `Eq` instance agree with the `Ord`
  // | instance, the `Eq` instance ignores build metadata too.
  "use strict";
  $PS["Data.Version"] = $PS["Data.Version"] || {};
  var exports = $PS["Data.Version"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_Int = $PS["Data.Int"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Version_Internal = $PS["Data.Version.Internal"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];                
  var IInt = (function () {
      function IInt(value0) {
          this.value0 = value0;
      };
      IInt.create = function (value0) {
          return new IInt(value0);
      };
      return IInt;
  })();
  var IStr = (function () {
      function IStr(value0) {
          this.value0 = value0;
      };
      IStr.create = function (value0) {
          return new IStr(value0);
      };
      return IStr;
  })();

  // | A semver version.
  var Version = (function () {
      function Version(value0, value1, value2, value3, value4) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
      };
      Version.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return new Version(value0, value1, value2, value3, value4);
                      };
                  };
              };
          };
      };
      return Version;
  })();
  var showIdentifier = function (i) {
      if (i instanceof IInt) {
          return Data_Show.show(Data_Show.showInt)(i.value0);
      };
      if (i instanceof IStr) {
          return i.value0;
      };
      throw new Error("Failed pattern match at Data.Version (line 126, column 20 - line 128, column 14): " + [ i.constructor.name ]);
  };

  // | Unpack a version. Useful for pattern matching.
  // |
  // | The reason we have this function instead of exporting the `Version`
  // | constructor is that in this way we can guarantee that `Version` values are
  // | always valid.
  var runVersion = function (f) {
      return function (v) {
          return f(v.value0)(v.value1)(v.value2)(v.value3)(v.value4);
      };
  };
  var showVersion = (function () {
      var sep = function (v) {
          return function (v1) {
              if (v1 instanceof Data_List_Types.Nil) {
                  return "";
              };
              return (function (v2) {
                  return v + v2;
              })(Data_String_Common.joinWith(".")(Data_Functor.map(Data_Functor.functorArray)(showIdentifier)(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(v1))));
          };
      };
      var go = function (maj) {
          return function (min) {
              return function (pat) {
                  return function (pre) {
                      return function (build) {
                          return Data_String_Common.joinWith(".")(Data_Functor.map(Data_Functor.functorArray)(Data_Show.show(Data_Show.showInt))([ maj, min, pat ])) + (sep("-")(pre) + sep("+")(build));
                      };
                  };
              };
          };
      };
      return runVersion(go);
  })();
  var preRelease = function (v) {
      return v.value3;
  };
  var patch = function (v) {
      return v.value2;
  };
  var nonneg = function (x) {
      var $52 = x < 0;
      if ($52) {
          return 0;
      };
      return x;
  };

  // | Construct a numeric identifier.
  var numeric = function ($105) {
      return IInt.create(nonneg($105));
  };

  // | Smart constructor for versions. Negative integer components will be
  // | replaced with zeroes.
  var version = function (ma) {
      return function (mi) {
          return function (pa) {
              return function (pre) {
                  return function (meta) {
                      return new Version(nonneg(ma), nonneg(mi), nonneg(pa), pre, meta);
                  };
              };
          };
      };
  };
  var minor = function (v) {
      return v.value1;
  };
  var major = function (v) {
      return v.value0;
  };
  var ordIdentifier = new Data_Ord.Ord(function () {
      return eqIdentifier;
  }, function (v) {
      return function (v1) {
          if (v instanceof IInt && v1 instanceof IStr) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof IStr && v1 instanceof IInt) {
              return Data_Ordering.GT.value;
          };
          if (v instanceof IInt && v1 instanceof IInt) {
              return Data_Ord.compare(Data_Ord.ordInt)(v.value0)(v1.value0);
          };
          if (v instanceof IStr && v1 instanceof IStr) {
              return Data_Ord.compare(Data_Ord.ordString)(v.value0)(v1.value0);
          };
          throw new Error("Failed pattern match at Data.Version (line 203, column 1 - line 203, column 41): " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var eqIdentifier = new Data_Eq.Eq(function (i1) {
      return function (i2) {
          return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordIdentifier)(i1)(i2))(Data_Ordering.EQ.value);
      };
  });
  var comparePre = function (v) {
      return function (v1) {
          if (v instanceof Data_List_Types.Nil && v1 instanceof Data_List_Types.Nil) {
              return Data_Ordering.EQ.value;
          };
          if (v instanceof Data_List_Types.Nil) {
              return Data_Ordering.GT.value;
          };
          if (v1 instanceof Data_List_Types.Nil) {
              return Data_Ordering.LT.value;
          };
          if (v instanceof Data_List_Types.Cons && v1 instanceof Data_List_Types.Cons) {
              var helper = function (v2) {
                  return function (v3) {
                      if (v2 instanceof Data_List_Types.Nil && v3 instanceof Data_List_Types.Nil) {
                          return Data_Ordering.EQ.value;
                      };
                      if (v2 instanceof Data_List_Types.Nil) {
                          return Data_Ordering.LT.value;
                      };
                      if (v3 instanceof Data_List_Types.Nil) {
                          return Data_Ordering.GT.value;
                      };
                      if (v2 instanceof Data_List_Types.Cons && v3 instanceof Data_List_Types.Cons) {
                          return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(Data_Ord.compare(ordIdentifier)(v2.value0)(v3.value0))(helper(v2.value1)(v3.value1));
                      };
                      throw new Error("Failed pattern match at Data.Version (line 182, column 3 - line 182, column 22): " + [ v2.constructor.name, v3.constructor.name ]);
                  };
              };
              return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(Data_Ord.compare(ordIdentifier)(v.value0)(v1.value0))(helper(v.value1)(v1.value1));
          };
          throw new Error("Failed pattern match at Data.Version (line 176, column 1 - line 176, column 61): " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var ordVersion = new Data_Ord.Ord(function () {
      return eqVersion;
  }, function (v1) {
      return function (v2) {
          var comparePre$prime = Data_Function.on(comparePre)(preRelease);
          var compareNormal = Data_Function.on(Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordInt)))(runVersion(function (ma) {
              return function (mi) {
                  return function (pa) {
                      return function (v) {
                          return function (v3) {
                              return [ ma, mi, pa ];
                          };
                      };
                  };
              };
          }));
          return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(compareNormal(v1)(v2))(comparePre$prime(v1)(v2));
      };
  });
  var eqVersion = new Data_Eq.Eq(function (v1) {
      return function (v2) {
          return Data_Eq.eq(Data_Ordering.eqOrdering)(Data_Ord.compare(ordVersion)(v1)(v2))(Data_Ordering.EQ.value);
      };
  });

  // | Bump the patch version, and discard any prerelease identifiers and build
  // | metadata.
  var bumpPatch = function (v) {
      return version(major(v))(minor(v))(patch(v) + 1 | 0)(Data_List_Types.Nil.value)(Data_List_Types.Nil.value);
  };

  // | Bump the minor version, and discard any prerelease identifiers and build
  // | metadata.
  var bumpMinor = function (v) {
      return version(major(v))(minor(v) + 1 | 0)(0)(Data_List_Types.Nil.value)(Data_List_Types.Nil.value);
  };

  // | Bump the major version, and discard any prerelease identifiers and build
  // | metadata.
  var bumpMajor = function (v) {
      return version(major(v) + 1 | 0)(0)(0)(Data_List_Types.Nil.value)(Data_List_Types.Nil.value);
  };
  var acceptableIdentifier = function (ch) {
      return Data_Version_Internal.isDigit(ch) || (Data_Version_Internal.isAsciiAlpha(ch) || ch === "-");
  };

  // | Construct a textual identifier.
  var textual = function (str) {
      var startsWith = function (prefix) {
          return function ($107) {
              return Data_Maybe.isJust(Data_String_CodeUnits.stripPrefix(prefix)($107));
          };
      };
      var ok = function (x) {
          return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (v) {
              return v(x);
          })([ function ($108) {
              return !Data_Maybe.isJust(Data_Int.fromString($108));
          }, function ($109) {
              return !startsWith("0")($109);
          }, function ($110) {
              return Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(acceptableIdentifier)(Data_String_CodeUnits.toCharArray($110));
          } ]);
      };
      var $93 = ok(str);
      if ($93) {
          return new Data_Maybe.Just(new IStr(str));
      };
      return Data_Maybe.Nothing.value;
  };
  var versionParser = (function () {
      var textIdent = Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Version_Internal["when'"](acceptableIdentifier)))(function (v) {
          var str = Data_String_CodeUnits.fromCharArray(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(v));
          var v1 = textual(str);
          if (v1 instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(v1.value0);
          };
          if (v1 instanceof Data_Maybe.Nothing) {
              return Text_Parsing_Parser.fail(Data_Identity.monadIdentity)("invalid identifier: " + str);
          };
          throw new Error("Failed pattern match at Data.Version (line 152, column 5 - line 154, column 54): " + [ v1.constructor.name ]);
      });
      var intIdent = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(numeric)(Data_Version_Internal.nonNegativeInt);
      var identifier = Control_Alt.alt(Text_Parsing_Parser.altParserT(Data_Identity.monadIdentity))(intIdent)(textIdent);
      var identifiers = Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(identifier)(Data_Version_Internal["match'"]("."));
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Version_Internal.nonNegativeInt)(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Version_Internal["match'"]("."))(function (v1) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Version_Internal.nonNegativeInt)(function (v2) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Version_Internal["match'"]("."))(function (v3) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Version_Internal.nonNegativeInt)(function (v4) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(Data_List_Types.Nil.value)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Version_Internal["match'"]("-"))(identifiers)))(function (v5) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(Data_List_Types.Nil.value)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(Data_Version_Internal["match'"]("+"))(identifiers)))(function (v6) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Version_Internal.eof)(function () {
                                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Version(v, v2, v4, v5, v6));
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  })();
  var parseVersion = function ($111) {
      return Data_Function.flip(Text_Parsing_Parser.runParser)(versionParser)(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String_CodeUnits.toCharArray($111)));
  };
  exports["version"] = version;
  exports["runVersion"] = runVersion;
  exports["major"] = major;
  exports["minor"] = minor;
  exports["preRelease"] = preRelease;
  exports["bumpMajor"] = bumpMajor;
  exports["bumpMinor"] = bumpMinor;
  exports["bumpPatch"] = bumpPatch;
  exports["textual"] = textual;
  exports["numeric"] = numeric;
  exports["showVersion"] = showVersion;
  exports["parseVersion"] = parseVersion;
  exports["versionParser"] = versionParser;
  exports["eqVersion"] = eqVersion;
  exports["ordVersion"] = ordVersion;
  exports["eqIdentifier"] = eqIdentifier;
  exports["ordIdentifier"] = ordIdentifier;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | A Version data type corresponding to the type in Haskell's `Data.Version`
  // | module, from the `base` library (that is, the Haskell standard library).
  // |
  // | See also [the Haskell documentation](http://hackage.haskell.org/package/base-4.8.1.0/docs/Data-Version.html).
  // |
  // | You might need this module in order to deal with PureScript compiler
  // | versions, as they do not always have 3 components, and therefore will not
  // | work with the `Data.Version` module in this package. In most other cases,
  // | though, you should probably be using `Data.Version`.
  "use strict";
  $PS["Data.Version.Haskell"] = $PS["Data.Version.Haskell"] || {};
  var exports = $PS["Data.Version.Haskell"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Ordering = $PS["Data.Ordering"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Data_Version_Internal = $PS["Data.Version.Internal"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];                

  // | A version consists of any number of integer components, and any number of
  // | string components.
  var Version = (function () {
      function Version(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Version.create = function (value0) {
          return function (value1) {
              return new Version(value0, value1);
          };
      };
      return Version;
  })();
  var versionParser = (function () {
      var someAlphaNums = Data_List.some(Text_Parsing_Parser.alternativeParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser.lazyParserT)(Data_Version_Internal["when'"](function (c) {
          return Data_Version_Internal.isAsciiAlpha(c) || Data_Version_Internal.isDigit(c);
      }));
      var identifier = Data_Functor.map(Text_Parsing_Parser.functorParserT(Data_Identity.functorIdentity))(function ($32) {
          return Data_String_CodeUnits.fromCharArray(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)($32));
      })(someAlphaNums);
      var hyphen = Data_Version_Internal["match'"]("-");
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.sepBy1(Data_Identity.monadIdentity)(Data_Version_Internal.nonNegativeInt)(Data_Version_Internal["match'"](".")))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Text_Parsing_Parser_Combinators.option(Data_Identity.monadIdentity)(Data_List_Types.Nil.value)(Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Data_Identity.monadIdentity))(hyphen)(Text_Parsing_Parser_Combinators.sepBy(Data_Identity.monadIdentity)(identifier)(hyphen))))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Data_Identity.monadIdentity))(Data_Version_Internal.eof)(function () {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Data_Identity.monadIdentity))(new Version(v, v1));
              });
          });
      });
  })();
  var showVersion = function (v) {
      var prefix = function (v1) {
          return function (v2) {
              if (v2 === "") {
                  return "";
              };
              return v1 + v2;
          };
      };
      var f = function ($33) {
          return Data_String_Common.joinWith(".")(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(Data_Functor.map(Data_List_Types.functorList)(Data_Show.show(Data_Show.showInt))($33)));
      };
      return f(v.value0) + prefix("-")(Data_String_Common.joinWith("-")(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)(v.value1)));
  };
  var parseVersion = function ($34) {
      return Data_Function.flip(Text_Parsing_Parser.runParser)(versionParser)(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String_CodeUnits.toCharArray($34)));
  };
  var eqVersion = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return Data_Eq.eq(Data_List_Types.eqList(Data_Eq.eqInt))(v.value0)(v1.value0) && Data_Eq.eq(Data_List_Types.eqList(Data_Eq.eqString))(v.value1)(v1.value1);
      };
  });
  var ordVersion = new Data_Ord.Ord(function () {
      return eqVersion;
  }, function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_Ordering.semigroupOrdering)(Data_Ord.compare(Data_List_Types.ordList(Data_Ord.ordInt))(v.value0)(v1.value0))(Data_Ord.compare(Data_List_Types.ordList(Data_Ord.ordString))(v.value1)(v1.value1));
      };
  });
  exports["Version"] = Version;
  exports["showVersion"] = showVersion;
  exports["versionParser"] = versionParser;
  exports["parseVersion"] = parseVersion;
  exports["eqVersion"] = eqVersion;
  exports["ordVersion"] = ordVersion;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module provides the `Effect` type, which is used to represent
  // | _native_ effects. The `Effect` type provides a typed API for effectful
  // | computations, while at the same time generating efficient JavaScript.
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = new Control_Monad.Monad(function () {
      return applicativeEffect;
  }, function () {
      return bindEffect;
  });
  var bindEffect = new Control_Bind.Bind(function () {
      return applyEffect;
  }, $foreign.bindE);
  var applyEffect = new Control_Apply.Apply(function () {
      return functorEffect;
  }, Control_Monad.ap(monadEffect));
  var applicativeEffect = new Control_Applicative.Applicative(function () {
      return applyEffect;
  }, $foreign.pureE);
  var functorEffect = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEffect));

  // | The `Semigroup` instance for effects allows you to run two effects, one
  // | after the other, and then combine their results using the result type's
  // | `Semigroup` instance.
  var semigroupEffect = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup)));
  };

  // | If you have a `Monoid a` instance, then `mempty :: Effect a` is defined as
  // | `pure mempty`.
  var monoidEffect = function (dictMonoid) {
      return new Data_Monoid.Monoid(function () {
          return semigroupEffect(dictMonoid.Semigroup0());
      }, $foreign.pureE(Data_Monoid.mempty(dictMonoid)));
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["semigroupEffect"] = semigroupEffect;
  exports["monoidEffect"] = monoidEffect;
})(PS);
(function(exports) {
  /* globals exports, setTimeout */
  "use strict";

  var AVar = function () {

    function MutableQueue () {
      this.head = null;
      this.last = null;
      this.size = 0;
    }

    function MutableCell (queue, value) {
      this.queue = queue;
      this.value = value;
      this.next  = null;
      this.prev  = null;
    }

    function AVar (value) {
      this.draining = false;
      this.error    = null;
      this.value    = value;
      this.takes    = new MutableQueue();
      this.reads    = new MutableQueue();
      this.puts     = new MutableQueue();
    }

    var EMPTY = {};

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function putLast (queue, value) {
      var cell = new MutableCell(queue, value);
      switch (queue.size) {
      case 0:
        queue.head = cell;
        break;
      case 1:
        cell.prev = queue.head;
        queue.head.next = cell;
        queue.last = cell;
        break;
      default:
        cell.prev = queue.last;
        queue.last.next = cell;
        queue.last = cell;
      }
      queue.size++;
      return cell;
    }

    function takeLast (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.last;
        queue.head.next = null;
        queue.last = null;
        break;
      default:
        cell = queue.last;
        queue.last = cell.prev;
        queue.last.next = null;
      }
      cell.prev = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function takeHead (queue) {
      var cell;
      switch (queue.size) {
      case 0:
        return null;
      case 1:
        cell = queue.head;
        queue.head = null;
        break;
      case 2:
        cell = queue.head;
        queue.last.prev = null;
        queue.head = queue.last;
        queue.last = null;
        break;
      default:
        cell = queue.head;
        queue.head = cell.next;
        queue.head.prev = null;
      }
      cell.next = null;
      cell.queue = null;
      queue.size--;
      return cell.value;
    }

    function deleteCell (cell) {
      if (cell.queue === null) {
        return;
      }
      if (cell.queue.last === cell) {
        takeLast(cell.queue);
        return;
      }
      if (cell.queue.head === cell) {
        takeHead(cell.queue);
        return;
      }
      if (cell.prev) {
        cell.prev.next = cell.next;
      }
      if (cell.next) {
        cell.next.prev = cell.prev;
      }
      cell.queue.size--;
      cell.queue = null;
      cell.value = null;
      cell.next  = null;
      cell.prev  = null;
    }

    function drainVar (util, avar) {
      if (avar.draining) {
        return;
      }

      var ps = avar.puts;
      var ts = avar.takes;
      var rs = avar.reads;
      var p, r, t, value, rsize;

      avar.draining = true;

      while (1) { // eslint-disable-line no-constant-condition
        p = null;
        r = null;
        t = null;
        value = avar.value;
        rsize = rs.size;

        if (avar.error !== null) {
          value = util.left(avar.error);
          while (p = takeHead(ps)) { // eslint-disable-line no-cond-assign
            runEff(p.cb(value));
          }
          while (r = takeHead(rs)) { // eslint-disable-line no-cond-assign
            runEff(r(value));
          }
          while (t = takeHead(ts)) { // eslint-disable-line no-cond-assign
            runEff(t(value));
          }
          break;
        }

        // Process the next put. We do not immediately invoke the callback
        // because we want to preserve ordering. If there are takes/reads
        // we want to run those first.
        if (value === EMPTY && (p = takeHead(ps))) {
          avar.value = value = p.value;
        }

        if (value !== EMPTY) {
          // We go ahead and queue up the next take for the same reasons as
          // above. Invoking the read callbacks can affect the mutable queue.
          t = takeHead(ts);
          // We only want to process the reads queued up before running these
          // callbacks so we guard on rsize.
          while (rsize-- && (r = takeHead(rs))) {
            runEff(r(util.right(value)));
          }
          if (t !== null) {
            avar.value = EMPTY;
            runEff(t(util.right(value)));
          }
        }

        if (p !== null) {
          runEff(p.cb(util.right(void 0)));
        }

        // Callbacks could have queued up more items so we need to guard on the
        // actual mutable properties.
        if (avar.value === EMPTY && ps.size === 0 || avar.value !== EMPTY && ts.size === 0) {
          break;
        }
      }
      avar.draining = false;
    }

    AVar.EMPTY      = EMPTY;
    AVar.putLast    = putLast;
    AVar.takeLast   = takeLast;
    AVar.takeHead   = takeHead;
    AVar.deleteCell = deleteCell;
    AVar.drainVar   = drainVar;

    return AVar;
  }();

  exports.empty = function () {
    return new AVar(AVar.EMPTY);
  };

  exports._putVar = function (util, value, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.puts, { cb: cb, value: value });
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._takeVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.takes, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };

  exports._readVar = function (util, avar, cb) {
    return function () {
      var cell = AVar.putLast(avar.reads, cb);
      AVar.drainVar(util, avar);
      return function () {
        AVar.deleteCell(cell);
      };
    };
  };
})(PS["Effect.AVar"] = PS["Effect.AVar"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.AVar"] = $PS["Effect.AVar"] || {};
  var exports = $PS["Effect.AVar"];
  var $foreign = $PS["Effect.AVar"];
  var Data_Either = $PS["Data.Either"];
  var Data_Maybe = $PS["Data.Maybe"];                
  var Killed = (function () {
      function Killed(value0) {
          this.value0 = value0;
      };
      Killed.create = function (value0) {
          return new Killed(value0);
      };
      return Killed;
  })();
  var Filled = (function () {
      function Filled(value0) {
          this.value0 = value0;
      };
      Filled.create = function (value0) {
          return new Filled(value0);
      };
      return Filled;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var ffiUtil = {
      left: Data_Either.Left.create,
      right: Data_Either.Right.create,
      nothing: Data_Maybe.Nothing.value,
      just: Data_Maybe.Just.create,
      killed: Killed.create,
      filled: Filled.create,
      empty: Empty.value
  };

  // | Sets the value of the AVar. If the AVar is already filled, it will be
  // | queued until the value is emptied. Multiple puts will resolve in order as
  // | the AVar becomes available. Returns an effect which will remove the
  // | callback from the pending queue.
  var put = function (value) {
      return function (avar) {
          return function (cb) {
              return $foreign["_putVar"](ffiUtil, value, avar, cb);
          };
      };
  };

  // | Reads the AVar value. Unlike `take`, this will not leave the AVar empty.
  // | If the AVar is empty, this will queue until it is filled. Multiple reads
  // | will resolve at the same time, as soon as possible.
  var read = function (avar) {
      return function (cb) {
          return $foreign["_readVar"](ffiUtil, avar, cb);
      };
  };

  // | Takes the AVar value, leaving it empty. If the AVar is already empty,
  // | the callback will be queued until the AVar is filled. Multiple takes will
  // | resolve in order as the AVar fills. Returns an effect which will remove
  // | the callback from the pending queue.
  var take = function (avar) {
      return function (cb) {
          return $foreign["_takeVar"](ffiUtil, avar, cb);
      };
  };
  exports["Killed"] = Killed;
  exports["Filled"] = Filled;
  exports["Empty"] = Empty;
  exports["take"] = take;
  exports["put"] = put;
  exports["read"] = read;
  exports["empty"] = $foreign.empty;
})(PS);
(function(exports) {
  /* globals setImmediate, clearImmediate, setTimeout, clearTimeout */
  /* jshint -W083, -W098, -W003 */
  "use strict";

  var Aff = function () {
    // A unique value for empty.
    var EMPTY = {};

    /*

  An awkward approximation. We elide evidence we would otherwise need in PS for
  efficiency sake.

  data Aff eff a
    = Pure a
    | Throw Error
    | Catch (Aff eff a) (Error -> Aff eff a)
    | Sync (Eff eff a)
    | Async ((Either Error a -> Eff eff Unit) -> Eff eff (Canceler eff))
    | forall b. Bind (Aff eff b) (b -> Aff eff a)
    | forall b. Bracket (Aff eff b) (BracketConditions eff b) (b -> Aff eff a)
    | forall b. Fork Boolean (Aff eff b) ?(Fiber eff b -> a)
    | Sequential (ParAff aff a)

  */  
    var PURE    = "Pure";
    var THROW   = "Throw";
    var CATCH   = "Catch";
    var SYNC    = "Sync";
    var ASYNC   = "Async";
    var BIND    = "Bind";
    var BRACKET = "Bracket";
    var FORK    = "Fork";
    var SEQ     = "Sequential";

    /*

  data ParAff eff a
    = forall b. Map (b -> a) (ParAff eff b)
    | forall b. Apply (ParAff eff (b -> a)) (ParAff eff b)
    | Alt (ParAff eff a) (ParAff eff a)
    | ?Par (Aff eff a)

  */  
    var MAP   = "Map";
    var APPLY = "Apply";
    var ALT   = "Alt";

    // Various constructors used in interpretation
    var CONS      = "Cons";      // Cons-list, for stacks
    var RESUME    = "Resume";    // Continue indiscriminately
    var RELEASE   = "Release";   // Continue with bracket finalizers
    var FINALIZER = "Finalizer"; // A non-interruptible effect
    var FINALIZED = "Finalized"; // Marker for finalization
    var FORKED    = "Forked";    // Reference to a forked fiber, with resumption stack
    var FIBER     = "Fiber";     // Actual fiber reference
    var THUNK     = "Thunk";     // Primed effect, ready to invoke

    function Aff(tag, _1, _2, _3) {
      this.tag = tag;
      this._1  = _1;
      this._2  = _2;
      this._3  = _3;
    }

    function AffCtr(tag) {
      var fn = function (_1, _2, _3) {
        return new Aff(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }

    function nonCanceler(error) {
      return new Aff(PURE, void 0);
    }

    function runEff(eff) {
      try {
        eff();
      } catch (error) {
        setTimeout(function () {
          throw error;
        }, 0);
      }
    }

    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error) {
        return left(error);
      }
    }

    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error) {
        k(left(error))();
        return nonCanceler;
      }
    }

    var Scheduler = function () {
      var limit    = 1024;
      var size     = 0;
      var ix       = 0;
      var queue    = new Array(limit);
      var draining = false;

      function drain() {
        var thunk;
        draining = true;
        while (size !== 0) {
          size--;
          thunk     = queue[ix];
          queue[ix] = void 0;
          ix        = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }

      return {
        isDraining: function () {
          return draining;
        },
        enqueue: function (cb) {
          var i, tmp;
          if (size === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }

          queue[(ix + size) % limit] = cb;
          size++;

          if (!draining) {
            drain();
          }
        }
      };
    }();

    function Supervisor(util) {
      var fibers  = {};
      var fiberId = 0;
      var count   = 0;

      return {
        register: function (fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function (result) {
              return function () {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function () {
          return count === 0;
        },
        killAll: function (killError, cb) {
          return function () {
            if (count === 0) {
              return cb();
            }

            var killCount = 0;
            var kills     = {};

            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function (result) {
                return function () {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function () {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }

            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }

            fibers  = {};
            fiberId = 0;
            count   = 0;

            return function (error) {
              return new Aff(SYNC, function () {
                for (var k in kills) {
                  if (kills.hasOwnProperty(k)) {
                    kills[k]();
                  }
                }
              });
            };
          };
        }
      };
    }

    // Fiber state machine
    var SUSPENDED   = 0; // Suspended, pending a join.
    var CONTINUE    = 1; // Interpret the next instruction.
    var STEP_BIND   = 2; // Apply the next bind.
    var STEP_RESULT = 3; // Handle potential failure from a result.
    var PENDING     = 4; // An async effect is running.
    var RETURN      = 5; // The current stack has returned.
    var COMPLETED   = 6; // The entire fiber has completed.

    function Fiber(util, supervisor, aff) {
      // Monotonically increasing tick, increased on each asynchronous turn.
      var runTick = 0;

      // The current branch of the state machine.
      var status = SUSPENDED;

      // The current point of interest for the state machine branch.
      var step      = aff;  // Successful step
      var fail      = null; // Failure step
      var interrupt = null; // Asynchronous interrupt

      // Stack of continuations for the current fiber.
      var bhead = null;
      var btail = null;

      // Stack of attempts and finalizers for error recovery. Every `Cons` is also
      // tagged with current `interrupt` state. We use this to track which items
      // should be ignored or evaluated as a result of a kill.
      var attempts = null;

      // A special state is needed for Bracket, because it cannot be killed. When
      // we enter a bracket acquisition or finalizer, we increment the counter,
      // and then decrement once complete.
      var bracketCount = 0;

      // Each join gets a new id so they can be revoked.
      var joinId  = 0;
      var joins   = null;
      var rethrow = true;

      // Each invocation of `run` requires a tick. When an asynchronous effect is
      // resolved, we must check that the local tick coincides with the fiber
      // tick before resuming. This prevents multiple async continuations from
      // accidentally resuming the same fiber. A common example may be invoking
      // the provided callback in `makeAff` more than once, but it may also be an
      // async effect resuming after the fiber was already cancelled.
      function run(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp       = null;
          result    = null;
          attempt   = null;

          switch (status) {
          case STEP_BIND:
            status = CONTINUE;
            try {
              step   = bhead(step);
              if (btail === null) {
                bhead = null;
              } else {
                bhead = btail._1;
                btail = btail._2;
              }
            } catch (e) {
              status = RETURN;
              fail   = util.left(e);
              step   = null;
            }
            break;

          case STEP_RESULT:
            if (util.isLeft(step)) {
              status = RETURN;
              fail   = step;
              step   = null;
            } else if (bhead === null) {
              status = RETURN;
            } else {
              status = STEP_BIND;
              step   = util.fromRight(step);
            }
            break;

          case CONTINUE:
            switch (step.tag) {
            case BIND:
              if (bhead) {
                btail = new Aff(CONS, bhead, btail);
              }
              bhead  = step._2;
              status = CONTINUE;
              step   = step._1;
              break;

            case PURE:
              if (bhead === null) {
                status = RETURN;
                step   = util.right(step._1);
              } else {
                status = STEP_BIND;
                step   = step._1;
              }
              break;

            case SYNC:
              status = STEP_RESULT;
              step   = runSync(util.left, util.right, step._1);
              break;

            case ASYNC:
              status = PENDING;
              step   = runAsync(util.left, step._1, function (result) {
                return function () {
                  if (runTick !== localRunTick) {
                    return;
                  }
                  runTick++;
                  Scheduler.enqueue(function () {
                    // It's possible to interrupt the fiber between enqueuing and
                    // resuming, so we need to check that the runTick is still
                    // valid.
                    if (runTick !== localRunTick + 1) {
                      return;
                    }
                    status = STEP_RESULT;
                    step   = result;
                    run(runTick);
                  });
                };
              });
              return;

            case THROW:
              status = RETURN;
              fail   = util.left(step._1);
              step   = null;
              break;

            // Enqueue the Catch so that we can call the error handler later on
            // in case of an exception.
            case CATCH:
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead    = null;
              btail    = null;
              status   = CONTINUE;
              step     = step._1;
              break;

            // Enqueue the Bracket so that we can call the appropriate handlers
            // after resource acquisition.
            case BRACKET:
              bracketCount++;
              if (bhead === null) {
                attempts = new Aff(CONS, step, attempts, interrupt);
              } else {
                attempts = new Aff(CONS, step, new Aff(CONS, new Aff(RESUME, bhead, btail), attempts, interrupt), interrupt);
              }
              bhead  = null;
              btail  = null;
              status = CONTINUE;
              step   = step._1;
              break;

            case FORK:
              status = STEP_RESULT;
              tmp    = Fiber(util, supervisor, step._2);
              if (supervisor) {
                supervisor.register(tmp);
              }
              if (step._1) {
                tmp.run();
              }
              step = util.right(tmp);
              break;

            case SEQ:
              status = CONTINUE;
              step   = sequential(util, supervisor, step._1);
              break;
            }
            break;

          case RETURN:
            bhead = null;
            btail = null;
            // If the current stack has returned, and we have no other stacks to
            // resume or finalizers to run, the fiber has halted and we can
            // invoke all join callbacks. Otherwise we need to resume.
            if (attempts === null) {
              status = COMPLETED;
              step   = interrupt || fail || step;
            } else {
              // The interrupt status for the enqueued item.
              tmp      = attempts._3;
              attempt  = attempts._1;
              attempts = attempts._2;

              switch (attempt.tag) {
              // We cannot recover from an unmasked interrupt. Otherwise we should
              // continue stepping, or run the exception handler if an exception
              // was raised.
              case CATCH:
                // We should compare the interrupt status as well because we
                // only want it to apply if there has been an interrupt since
                // enqueuing the catch.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  status = RETURN;
                } else if (fail) {
                  status = CONTINUE;
                  step   = attempt._2(util.fromLeft(fail));
                  fail   = null;
                }
                break;

              // We cannot resume from an unmasked interrupt or exception.
              case RESUME:
                // As with Catch, we only want to ignore in the case of an
                // interrupt since enqueing the item.
                if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                  status = RETURN;
                } else {
                  bhead  = attempt._1;
                  btail  = attempt._2;
                  status = STEP_BIND;
                  step   = util.fromRight(step);
                }
                break;

              // If we have a bracket, we should enqueue the handlers,
              // and continue with the success branch only if the fiber has
              // not been interrupted. If the bracket acquisition failed, we
              // should not run either.
              case BRACKET:
                bracketCount--;
                if (fail === null) {
                  result   = util.fromRight(step);
                  // We need to enqueue the Release with the same interrupt
                  // status as the Bracket that is initiating it.
                  attempts = new Aff(CONS, new Aff(RELEASE, attempt._2, result), attempts, tmp);
                  // We should only coninue as long as the interrupt status has not changed or
                  // we are currently within a non-interruptable finalizer.
                  if (interrupt === tmp || bracketCount > 0) {
                    status = CONTINUE;
                    step   = attempt._3(result);
                  }
                }
                break;

              // Enqueue the appropriate handler. We increase the bracket count
              // because it should not be cancelled.
              case RELEASE:
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                // It has only been killed if the interrupt status has changed
                // since we enqueued the item, and the bracket count is 0. If the
                // bracket count is non-zero then we are in a masked state so it's
                // impossible to be killed.
                if (interrupt && interrupt !== tmp && bracketCount === 0) {
                  step = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                } else if (fail) {
                  step = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                } else {
                  step = attempt._1.completed(util.fromRight(step))(attempt._2);
                }
                fail = null;
                bracketCount++;
                break;

              case FINALIZER:
                bracketCount++;
                attempts = new Aff(CONS, new Aff(FINALIZED, step, fail), attempts, interrupt);
                status   = CONTINUE;
                step     = attempt._1;
                break;

              case FINALIZED:
                bracketCount--;
                status = RETURN;
                step   = attempt._1;
                fail   = attempt._2;
                break;
              }
            }
            break;

          case COMPLETED:
            for (var k in joins) {
              if (joins.hasOwnProperty(k)) {
                rethrow = rethrow && joins[k].rethrow;
                runEff(joins[k].handler(step));
              }
            }
            joins = null;
            // If we have an interrupt and a fail, then the thread threw while
            // running finalizers. This should always rethrow in a fresh stack.
            if (interrupt && fail) {
              setTimeout(function () {
                throw util.fromLeft(fail);
              }, 0);
            // If we have an unhandled exception, and no other fiber has joined
            // then we need to throw the exception in a fresh stack.
            } else if (util.isLeft(step) && rethrow) {
              setTimeout(function () {
                // Guard on reathrow because a completely synchronous fiber can
                // still have an observer which was added after-the-fact.
                if (rethrow) {
                  throw util.fromLeft(step);
                }
              }, 0);
            }
            return;
          case SUSPENDED:
            status = CONTINUE;
            break;
          case PENDING: return;
          }
        }
      }

      function onComplete(join) {
        return function () {
          if (status === COMPLETED) {
            rethrow = rethrow && join.rethrow;
            join.handler(step)();
            return function () {};
          }

          var jid    = joinId++;
          joins      = joins || {};
          joins[jid] = join;

          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }

      function kill(error, cb) {
        return function () {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function () {};
          }

          var canceler = onComplete({
            rethrow: false,
            handler: function (/* unused */) {
              return cb(util.right(void 0));
            }
          })();

          switch (status) {
          case SUSPENDED:
            interrupt = util.left(error);
            status    = COMPLETED;
            step      = interrupt;
            run(runTick);
            break;
          case PENDING:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              if (status === PENDING) {
                attempts = new Aff(CONS, new Aff(FINALIZER, step(error)), attempts, interrupt);
              }
              status   = RETURN;
              step     = null;
              fail     = null;
              run(++runTick);
            }
            break;
          default:
            if (interrupt === null) {
              interrupt = util.left(error);
            }
            if (bracketCount === 0) {
              status = RETURN;
              step   = null;
              fail   = null;
            }
          }

          return canceler;
        };
      }

      function join(cb) {
        return function () {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run(runTick);
          }
          return canceler;
        };
      }

      return {
        kill: kill,
        join: join,
        onComplete: onComplete,
        isSuspended: function () {
          return status === SUSPENDED;
        },
        run: function () {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function () {
                run(runTick);
              });
            } else {
              run(runTick);
            }
          }
        }
      };
    }

    function runPar(util, supervisor, par, cb) {
      // Table of all forked fibers.
      var fiberId   = 0;
      var fibers    = {};

      // Table of currently running cancelers, as a product of `Alt` behavior.
      var killId    = 0;
      var kills     = {};

      // Error used for early cancelation on Alt branches.
      var early     = new Error("[ParAff] Early exit");

      // Error used to kill the entire tree.
      var interrupt = null;

      // The root pointer of the tree.
      var root      = EMPTY;

      // Walks a tree, invoking all the cancelers. Returns the table of pending
      // cancellation fibers.
      function kill(error, par, cb) {
        var step  = par;
        var head  = null;
        var tail  = null;
        var count = 0;
        var kills = {};
        var tmp, kid;

        loop: while (true) {
          tmp = null;

          switch (step.tag) {
          case FORKED:
            if (step._3 === EMPTY) {
              tmp = fibers[step._1];
              kills[count++] = tmp.kill(error, function (result) {
                return function () {
                  count--;
                  if (count === 0) {
                    cb(result)();
                  }
                };
              });
            }
            // Terminal case.
            if (head === null) {
              break loop;
            }
            // Go down the right side of the tree.
            step = head._2;
            if (tail === null) {
              head = null;
            } else {
              head = tail._1;
              tail = tail._2;
            }
            break;
          case MAP:
            step = step._2;
            break;
          case APPLY:
          case ALT:
            if (head) {
              tail = new Aff(CONS, head, tail);
            }
            head = step;
            step = step._1;
            break;
          }
        }

        if (count === 0) {
          cb(util.right(void 0))();
        } else {
          // Run the cancelation effects. We alias `count` because it's mutable.
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills[kid] = kills[kid]();
          }
        }

        return kills;
      }

      // When a fiber resolves, we need to bubble back up the tree with the
      // result, computing the applicative nodes.
      function join(result, head, tail) {
        var fail, step, lhs, rhs, tmp, kid;

        if (util.isLeft(result)) {
          fail = result;
          step = null;
        } else {
          step = result;
          fail = null;
        }

        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;

          // We should never continue if the entire tree has been interrupted.
          if (interrupt !== null) {
            return;
          }

          // We've made it all the way to the root of the tree, which means
          // the tree has fully evaluated.
          if (head === null) {
            cb(fail || step)();
            return;
          }

          // The tree has already been computed, so we shouldn't try to do it
          // again. This should never happen.
          // TODO: Remove this?
          if (head._3 !== EMPTY) {
            return;
          }

          switch (head.tag) {
          case MAP:
            if (fail === null) {
              head._3 = util.right(head._1(util.fromRight(step)));
              step    = head._3;
            } else {
              head._3 = fail;
            }
            break;
          case APPLY:
            lhs = head._1._3;
            rhs = head._2._3;
            // If we have a failure we should kill the other side because we
            // can't possible yield a result anymore.
            if (fail) {
              head._3 = fail;
              tmp     = true;
              kid     = killId++;

              kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(fail, null, null);
                  } else {
                    join(fail, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            } else if (lhs === EMPTY || rhs === EMPTY) {
              // We can only proceed if both sides have resolved.
              return;
            } else {
              step    = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
              head._3 = step;
            }
            break;
          case ALT:
            lhs = head._1._3;
            rhs = head._2._3;
            // We can only proceed if both have resolved or we have a success
            if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
              return;
            }
            // If both sides resolve with an error, we should continue with the
            // first error
            if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
              fail    = step === lhs ? rhs : lhs;
              step    = null;
              head._3 = fail;
            } else {
              head._3 = step;
              tmp     = true;
              kid     = killId++;
              // Once a side has resolved, we need to cancel the side that is still
              // pending before we can continue.
              kills[kid] = kill(early, step === lhs ? head._2 : head._1, function (/* unused */) {
                return function () {
                  delete kills[kid];
                  if (tmp) {
                    tmp = false;
                  } else if (tail === null) {
                    join(step, null, null);
                  } else {
                    join(step, tail._1, tail._2);
                  }
                };
              });

              if (tmp) {
                tmp = false;
                return;
              }
            }
            break;
          }

          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }

      function resolve(fiber) {
        return function (result) {
          return function () {
            delete fibers[fiber._1];
            fiber._3 = result;
            join(result, fiber._2._1, fiber._2._2);
          };
        };
      }

      // Walks the applicative tree, substituting non-applicative nodes with
      // `FORKED` nodes. In this tree, all applicative nodes use the `_3` slot
      // as a mutable slot for memoization. In an unresolved state, the `_3`
      // slot is `EMPTY`. In the cases of `ALT` and `APPLY`, we always walk
      // the left side first, because both operations are left-associative. As
      // we `RETURN` from those branches, we then walk the right side.
      function run() {
        var status = CONTINUE;
        var step   = par;
        var head   = null;
        var tail   = null;
        var tmp, fid;

        loop: while (true) {
          tmp = null;
          fid = null;

          switch (status) {
          case CONTINUE:
            switch (step.tag) {
            case MAP:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(MAP, step._1, EMPTY, EMPTY);
              step = step._2;
              break;
            case APPLY:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(APPLY, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            case ALT:
              if (head) {
                tail = new Aff(CONS, head, tail);
              }
              head = new Aff(ALT, EMPTY, step._2, EMPTY);
              step = step._1;
              break;
            default:
              // When we hit a leaf value, we suspend the stack in the `FORKED`.
              // When the fiber resolves, it can bubble back up the tree.
              fid    = fiberId++;
              status = RETURN;
              tmp    = step;
              step   = new Aff(FORKED, fid, new Aff(CONS, head, tail), EMPTY);
              tmp    = Fiber(util, supervisor, tmp);
              tmp.onComplete({
                rethrow: false,
                handler: resolve(step)
              })();
              fibers[fid] = tmp;
              if (supervisor) {
                supervisor.register(tmp);
              }
            }
            break;
          case RETURN:
            // Terminal case, we are back at the root.
            if (head === null) {
              break loop;
            }
            // If we are done with the right side, we need to continue down the
            // left. Otherwise we should continue up the stack.
            if (head._1 === EMPTY) {
              head._1 = step;
              status  = CONTINUE;
              step    = head._2;
              head._2 = EMPTY;
            } else {
              head._2 = step;
              step    = head;
              if (tail === null) {
                head  = null;
              } else {
                head  = tail._1;
                tail  = tail._2;
              }
            }
          }
        }

        // Keep a reference to the tree root so it can be cancelled.
        root = step;

        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }

      // Cancels the entire tree. If there are already subtrees being canceled,
      // we need to first cancel those joins. We will then add fresh joins for
      // all pending branches including those that were in the process of being
      // canceled.
      function cancel(error, cb) {
        interrupt = util.left(error);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }

        kills = null;
        var newKills = kill(error, root, cb);

        return function (killError) {
          return new Aff(ASYNC, function (killCb) {
            return function () {
              for (var kid in newKills) {
                if (newKills.hasOwnProperty(kid)) {
                  newKills[kid]();
                }
              }
              return nonCanceler;
            };
          });
        };
      }

      run();

      return function (killError) {
        return new Aff(ASYNC, function (killCb) {
          return function () {
            return cancel(killError, killCb);
          };
        });
      };
    }

    function sequential(util, supervisor, par) {
      return new Aff(ASYNC, function (cb) {
        return function () {
          return runPar(util, supervisor, par, cb);
        };
      });
    }

    Aff.EMPTY       = EMPTY;
    Aff.Pure        = AffCtr(PURE);
    Aff.Throw       = AffCtr(THROW);
    Aff.Catch       = AffCtr(CATCH);
    Aff.Sync        = AffCtr(SYNC);
    Aff.Async       = AffCtr(ASYNC);
    Aff.Bind        = AffCtr(BIND);
    Aff.Bracket     = AffCtr(BRACKET);
    Aff.Fork        = AffCtr(FORK);
    Aff.Seq         = AffCtr(SEQ);
    Aff.ParMap      = AffCtr(MAP);
    Aff.ParApply    = AffCtr(APPLY);
    Aff.ParAlt      = AffCtr(ALT);
    Aff.Fiber       = Fiber;
    Aff.Supervisor  = Supervisor;
    Aff.Scheduler   = Scheduler;
    Aff.nonCanceler = nonCanceler;

    return Aff;
  }();

  exports._pure = Aff.Pure;

  exports._throwError = Aff.Throw;

  exports._catchError = function (aff) {
    return function (k) {
      return Aff.Catch(aff, k);
    };
  };

  exports._map = function (f) {
    return function (aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function (value) {
          return Aff.Pure(f(value));
        });
      }
    };
  };

  exports._bind = function (aff) {
    return function (k) {
      return Aff.Bind(aff, k);
    };
  };

  exports._fork = function (immediate) {
    return function (aff) {
      return Aff.Fork(immediate, aff);
    };
  };

  exports._liftEffect = Aff.Sync;

  exports._parAffMap = function (f) {
    return function (aff) {
      return Aff.ParMap(f, aff);
    };
  };

  exports._parAffApply = function (aff1) {
    return function (aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  };

  exports.makeAff = Aff.Async;

  exports._makeFiber = function (util, aff) {
    return function () {
      return Aff.Fiber(util, null, aff);
    };
  };  

  exports._sequential = Aff.Seq;
})(PS["Effect.Aff"] = PS["Effect.Aff"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];         

  // | The `MonadEffect` class captures those monads which support native effects.
  // |
  // | Instances are provided for `Effect` itself, and the standard monad
  // | transformers.
  // |
  // | `liftEffect` can be used in any appropriate monad transformer stack to lift an
  // | action of type `Effect a` into the monad.
  // |
  var MonadEffect = function (Monad0, liftEffect) {
      this.Monad0 = Monad0;
      this.liftEffect = liftEffect;
  };                                                         
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["MonadEffect"] = MonadEffect;
})(PS);
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports.unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports.crashWith = function () {
    return function (msg) {
      throw new Error(msg);
    };
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | Some partial helper functions. See the README for more documentation.
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];
  exports["crashWith"] = $foreign.crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Utilities for working with partial functions.
  // | See the README for more documentation.
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];

  // | A function which crashes with the specified error message.
  var unsafeCrashWith = function (msg) {
      return $foreign.unsafePartial(function (dictPartial) {
          return Partial.crashWith(dictPartial)(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.Aff"] = $PS["Effect.Aff"] || {};
  var exports = $PS["Effect.Aff"];
  var $foreign = $PS["Effect.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad = $PS["Control.Monad"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Control_Parallel_Class = $PS["Control.Parallel.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];

  // | A cancellation effect for actions run via `makeAff`. If a `Fiber` is
  // | killed, and an async action is pending, the canceler will be called to
  // | clean it up.
  var Canceler = function (x) {
      return x;
  };           
  var functorParAff = new Data_Functor.Functor($foreign["_parAffMap"]);
  var functorAff = new Data_Functor.Functor($foreign["_map"]);

  // | Forks am `Aff` from within a parent `Aff` context, returning the `Fiber`.
  var forkAff = $foreign["_fork"](true);
  var ffiUtil = (function () {
      var unsafeFromRight = function (v) {
          if (v instanceof Data_Either.Right) {
              return v.value0;
          };
          if (v instanceof Data_Either.Left) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromRight: Left");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 400, column 21 - line 402, column 31): " + [ v.constructor.name ]);
      };
      var unsafeFromLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return v.value0;
          };
          if (v instanceof Data_Either.Right) {
              return Partial_Unsafe.unsafeCrashWith("unsafeFromLeft: Right");
          };
          throw new Error("Failed pattern match at Effect.Aff (line 395, column 20 - line 399, column 3): " + [ v.constructor.name ]);
      };
      var isLeft = function (v) {
          if (v instanceof Data_Either.Left) {
              return true;
          };
          if (v instanceof Data_Either.Right) {
              return false;
          };
          throw new Error("Failed pattern match at Effect.Aff (line 390, column 12 - line 392, column 20): " + [ v.constructor.name ]);
      };
      return {
          isLeft: isLeft,
          fromLeft: unsafeFromLeft,
          fromRight: unsafeFromRight,
          left: Data_Either.Left.create,
          right: Data_Either.Right.create
      };
  })();
  var makeFiber = function (aff) {
      return $foreign["_makeFiber"](ffiUtil, aff);
  };

  // | Forks an `Aff` from an `Effect` context, returning the `Fiber`.
  var launchAff = function (aff) {
      return function __do() {
          var v = makeFiber(aff)();
          v.run();
          return v;
      };
  };

  // | Runs effects in parallel, combining their results.
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, $foreign["_parAffApply"]);
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, $foreign["_bind"]);
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, Control_Monad.ap(monadAff));
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, $foreign["_pure"]);
  var monadEffectAff = new Effect_Class.MonadEffect(function () {
      return monadAff;
  }, $foreign["_liftEffect"]);

  // | A canceler from an Effect action.
  var effectCanceler = function ($50) {
      return Canceler(Data_Function["const"](Effect_Class.liftEffect(monadEffectAff)($50)));
  };
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, $foreign["_throwError"]);
  var monadErrorAff = new Control_Monad_Error_Class.MonadError(function () {
      return monadThrowAff;
  }, $foreign["_catchError"]);

  // | A monomorphic version of `try`. Catches thrown errors and lifts them
  // | into an `Either`.
  var attempt = Control_Monad_Error_Class["try"](monadErrorAff);

  // | Forks an `Aff` from an `Effect` context and also takes a callback to run when
  // | it completes. Returns the pending `Fiber`.
  var runAff = function (k) {
      return function (aff) {
          return launchAff(Control_Bind.bindFlipped(bindAff)(function ($52) {
              return Effect_Class.liftEffect(monadEffectAff)(k($52));
          })(Control_Monad_Error_Class["try"](monadErrorAff)(aff)));
      };
  };
  var parallelAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, Unsafe_Coerce.unsafeCoerce, $foreign["_sequential"]);
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, function ($54) {
      return Control_Parallel_Class.parallel(parallelAff)(Control_Applicative.pure(applicativeAff)($54));
  });
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (err) {
              return Control_Parallel.parSequence_(parallelAff)(Data_Foldable.foldableArray)([ v(err), v1(err) ]);
          };
      };
  });

  // | A canceler which does not cancel anything.
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(Data_Unit.unit));

  // | A no-op `Canceler` can be constructed with `mempty`.
  var monoidCanceler = new Data_Monoid.Monoid(function () {
      return semigroupCanceler;
  }, nonCanceler);

  // | Ignores any errors.
  var apathize = function ($56) {
      return Data_Functor.map(functorAff)(Data_Function["const"](Data_Unit.unit))(attempt($56));
  };
  exports["Canceler"] = Canceler;
  exports["launchAff"] = launchAff;
  exports["runAff"] = runAff;
  exports["forkAff"] = forkAff;
  exports["attempt"] = attempt;
  exports["apathize"] = apathize;
  exports["nonCanceler"] = nonCanceler;
  exports["effectCanceler"] = effectCanceler;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadErrorAff"] = monadErrorAff;
  exports["monadEffectAff"] = monadEffectAff;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelAff"] = parallelAff;
  exports["semigroupCanceler"] = semigroupCanceler;
  exports["monoidCanceler"] = monoidCanceler;
  exports["makeAff"] = $foreign.makeAff;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.Aff.AVar"] = $PS["Effect.Aff.AVar"] || {};
  var exports = $PS["Effect.Aff.AVar"];
  var Effect_AVar = $PS["Effect.AVar"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];

  // | Takes the AVar value, leaving it empty. If the AVar is already empty,
  // | the callback will be queued until the AVar is filled. Multiple takes will
  // | resolve in order as the AVar fills.
  var take = function (avar) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v = Effect_AVar.take(avar)(k)();
              return Effect_Aff.effectCanceler(v);
          };
      });
  };

  // | Reads the AVar value. Unlike `take`, this will not leave the AVar empty.
  // | If the AVar is empty, this will queue until it is filled. Multiple reads
  // | will resolve at the same time, as soon as possible.
  var read = function (avar) {
      return Effect_Aff.makeAff(function (k) {
          return function __do() {
              var v = Effect_AVar.read(avar)(k)();
              return Effect_Aff.effectCanceler(v);
          };
      });
  };

  // | Sets the value of the AVar. If the AVar is already filled, it will be
  // | queued until the value is emptied. Multiple puts will resolve in order as
  // | the AVar becomes available.
  var put = function (value) {
      return function (avar) {
          return Effect_Aff.makeAff(function (k) {
              return function __do() {
                  var v = Effect_AVar.put(value)(avar)(k)();
                  return Effect_Aff.effectCanceler(v);
              };
          });
      };
  };

  // | Creates a fresh AVar.
  var empty = Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_AVar.empty);
  exports["empty"] = empty;
  exports["take"] = take;
  exports["put"] = put;
  exports["read"] = read;
})(PS);
(function(exports) {
  "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };

  exports.error = function (s) {
    return function () {
      console.error(s);
      return {};
    };
  };
})(PS["Effect.Console"] = PS["Effect.Console"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.Console"] = $PS["Effect.Console"] || {};
  var exports = $PS["Effect.Console"];
  var $foreign = $PS["Effect.Console"];
  exports["log"] = $foreign.log;
  exports["error"] = $foreign.error;
})(PS);
(function(exports) {
  "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.message = function (e) {
    return e.message;
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };

  exports.catchException = function (c) {
    return function (t) {
      return function () {
        try {
          return t();
        } catch (e) {
          if (e instanceof Error || Object.prototype.toString.call(e) === "[object Error]") {
            return c(e)();
          } else {
            return c(new Error(e.toString()))();
          }
        }
      };
    };
  };
})(PS["Effect.Exception"] = PS["Effect.Exception"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines an effect, actions and handlers for working
  // | with JavaScript exceptions.
  "use strict";
  $PS["Effect.Exception"] = $PS["Effect.Exception"] || {};
  var exports = $PS["Effect.Exception"];
  var $foreign = $PS["Effect.Exception"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                

  // | Runs an Eff and returns eventual Exceptions as a `Left` value. If the
  // | computation succeeds the result gets wrapped in a `Right`.
  // |
  // | For example:
  // |
  // | ```purescript
  // | main :: forall eff. Effect Unit
  // | main = do
  // |   result <- try (readTextFile UTF8 "README.md")
  // |   case result of
  // |     Right lines ->
  // |       Console.log ("README: \n" <> lines )
  // |     Left error ->
  // |       Console.error ("Couldn't open README.md. Error was: " <> show error)
  // | ```
  var $$try = function (action) {
      return $foreign.catchException(function ($0) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Either.Left.create($0));
      })(Data_Functor.map(Effect.functorEffect)(Data_Either.Right.create)(action));
  };
  exports["try"] = $$try;
  exports["error"] = $foreign.error;
  exports["message"] = $foreign.message;
  exports["throwException"] = $foreign.throwException;
  exports["catchException"] = $foreign.catchException;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.Exception.Unsafe"] = $PS["Effect.Exception.Unsafe"] || {};
  var exports = $PS["Effect.Exception.Unsafe"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];                

  // | Throw an exception in pure code. This function should be used very
  // | sparingly, as it can cause unexpected crashes at runtime.
  var unsafeThrowException = function ($0) {
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.throwException($0));
  };

  // | Defined as `unsafeThrowException <<< error`.
  var unsafeThrow = function ($1) {
      return unsafeThrowException(Effect_Exception.error($1));
  };
  exports["unsafeThrowException"] = unsafeThrowException;
  exports["unsafeThrow"] = unsafeThrow;
})(PS);
(function(exports) {
  "use strict";

  exports.now = function () {
    return Date.now();
  };
})(PS["Effect.Now"] = PS["Effect.Now"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Effect.Now"] = $PS["Effect.Now"] || {};
  var exports = $PS["Effect.Now"];
  var $foreign = $PS["Effect.Now"];
  var Data_DateTime_Instant = $PS["Data.DateTime.Instant"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];

  // | Gets a `DateTime` value for the date and time according to the current
  // | machine’s clock.
  var nowDateTime = Data_Functor.map(Effect.functorEffect)(Data_DateTime_Instant.toDateTime)($foreign.now);
  exports["nowDateTime"] = nowDateTime;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines an effect and actions for working with
  // | global mutable variables.
  // |
  // | _Note_: `Control.Monad.ST` provides a _safe_ alternative
  // | to global mutable variables when mutation is restricted to a
  // | local scope.
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Foreign.Generic.Class"] = $PS["Foreign.Generic.Class"] || {};
  var exports = $PS["Foreign.Generic.Class"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Foreign = $PS["Foreign"];

  // | The `Decode` class is used to generate decoding functions
  // | of the form `Foreign -> F a` using `generics-rep` deriving.
  // |
  // | First, derive `Generic` for your data:
  // |
  // | ```purescript
  // | import Data.Generic.Rep
  // |
  // | data MyType = MyType ...
  // |
  // | derive instance genericMyType :: Generic MyType _
  // | ```
  // |
  // | You can then use the `genericDecode` and `genericDecodeJSON` functions
  // | to decode your foreign/JSON-encoded data.
  var Decode = function (decode) {
      this.decode = decode;
  };                                                     
  var stringDecode = new Decode(Foreign.readString);  
  var intDecode = new Decode(Foreign.readInt);                                           
  var foreignDecode = new Decode(Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)));
  var decode = function (dict) {
      return dict.decode;
  };
  var arrayDecode = function (dictDecode) {
      return new Decode((function () {
          var readElement = function (i) {
              return function (value) {
                  return Control_Monad_Except.mapExcept(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtIndex.create(i))))(decode(dictDecode)(value));
              };
          };
          var readElements = function (arr) {
              return Data_Traversable.sequence(Data_Traversable.traversableArray)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Array.zipWith(readElement)(Data_Array.range(0)(Data_Array.length(arr)))(arr));
          };
          return Control_Bind.composeKleisli(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign.readArray)(readElements);
      })());
  };
  exports["decode"] = decode;
  exports["Decode"] = Decode;
  exports["foreignDecode"] = foreignDecode;
  exports["stringDecode"] = stringDecode;
  exports["intDecode"] = intDecode;
  exports["arrayDecode"] = arrayDecode;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeReadPropImpl = function (f, s, key, value) {
    return value == null ? f : s(value[key]);
  };
})(PS["Foreign.Index"] = PS["Foreign.Index"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines a type class for types which act like
  // | _property indices_.
  "use strict";
  $PS["Foreign.Index"] = $PS["Foreign.Index"] || {};
  var exports = $PS["Foreign.Index"];
  var $foreign = $PS["Foreign.Index"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Identity = $PS["Data.Identity"];
  var Foreign = $PS["Foreign"];
  var unsafeReadProp = function (k) {
      return function (value) {
          return $foreign.unsafeReadPropImpl(Foreign.fail(new Foreign.TypeMismatch("object", Foreign.typeOf(value))), Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity)), k, value);
      };
  };

  // | Attempt to read a value from a foreign value property
  var readProp = unsafeReadProp;
  exports["readProp"] = readProp;
})(PS);
(function(exports) {
  "use strict";

  exports.parseJSONImpl = function (str) {
    return JSON.parse(str);
  };
})(PS["Foreign.JSON"] = PS["Foreign.JSON"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Foreign.JSON"] = $PS["Foreign.JSON"] || {};
  var exports = $PS["Foreign.JSON"];
  var $foreign = $PS["Foreign.JSON"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Either = $PS["Data.Either"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Foreign = $PS["Foreign"];                

  // | Parse a JSON string as `Foreign` data
  var parseJSON = function ($0) {
      return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function ($1) {
          return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Foreign.ForeignError.create(Effect_Exception.message($1)));
      })(Effect_Unsafe.unsafePerformEffect(Effect_Exception["try"](function () {
          return $foreign.parseJSONImpl($0);
      })))));
  };
  exports["parseJSON"] = parseJSON;
})(PS);
(function(exports) {
  /* globals exports, JSON */
  "use strict";

  exports.unsafeStringify = function (x) {
    return JSON.stringify(x);
  };
})(PS["Global.Unsafe"] = PS["Global.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Global.Unsafe"] = $PS["Global.Unsafe"] || {};
  var exports = $PS["Global.Unsafe"];
  var $foreign = $PS["Global.Unsafe"];
  exports["unsafeStringify"] = $foreign.unsafeStringify;
})(PS);
(function(exports) {
  // module Main

  "use strict";

  exports.logStack = function logStack(err) {
    return function() {
      console.log(err.stack);
    };
  };
})(PS["Main"] = PS["Main"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.Encoding"] = $PS["Node.Encoding"] || {};
  var exports = $PS["Node.Encoding"];
  var Data_Show = $PS["Data.Show"];                
  var ASCII = (function () {
      function ASCII() {

      };
      ASCII.value = new ASCII();
      return ASCII;
  })();
  var UTF8 = (function () {
      function UTF8() {

      };
      UTF8.value = new UTF8();
      return UTF8;
  })();
  var UTF16LE = (function () {
      function UTF16LE() {

      };
      UTF16LE.value = new UTF16LE();
      return UTF16LE;
  })();
  var UCS2 = (function () {
      function UCS2() {

      };
      UCS2.value = new UCS2();
      return UCS2;
  })();
  var Base64 = (function () {
      function Base64() {

      };
      Base64.value = new Base64();
      return Base64;
  })();
  var Latin1 = (function () {
      function Latin1() {

      };
      Latin1.value = new Latin1();
      return Latin1;
  })();
  var Binary = (function () {
      function Binary() {

      };
      Binary.value = new Binary();
      return Binary;
  })();
  var Hex = (function () {
      function Hex() {

      };
      Hex.value = new Hex();
      return Hex;
  })();
  var showEncoding = new Data_Show.Show(function (v) {
      if (v instanceof ASCII) {
          return "ASCII";
      };
      if (v instanceof UTF8) {
          return "UTF8";
      };
      if (v instanceof UTF16LE) {
          return "UTF16LE";
      };
      if (v instanceof UCS2) {
          return "UCS2";
      };
      if (v instanceof Base64) {
          return "Base64";
      };
      if (v instanceof Latin1) {
          return "Latin1";
      };
      if (v instanceof Binary) {
          return "Binary";
      };
      if (v instanceof Hex) {
          return "Hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 19, column 1 - line 19, column 39): " + [ v.constructor.name ]);
  });

  // | Convert an `Encoding` to a `String` in the format expected by Node.js
  // | APIs.
  var encodingToNode = function (v) {
      if (v instanceof ASCII) {
          return "ascii";
      };
      if (v instanceof UTF8) {
          return "utf8";
      };
      if (v instanceof UTF16LE) {
          return "utf16le";
      };
      if (v instanceof UCS2) {
          return "ucs2";
      };
      if (v instanceof Base64) {
          return "base64";
      };
      if (v instanceof Latin1) {
          return "latin1";
      };
      if (v instanceof Binary) {
          return "binary";
      };
      if (v instanceof Hex) {
          return "hex";
      };
      throw new Error("Failed pattern match at Node.Encoding (line 31, column 1 - line 31, column 37): " + [ v.constructor.name ]);
  };
  exports["ASCII"] = ASCII;
  exports["UTF8"] = UTF8;
  exports["UTF16LE"] = UTF16LE;
  exports["UCS2"] = UCS2;
  exports["Base64"] = Base64;
  exports["Latin1"] = Latin1;
  exports["Binary"] = Binary;
  exports["Hex"] = Hex;
  exports["encodingToNode"] = encodingToNode;
  exports["showEncoding"] = showEncoding;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafeRequireFS = require("fs");
})(PS["Node.FS.Internal"] = PS["Node.FS.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.FS.Internal"] = $PS["Node.FS.Internal"] || {};
  var exports = $PS["Node.FS.Internal"];
  var $foreign = $PS["Node.FS.Internal"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  exports["mkEffect"] = mkEffect;
  exports["unsafeRequireFS"] = $foreign.unsafeRequireFS;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.FS.Sync"] = $PS["Node.FS.Sync"] || {};
  var exports = $PS["Node.FS.Sync"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];          
  var fs = Node_FS_Internal.unsafeRequireFS;

  // | Reads the entire contents of a text file with the specified encoding.
  var readTextFile = function (encoding) {
      return function (file) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFileSync(file, {
                  encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
              });
          });
      };
  };
  exports["readTextFile"] = readTextFile;
})(PS);
(function(exports) {
  "use strict";
  var path =require("path"); 

  exports.normalize = path.normalize;

  exports.concat = function (segments) {
    return path.join.apply(this, segments);
  };

  exports.resolve = function (from) {
    return function (to) {
      return function () {
        return path.resolve.apply(this, from.concat([to]));
      };
    };
  };

  exports.dirname = function (p) {
    return path.normalize(path.dirname(p));
  };

  exports.basename = path.basename;

  exports.sep = path.sep;

  exports.delimiter = path.delimiter;

  exports.parse = path.parse;
})(PS["Node.Path"] = PS["Node.Path"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.Path"] = $PS["Node.Path"] || {};
  var exports = $PS["Node.Path"];
  var $foreign = $PS["Node.Path"];
  exports["concat"] = $foreign.concat;
  exports["resolve"] = $foreign.resolve;
  exports["dirname"] = $foreign.dirname;
  exports["basename"] = $foreign.basename;
  exports["sep"] = $foreign.sep;
  exports["delimiter"] = $foreign.delimiter;
  exports["parse"] = $foreign.parse;
})(PS);
(function(exports) {
  "use strict";

  exports.process = process;

  exports.onSignalImpl = function (signal) {
    return function (callback) {
      return function () {
        process.on(signal, callback);
      };
    };
  };

  exports.chdir = function (dir) {
    return function () {
      process.chdir(dir);
    };
  };

  exports.setEnv = function (var_) {
    return function (val) {
      return function () {
        process.env[var_] = val;
      };
    };
  };

  exports.exit = function (code) {
    return function () {
      process.exit(code);
    };
  };
})(PS["Node.Process"] = PS["Node.Process"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines data type for the different platforms supported by
  // | Node.js
  "use strict";
  $PS["Node.Platform"] = $PS["Node.Platform"] || {};
  var exports = $PS["Node.Platform"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];              

  // | See [the Node docs](https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_platform).
  var AIX = (function () {
      function AIX() {

      };
      AIX.value = new AIX();
      return AIX;
  })();

  // | See [the Node docs](https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_platform).
  var Darwin = (function () {
      function Darwin() {

      };
      Darwin.value = new Darwin();
      return Darwin;
  })();

  // | See [the Node docs](https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_platform).
  var FreeBSD = (function () {
      function FreeBSD() {

      };
      FreeBSD.value = new FreeBSD();
      return FreeBSD;
  })();

  // | See [the Node docs](https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_platform).
  var Linux = (function () {
      function Linux() {

      };
      Linux.value = new Linux();
      return Linux;
  })();

  // | See [the Node docs](https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_platform).
  var OpenBSD = (function () {
      function OpenBSD() {

      };
      OpenBSD.value = new OpenBSD();
      return OpenBSD;
  })();

  // | See [the Node docs](https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_platform).
  var SunOS = (function () {
      function SunOS() {

      };
      SunOS.value = new SunOS();
      return SunOS;
  })();

  // | See [the Node docs](https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_platform).
  var Win32 = (function () {
      function Win32() {

      };
      Win32.value = new Win32();
      return Win32;
  })();

  // | See [the Node docs](https://nodejs.org/dist/latest-v6.x/docs/api/os.html#os_os_platform).
  var Android = (function () {
      function Android() {

      };
      Android.value = new Android();
      return Android;
  })();

  // | Attempt to parse a `Platform` value from a string, in the format returned
  // | by Node.js' `process.platform`.
  var fromString = function (v) {
      if (v === "aix") {
          return new Data_Maybe.Just(AIX.value);
      };
      if (v === "darwin") {
          return new Data_Maybe.Just(Darwin.value);
      };
      if (v === "freebsd") {
          return new Data_Maybe.Just(FreeBSD.value);
      };
      if (v === "linux") {
          return new Data_Maybe.Just(Linux.value);
      };
      if (v === "openbsd") {
          return new Data_Maybe.Just(OpenBSD.value);
      };
      if (v === "sunos") {
          return new Data_Maybe.Just(SunOS.value);
      };
      if (v === "win32") {
          return new Data_Maybe.Just(Win32.value);
      };
      if (v === "android") {
          return new Data_Maybe.Just(Android.value);
      };
      return Data_Maybe.Nothing.value;
  };
  var eqPlatform = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof AIX && y instanceof AIX) {
              return true;
          };
          if (x instanceof Darwin && y instanceof Darwin) {
              return true;
          };
          if (x instanceof FreeBSD && y instanceof FreeBSD) {
              return true;
          };
          if (x instanceof Linux && y instanceof Linux) {
              return true;
          };
          if (x instanceof OpenBSD && y instanceof OpenBSD) {
              return true;
          };
          if (x instanceof SunOS && y instanceof SunOS) {
              return true;
          };
          if (x instanceof Win32 && y instanceof Win32) {
              return true;
          };
          if (x instanceof Android && y instanceof Android) {
              return true;
          };
          return false;
      };
  });
  exports["AIX"] = AIX;
  exports["Darwin"] = Darwin;
  exports["FreeBSD"] = FreeBSD;
  exports["Linux"] = Linux;
  exports["OpenBSD"] = OpenBSD;
  exports["SunOS"] = SunOS;
  exports["Win32"] = Win32;
  exports["Android"] = Android;
  exports["fromString"] = fromString;
  exports["eqPlatform"] = eqPlatform;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Bindings to the global `process` object in Node.js. See also [the Node API documentation](https://nodejs.org/api/process.html)
  "use strict";
  $PS["Node.Process"] = $PS["Node.Process"] || {};
  var exports = $PS["Node.Process"];
  var $foreign = $PS["Node.Process"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Effect = $PS["Effect"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Platform = $PS["Node.Platform"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                

  // | Get the Node.js version.
  var version = $foreign.process.version;         

  // | The standard output stream. Note that this stream cannot be closed; calling
  // | `end` will result in an exception being thrown.
  var stdout = $foreign.process.stdout;

  // | The standard input stream. Note that this stream will never emit an `end`
  // | event, so any handlers attached via `onEnd` will never be called.
  var stdin = $foreign.process.stdin;             

  // | The standard error stream. Note that this stream cannot be closed; calling
  // | `end` will result in an exception being thrown.
  var stderr = $foreign.process.stderr;
  var platformStr = $foreign.process.platform;
  var platform = Node_Platform.fromString(platformStr);

  // | Install a handler for a particular signal.
  var onSignal = function (sig) {
      return $foreign.onSignalImpl(Data_Posix_Signal.toString(sig));
  };
  var mkEffect = Unsafe_Coerce.unsafeCoerce;

  // | Get a copy of the current environment.
  var getEnv = mkEffect(function (v) {
      return $foreign.process.env;
  });

  // | Lookup a particular environment variable.
  var lookupEnv = function (k) {
      return Data_Functor.map(Effect.functorEffect)(Foreign_Object.lookup(k))(getEnv);
  }; 

  // | Get the current working directory of the process.
  var cwd = $foreign.process.cwd;

  // | Get an array containing the command line arguments. Be aware
  // | that this can change over the course of the program.
  var argv = mkEffect(function (v) {
      return $foreign.process.argv;
  });
  exports["onSignal"] = onSignal;
  exports["argv"] = argv;
  exports["cwd"] = cwd;
  exports["getEnv"] = getEnv;
  exports["lookupEnv"] = lookupEnv;
  exports["platform"] = platform;
  exports["stdin"] = stdin;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["version"] = version;
  exports["chdir"] = $foreign.chdir;
  exports["setEnv"] = $foreign.setEnv;
  exports["exit"] = $foreign.exit;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Args"] = $PS["Pulp.Args"] || {};
  var exports = $PS["Pulp.Args"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Foreign = $PS["Foreign"];
  var runAction = function (v) {
      return v;
  };
  var option = function (name) {
      return function (match) {
          return function (parser) {
              return function (desc) {
                  return {
                      name: name,
                      match: match,
                      parser: parser,
                      desc: desc,
                      defaultValue: Data_Maybe.Nothing.value
                  };
              };
          };
      };
  };
  var optionDefault = function (n) {
      return function (m) {
          return function (p) {
              return function (d) {
                  return function (defaultValue) {
                      var v = option(n)(m)(p)(d);
                      return {
                          name: v.name,
                          match: v.match,
                          parser: v.parser,
                          desc: v.desc,
                          defaultValue: new Data_Maybe.Just(Foreign.unsafeToForeign(defaultValue))
                      };
                  };
              };
          };
      };
  };
  var command = function (name) {
      return function (desc) {
          return function (passthroughDesc) {
              return function (action) {
                  return function (options) {
                      return {
                          name: name,
                          desc: desc,
                          passthroughDesc: passthroughDesc,
                          options: options,
                          action: action,
                          "arguments": [  ],
                          alias: [  ]
                      };
                  };
              };
          };
      };
  };
  var commandWithAlias = function (name) {
      return function (desc) {
          return function (passthroughDesc) {
              return function (action) {
                  return function (options) {
                      return function (alias) {
                          var v = command(name)(desc)(passthroughDesc)(action)(options);
                          return {
                              name: v.name,
                              desc: v.desc,
                              alias: alias,
                              passthroughDesc: v.passthroughDesc,
                              options: v.options,
                              "arguments": v["arguments"],
                              action: v.action
                          };
                      };
                  };
              };
          };
      };
  };
  var commandWithArgs = function (name) {
      return function (desc) {
          return function (passthroughDesc) {
              return function (action) {
                  return function (options) {
                      return function (args) {
                          var v = command(name)(desc)(passthroughDesc)(action)(options);
                          return {
                              name: v.name,
                              desc: v.desc,
                              alias: v.alias,
                              passthroughDesc: v.passthroughDesc,
                              options: v.options,
                              "arguments": args,
                              action: v.action
                          };
                      };
                  };
              };
          };
      };
  };
  var argument = function (name) {
      return function (parser) {
          return function (desc) {
              return function (required) {
                  return {
                      name: name,
                      parser: parser,
                      desc: desc,
                      required: required
                  };
              };
          };
      };
  };
  exports["runAction"] = runAction;
  exports["option"] = option;
  exports["optionDefault"] = optionDefault;
  exports["argument"] = argument;
  exports["command"] = command;
  exports["commandWithArgs"] = commandWithArgs;
  exports["commandWithAlias"] = commandWithAlias;
})(PS);
(function(exports) {
  // module Pulp.System.FFI

  "use strict";

  exports["runNode'"] = function runNode$prime(error, success, fn) {
    return function() {
      fn(function(err, val) {
        if (err) { error(err)(); } else { success(val)(); }
      });
    };
  };

  exports.unsafeInspect = function unsafeInspect(obj) {
    return require('util').inspect(obj);
  };
})(PS["Pulp.System.FFI"] = PS["Pulp.System.FFI"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.System.FFI"] = $PS["Pulp.System.FFI"] || {};
  var exports = $PS["Pulp.System.FFI"];
  var $foreign = $PS["Pulp.System.FFI"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];                
  var runNode = function (fn) {
      return Effect_Aff.makeAff(function (cb) {
          return Control_Apply.applyFirst(Effect.applyEffect)(Data_Monoid.mempty(Effect.monoidEffect(Effect_Aff.monoidCanceler)))($foreign["runNode'"](function ($0) {
              return cb(Data_Either.Left.create($0));
          }, function ($1) {
              return cb(Data_Either.Right.create($1));
          }, fn));
      });
  };
  exports["runNode"] = runNode;
  exports["unsafeInspect"] = $foreign.unsafeInspect;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Functions for getting data back out of an `Options` value.
  "use strict";
  $PS["Pulp.Args.Get"] = $PS["Pulp.Args.Get"] || {};
  var exports = $PS["Pulp.Args.Get"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Pulp_System_FFI = $PS["Pulp.System.FFI"];                
  var internalError = function (msg) {
      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Internal error in Pulp.Args.Get: " + (msg + ("\x0a" + "This is a bug. Please report it.\x0a"))));
  };
  var readForeign = function (dictDecode) {
      return function (name) {
          return function (thing) {
              var v = Control_Monad_Except.runExcept(Foreign_Generic_Class.decode(dictDecode)(thing));
              if (v instanceof Data_Either.Left) {
                  return internalError(Data_String_Common.joinWith("\x0a")([ "Failed to read option: " + name, "The value was: " + Pulp_System_FFI.unsafeInspect(thing), "Foreign.read failed: " + Data_Show.show(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(v.value0) ]));
              };
              if (v instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value0);
              };
              throw new Error("Failed pattern match at Pulp.Args.Get (line 74, column 3 - line 82, column 13): " + [ v.constructor.name ]);
          };
      };
  };

  // | Get an option out of the `Options` value. If the option has no default and
  // | was not specified at the command line, the result will be `Nothing`. For
  // | options which do have defaults, you probably want the primed version
  // | instead, `getOption'`.
  var getOption = function (dictDecode) {
      return function (name) {
          return function (opts) {
              var v = Data_Map_Internal.lookup(Data_Ord.ordString)(name)(opts);
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Maybe.Just) {
                  return Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.Just.create)(readForeign(dictDecode)(name)(v.value0.value0));
              };
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Maybe.Nothing) {
                  var msg = "Tried to read a flag as an option: " + name;
                  return internalError(msg);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
              };
              throw new Error("Failed pattern match at Pulp.Args.Get (line 31, column 3 - line 38, column 19): " + [ v.constructor.name ]);
          };
      };
  };

  // | Get an option which was declared with a default value, and therefore
  // | should always have a value.
  var getOption$prime = function (dictDecode) {
      return function (name) {
          return function (opts) {
              return Control_Bind.bind(Effect_Aff.bindAff)(getOption(dictDecode)(name)(opts))(function (v) {
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value0);
                  };
                  if (v instanceof Data_Maybe.Nothing) {
                      var msg = "Missing default value for option: " + name;
                      return internalError(msg);
                  };
                  throw new Error("Failed pattern match at Pulp.Args.Get (line 45, column 3 - line 50, column 27): " + [ v.constructor.name ]);
              });
          };
      };
  };

  // | True if a given option exists in the `Options` map, false otherwise.
  var hasOption = function (name) {
      return function (opts) {
          var opt = getOption(Foreign_Generic_Class.foreignDecode)(name)(opts);
          return Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.isJust)(opt);
      };
  };

  // | Get a flag out of the `Options` value. If it was specified at the command
  // | line, the result is `true`, otherwise, `false`.
  var getFlag = function (name) {
      return function (opts) {
          var v = Data_Map_Internal.lookup(Data_Ord.ordString)(name)(opts);
          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Maybe.Just) {
              var msg = "Tried to read an option as a flag: " + name;
              return internalError(msg);
          };
          if (v instanceof Data_Maybe.Just && v.value0 instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(true);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(false);
          };
          throw new Error("Failed pattern match at Pulp.Args.Get (line 56, column 3 - line 63, column 17): " + [ v.constructor.name ]);
      };
  };
  exports["getOption"] = getOption;
  exports["getOption'"] = getOption$prime;
  exports["getFlag"] = getFlag;
  exports["hasOption"] = hasOption;
})(PS);
(function(exports) {
  // module Pulp.Args.Help
  "use strict";

  exports.pad = function pad(n) {
    return new Array(n + 1).join(" ");
  };

  exports.wrap = function wrap(s) {
    return function(indent) {
      return function() {
        var cols = process.stdout.columns;
        return cols ? require("wordwrap")(indent, cols)(s).slice(indent) : s;
      };
    };
  };
})(PS["Pulp.Args.Help"] = PS["Pulp.Args.Help"] || {});
(function(exports) {
  "use strict";

  exports.handleCallbackImpl = function (left, right, f) {
    return function (err, value) {
      if (err) {
        f(left(err))();
      } else {
        f(right(value))();
      }
    };
  };
})(PS["Node.FS.Async"] = PS["Node.FS.Async"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.Buffer.Class"] = $PS["Node.Buffer.Class"] || {};
  var exports = $PS["Node.Buffer.Class"];

  // | A type class for mutable buffers `buf` where operations on those buffers are
  // | represented by a particular monadic effect type `m`.
  var MutableBuffer = function (Monad0, concat, concat$prime, copy, create, fill, freeze, fromArray, fromArrayBuffer, fromString, getAtOffset, read, readString, setAtOffset, size, slice, thaw, toArray, toArrayBuffer, toString, unsafeFreeze, unsafeThaw, write, writeString) {
      this.Monad0 = Monad0;
      this.concat = concat;
      this["concat'"] = concat$prime;
      this.copy = copy;
      this.create = create;
      this.fill = fill;
      this.freeze = freeze;
      this.fromArray = fromArray;
      this.fromArrayBuffer = fromArrayBuffer;
      this.fromString = fromString;
      this.getAtOffset = getAtOffset;
      this.read = read;
      this.readString = readString;
      this.setAtOffset = setAtOffset;
      this.size = size;
      this.slice = slice;
      this.thaw = thaw;
      this.toArray = toArray;
      this.toArrayBuffer = toArrayBuffer;
      this.toString = toString;
      this.unsafeFreeze = unsafeFreeze;
      this.unsafeThaw = unsafeThaw;
      this.write = write;
      this.writeString = writeString;
  };

  // | Writes octets from a string to a buffer at the specified offset. Multi-byte
  // | characters will not be written to the buffer if there is not enough capacity
  // | to write them fully. The number of bytes written is returned.
  var writeString = function (dict) {
      return dict.writeString;
  };

  // | Writes a numeric value to a buffer at the specified offset.
  var write = function (dict) {
      return dict.write;
  };

  // | O(1) Convert an immutable buffer to a mutable buffer, without copying. The
  // | input buffer must not be used afterward.
  var unsafeThaw = function (dict) {
      return dict.unsafeThaw;
  };

  // | O(1). Convert a mutable buffer to an immutable buffer, without copying. The
  // | mutable buffer must not be mutated afterwards.
  var unsafeFreeze = function (dict) {
      return dict.unsafeFreeze;
  };

  // | Reads the buffer as a string with the specified encoding.
  var toString = function (dict) {
      return dict.toString;
  };

  // | Copies the data in the buffer to a new JS ArrayBuffer
  var toArrayBuffer = function (dict) {
      return dict.toArrayBuffer;
  };

  // | Creates an array of octets from a buffer's contents.
  var toArray = function (dict) {
      return dict.toArray;
  };

  // | Creates a mutable copy of an immutable buffer.
  var thaw = function (dict) {
      return dict.thaw;
  };

  // | Creates a new buffer slice that acts like a window on the original buffer.
  // | Writing to the slice buffer updates the original buffer and vice-versa.
  var slice = function (dict) {
      return dict.slice;
  };

  // | Returns the size of a buffer.
  var size = function (dict) {
      return dict.size;
  };

  // | Writes an octet in the buffer at the specified offset.
  var setAtOffset = function (dict) {
      return dict.setAtOffset;
  };

  // | Reads a section of a buffer as a string with the specified encoding.
  var readString = function (dict) {
      return dict.readString;
  };

  // | Reads a numeric value from a buffer at the specified offset.
  var read = function (dict) {
      return dict.read;
  };

  // | Reads an octet from a buffer at the specified offset.
  var getAtOffset = function (dict) {
      return dict.getAtOffset;
  };

  // | Creates a new buffer from a string with the specified encoding, sized to
  // | match the string.
  var fromString = function (dict) {
      return dict.fromString;
  };

  // | Creates a buffer view from a JS ArrayByffer without copying data.
  var fromArrayBuffer = function (dict) {
      return dict.fromArrayBuffer;
  };

  // | Creates a new buffer from an array of octets, sized to match the array.
  var fromArray = function (dict) {
      return dict.fromArray;
  };

  // | Creates an immutable copy of a mutable buffer.
  var freeze = function (dict) {
      return dict.freeze;
  };

  // | Fills a range in a buffer with the specified octet.
  var fill = function (dict) {
      return dict.fill;
  };

  // | Creates a new buffer of the specified size.
  var create = function (dict) {
      return dict.create;
  };

  // | Copies a section of a source buffer into a target buffer at the specified
  // | offset, and returns the number of octets copied.
  var copy = function (dict) {
      return dict.copy;
  };

  // | Concatenates a list of buffers, combining them into a new buffer of the
  // | specified length.
  var concat$prime = function (dict) {
      return dict["concat'"];
  };

  // | Concatenates a list of buffers.
  var concat = function (dict) {
      return dict.concat;
  };
  exports["MutableBuffer"] = MutableBuffer;
  exports["create"] = create;
  exports["freeze"] = freeze;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["thaw"] = thaw;
  exports["unsafeThaw"] = unsafeThaw;
  exports["fromArray"] = fromArray;
  exports["fromString"] = fromString;
  exports["fromArrayBuffer"] = fromArrayBuffer;
  exports["toArrayBuffer"] = toArrayBuffer;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["write"] = write;
  exports["writeString"] = writeString;
  exports["toArray"] = toArray;
  exports["getAtOffset"] = getAtOffset;
  exports["setAtOffset"] = setAtOffset;
  exports["slice"] = slice;
  exports["size"] = size;
  exports["concat"] = concat;
  exports["copy"] = copy;
  exports["fill"] = fill;
})(PS);
(function(exports) {
  /* global exports */
  /* global Buffer */
  "use strict";

  exports.copyAll = function(a) {
    return function() {
      return Buffer.from(a);
    };
  };

  exports.writeInternal = function (ty) {
    return function (value) {
      return function (offset) {
        return function (buf) {
          return function() {
            buf['write' + ty](value, offset);
            return {};
          }
        };
      };
    };
  };

  exports.writeStringInternal = function (encoding) {
    return function (offset) {
      return function (length) {
        return function (value) {
          return function (buff) {
            return function() {
              return buff.write(value, offset, length, encoding);
            }
          };
        };
      };
    };
  };

  exports.setAtOffset = function (value) {
    return function (offset) {
      return function (buff) {
        return function() {
          buff[offset] = value;
          return {};
        };
      };
    };
  };

  exports.copy = function (srcStart) {
    return function (srcEnd) {
      return function (src) {
        return function (targStart) {
          return function (targ) {
            return function() {
              return src.copy(targ, targStart, srcStart, srcEnd);
            };
          };
        };
      };
    };
  };

  exports.fill = function (octet) {
    return function (start) {
      return function (end) {
        return function (buf) {
          return function() {
            buf.fill(octet, start, end);
            return {};
          };
        };
      };
    };
  };
})(PS["Node.Buffer.Internal"] = PS["Node.Buffer.Internal"] || {});
(function(exports) {
  /* global exports */
  /* global Buffer */
  /* global require */
  "use strict";

  exports.create = function (size) {
    return Buffer.alloc(size);
  };

  exports.fromArray = function (octets) {
    return Buffer.from(octets);
  };

  exports.size = function (buff) {
    return buff.length;
  };

  exports.toArray = function (buff) {
    var json = buff.toJSON()
    return json.data || json;
  };

  exports.toArrayBuffer = function(buff) {
    return buff.buffer.slice(buff.byteOffset, buff.byteOffset + buff.byteLength);
  };

  exports.fromArrayBuffer = function(ab) {
    return Buffer.from(ab);
  };

  exports.fromStringImpl = function (str) {
    return function (encoding) {
      return Buffer.from(str, encoding);
    };
  };

  exports.readImpl = function (ty) {
    return function (offset) {
      return function (buf) {
        return buf['read' + ty](offset);
      };
    };
  };

  exports.readStringImpl = function (enc) {
    return function (start) {
      return function (end) {
        return function (buff) {
          return buff.toString(enc, start, end);
        };
      };
    };
  };

  exports.getAtOffsetImpl = function (just) {
    return function (nothing) {
      return function (offset) {
        return function (buff) {
          var octet = buff[offset];
          return octet == null ? nothing
                               : just(octet);
        };
      };
    };
  };

  exports.toStringImpl = function (enc) {
    return function (buff) {
      return buff.toString(enc);
    };
  };

  exports.slice = function (start) {
    return function (end) {
      return function (buff) {
        return buff.slice(start, end);
      };
    };
  };

  exports.concat = function (buffs) {
    return Buffer.concat(buffs);
  };

  exports["concat'"] = function (buffs) {
    return function (totalLength) {
      return Buffer.concat(buffs, totalLength);
    };
  };
})(PS["Node.Buffer.Immutable"] = PS["Node.Buffer.Immutable"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.Buffer.Types"] = $PS["Node.Buffer.Types"] || {};
  var exports = $PS["Node.Buffer.Types"];
  var Data_Show = $PS["Data.Show"];                

  // | Enumeration of the numeric types that can be written to a buffer.
  var UInt8 = (function () {
      function UInt8() {

      };
      UInt8.value = new UInt8();
      return UInt8;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var UInt16LE = (function () {
      function UInt16LE() {

      };
      UInt16LE.value = new UInt16LE();
      return UInt16LE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var UInt16BE = (function () {
      function UInt16BE() {

      };
      UInt16BE.value = new UInt16BE();
      return UInt16BE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var UInt32LE = (function () {
      function UInt32LE() {

      };
      UInt32LE.value = new UInt32LE();
      return UInt32LE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var UInt32BE = (function () {
      function UInt32BE() {

      };
      UInt32BE.value = new UInt32BE();
      return UInt32BE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var Int8 = (function () {
      function Int8() {

      };
      Int8.value = new Int8();
      return Int8;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var Int16LE = (function () {
      function Int16LE() {

      };
      Int16LE.value = new Int16LE();
      return Int16LE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var Int16BE = (function () {
      function Int16BE() {

      };
      Int16BE.value = new Int16BE();
      return Int16BE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var Int32LE = (function () {
      function Int32LE() {

      };
      Int32LE.value = new Int32LE();
      return Int32LE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var Int32BE = (function () {
      function Int32BE() {

      };
      Int32BE.value = new Int32BE();
      return Int32BE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var FloatLE = (function () {
      function FloatLE() {

      };
      FloatLE.value = new FloatLE();
      return FloatLE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var FloatBE = (function () {
      function FloatBE() {

      };
      FloatBE.value = new FloatBE();
      return FloatBE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var DoubleLE = (function () {
      function DoubleLE() {

      };
      DoubleLE.value = new DoubleLE();
      return DoubleLE;
  })();

  // | Enumeration of the numeric types that can be written to a buffer.
  var DoubleBE = (function () {
      function DoubleBE() {

      };
      DoubleBE.value = new DoubleBE();
      return DoubleBE;
  })();
  var showBufferValueType = new Data_Show.Show(function (v) {
      if (v instanceof UInt8) {
          return "UInt8";
      };
      if (v instanceof UInt16LE) {
          return "UInt16LE";
      };
      if (v instanceof UInt16BE) {
          return "UInt16BE";
      };
      if (v instanceof UInt32LE) {
          return "UInt32LE";
      };
      if (v instanceof UInt32BE) {
          return "UInt32BE";
      };
      if (v instanceof Int8) {
          return "Int8";
      };
      if (v instanceof Int16LE) {
          return "Int16LE";
      };
      if (v instanceof Int16BE) {
          return "Int16BE";
      };
      if (v instanceof Int32LE) {
          return "Int32LE";
      };
      if (v instanceof Int32BE) {
          return "Int32BE";
      };
      if (v instanceof FloatLE) {
          return "FloatLE";
      };
      if (v instanceof FloatBE) {
          return "FloatBE";
      };
      if (v instanceof DoubleLE) {
          return "DoubleLE";
      };
      if (v instanceof DoubleBE) {
          return "DoubleBE";
      };
      throw new Error("Failed pattern match at Node.Buffer.Types (line 33, column 1 - line 33, column 53): " + [ v.constructor.name ]);
  });
  exports["UInt8"] = UInt8;
  exports["UInt16LE"] = UInt16LE;
  exports["UInt16BE"] = UInt16BE;
  exports["UInt32LE"] = UInt32LE;
  exports["UInt32BE"] = UInt32BE;
  exports["Int8"] = Int8;
  exports["Int16LE"] = Int16LE;
  exports["Int16BE"] = Int16BE;
  exports["Int32LE"] = Int32LE;
  exports["Int32BE"] = Int32BE;
  exports["FloatLE"] = FloatLE;
  exports["FloatBE"] = FloatBE;
  exports["DoubleLE"] = DoubleLE;
  exports["DoubleBE"] = DoubleBE;
  exports["showBufferValueType"] = showBufferValueType;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Immutable buffers and associated operations.
  "use strict";
  $PS["Node.Buffer.Immutable"] = $PS["Node.Buffer.Immutable"] || {};
  var exports = $PS["Node.Buffer.Immutable"];
  var $foreign = $PS["Node.Buffer.Immutable"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                

  // | Reads the buffer as a string with the specified encoding.
  var toString = function ($3) {
      return $foreign.toStringImpl(Node_Encoding.encodingToNode($3));
  };                                                     

  // | Reads a section of a buffer as a string with the specified encoding.
  var readString = function ($4) {
      return $foreign.readStringImpl(Node_Encoding.encodingToNode($4));
  };

  // | Reads a numeric value from a buffer at the specified offset.
  var read = function ($5) {
      return $foreign.readImpl(Data_Show.show(Node_Buffer_Types.showBufferValueType)($5));
  };

  // | Reads an octet from a buffer at the specified offset.
  var getAtOffset = $foreign.getAtOffsetImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);

  // | Creates a new buffer from a string with the specified encoding, sized to match the string.
  var fromString = function (str) {
      return function ($6) {
          return $foreign.fromStringImpl(str)(Node_Encoding.encodingToNode($6));
      };
  };
  exports["fromString"] = fromString;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["getAtOffset"] = getAtOffset;
  exports["create"] = $foreign.create;
  exports["fromArray"] = $foreign.fromArray;
  exports["fromArrayBuffer"] = $foreign.fromArrayBuffer;
  exports["toArray"] = $foreign.toArray;
  exports["toArrayBuffer"] = $foreign.toArrayBuffer;
  exports["concat"] = $foreign.concat;
  exports["concat'"] = $foreign["concat'"];
  exports["slice"] = $foreign.slice;
  exports["size"] = $foreign.size;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Functions and types to support the other modules. Not for public use.
  "use strict";
  $PS["Node.Buffer.Internal"] = $PS["Node.Buffer.Internal"] || {};
  var exports = $PS["Node.Buffer.Internal"];
  var $foreign = $PS["Node.Buffer.Internal"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Show = $PS["Data.Show"];
  var Node_Buffer_Immutable = $PS["Node.Buffer.Immutable"];
  var Node_Buffer_Types = $PS["Node.Buffer.Types"];
  var Node_Encoding = $PS["Node.Encoding"];                
  var writeString = function (dictMonad) {
      return function ($20) {
          return $foreign.writeStringInternal(Node_Encoding.encodingToNode($20));
      };
  };
  var write = function (dictMonad) {
      return function ($21) {
          return $foreign.writeInternal(Data_Show.show(Node_Buffer_Types.showBufferValueType)($21));
      };
  };
  var unsafeThaw = function (dictMonad) {
      return function ($22) {
          return Control_Applicative.pure(dictMonad.Applicative0())($22);
      };
  };
  var usingToImmutable = function (dictMonad) {
      return function (f) {
          return function (x) {
              return unsafeThaw(dictMonad)(f(x));
          };
      };
  };
  var unsafeFreeze = function (dictMonad) {
      return function ($23) {
          return Control_Applicative.pure(dictMonad.Applicative0())($23);
      };
  };
  var usingFromImmutable = function (dictMonad) {
      return function (f) {
          return function (buf) {
              return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(f)(unsafeFreeze(dictMonad)(buf));
          };
      };
  };
  var toString = function (dictMonad) {
      return function (m) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toString(m));
      };
  };
  var toArrayBuffer = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArrayBuffer);
  };
  var toArray = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.toArray);
  };
  var slice = Node_Buffer_Immutable.slice;
  var size = function (dictMonad) {
      return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.size);
  };
  var readString = function (dictMonad) {
      return function (m) {
          return function (o) {
              return function (o$prime) {
                  return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.readString(m)(o)(o$prime));
              };
          };
      };
  };
  var read = function (dictMonad) {
      return function (t) {
          return function (o) {
              return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.read(t)(o));
          };
      };
  };
  var getAtOffset = function (dictMonad) {
      return function (o) {
          return usingFromImmutable(dictMonad)(Node_Buffer_Immutable.getAtOffset(o));
      };
  };
  var fromString = function (dictMonad) {
      return function (s) {
          return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromString(s));
      };
  };
  var fromArrayBuffer = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArrayBuffer);
  };
  var fromArray = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.fromArray);
  };
  var create = function (dictMonad) {
      return usingToImmutable(dictMonad)(Node_Buffer_Immutable.create);
  };
  var concat$prime = function (dictMonad) {
      return function (arrs) {
          return function (n) {
              return function (v) {
                  return Node_Buffer_Immutable["concat'"](arrs)(n);
              };
          };
      };
  };
  var concat = function (arrs) {
      return function (v) {
          return Node_Buffer_Immutable.concat(arrs);
      };
  };
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeThaw"] = unsafeThaw;
  exports["usingFromImmutable"] = usingFromImmutable;
  exports["usingToImmutable"] = usingToImmutable;
  exports["create"] = create;
  exports["fromArray"] = fromArray;
  exports["fromString"] = fromString;
  exports["fromArrayBuffer"] = fromArrayBuffer;
  exports["toArrayBuffer"] = toArrayBuffer;
  exports["read"] = read;
  exports["readString"] = readString;
  exports["toString"] = toString;
  exports["write"] = write;
  exports["writeString"] = writeString;
  exports["toArray"] = toArray;
  exports["getAtOffset"] = getAtOffset;
  exports["slice"] = slice;
  exports["size"] = size;
  exports["concat"] = concat;
  exports["concat'"] = concat$prime;
  exports["copyAll"] = $foreign.copyAll;
  exports["setAtOffset"] = $foreign.setAtOffset;
  exports["copy"] = $foreign.copy;
  exports["fill"] = $foreign.fill;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Mutable buffers and associated operations.
  "use strict";
  $PS["Node.Buffer"] = $PS["Node.Buffer"] || {};
  var exports = $PS["Node.Buffer"];
  var Effect = $PS["Effect"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Buffer_Internal = $PS["Node.Buffer.Internal"];                
  var mutableBufferEffect = new Node_Buffer_Class.MutableBuffer(function () {
      return Effect.monadEffect;
  }, Node_Buffer_Internal.concat, Node_Buffer_Internal["concat'"](Effect.monadEffect), Node_Buffer_Internal.copy, Node_Buffer_Internal.create(Effect.monadEffect), Node_Buffer_Internal.fill, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.fromArray(Effect.monadEffect), Node_Buffer_Internal.fromArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.fromString(Effect.monadEffect), Node_Buffer_Internal.getAtOffset(Effect.monadEffect), Node_Buffer_Internal.read(Effect.monadEffect), Node_Buffer_Internal.readString(Effect.monadEffect), Node_Buffer_Internal.setAtOffset, Node_Buffer_Internal.size(Effect.monadEffect), Node_Buffer_Internal.slice, Node_Buffer_Internal.copyAll, Node_Buffer_Internal.toArray(Effect.monadEffect), Node_Buffer_Internal.toArrayBuffer(Effect.monadEffect), Node_Buffer_Internal.toString(Effect.monadEffect), Node_Buffer_Internal.unsafeFreeze(Effect.monadEffect), Node_Buffer_Internal.unsafeThaw(Effect.monadEffect), Node_Buffer_Internal.write(Effect.monadEffect), Node_Buffer_Internal.writeString(Effect.monadEffect));
  exports["mutableBufferEffect"] = mutableBufferEffect;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.FS.Perms"] = $PS["Node.FS.Perms"] || {};
  var exports = $PS["Node.FS.Perms"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];

  // | The "writable" permission.
  var write = {
      r: false,
      w: true,
      x: false
  };
  var semiringPerm = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return {
              r: v.r || v1.r,
              w: v.w || v1.w,
              x: v.x || v1.x
          };
      };
  }, function (v) {
      return function (v1) {
          return {
              r: v.r && v1.r,
              w: v.w && v1.w,
              x: v.x && v1.x
          };
      };
  }, {
      r: true,
      w: true,
      x: true
  }, {
      r: false,
      w: false,
      x: false
  });

  // | The "readable" permission.
  var read = {
      r: true,
      w: false,
      x: false
  };

  // | Convert a `Perm` to an octal digit. For example:
  // |
  // | * `permToInt r == 4`
  // | * `permToInt w == 2`
  // | * `permToInt (r + w) == 6`
  var permToInt = function (v) {
      return ((function () {
          if (v.r) {
              return 4;
          };
          return 0;
      })() + (function () {
          if (v.w) {
              return 2;
          };
          return 0;
      })() | 0) + (function () {
          if (v.x) {
              return 1;
          };
          return 0;
      })() | 0;
  };

  // | Convert a `Perm` to an octal string, via `permToInt`.
  var permToString = function ($97) {
      return Data_Show.show(Data_Show.showInt)(permToInt($97));
  };

  // | Convert a `Perms` value to an octal string, in a format similar to that
  // | accepted by `chmod`. For example:
  // | `permsToString (mkPerms (read + write) read read) == "0644"`
  var permsToString = function (v) {
      return "0" + (permToString(v.u) + (permToString(v.g) + permToString(v.o)));
  };

  // | No permissions. This is the identity of the `Semiring` operation `(+)`
  // | for `Perm`; that is, it is the same as `zero`.
  var none = Data_Semiring.zero(semiringPerm);

  // | Create a `Perms` value. The arguments represent the owner's, group's, and
  // | other users' permission sets, respectively.
  var mkPerms = function (u) {
      return function (g) {
          return function (o) {
              return {
                  u: u,
                  g: g,
                  o: o
              };
          };
      };
  }; 

  // | All permissions: readable, writable, and executable. This is the identity
  // | of the `Semiring` operation `(*)` for `Perm`; that is, it is the same as
  // | `one`.
  var all = Data_Semiring.one(semiringPerm);
  exports["none"] = none;
  exports["read"] = read;
  exports["write"] = write;
  exports["all"] = all;
  exports["mkPerms"] = mkPerms;
  exports["permsToString"] = permsToString;
  exports["semiringPerm"] = semiringPerm;
})(PS);
(function(exports) {
  "use strict";                                  

  exports.statsMethod = function (m, s) {
    return s[m]();
  };
})(PS["Node.FS.Stats"] = PS["Node.FS.Stats"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.FS.Stats"] = $PS["Node.FS.Stats"] || {};
  var exports = $PS["Node.FS.Stats"];
  var $foreign = $PS["Node.FS.Stats"];             

  // | Stats wrapper to provide a usable interface to the underlying properties and methods.
  var Stats = (function () {
      function Stats(value0) {
          this.value0 = value0;
      };
      Stats.create = function (value0) {
          return new Stats(value0);
      };
      return Stats;
  })();
  var isFile = function (v) {
      return $foreign.statsMethod("isFile", v.value0);
  };
  var isDirectory = function (v) {
      return $foreign.statsMethod("isDirectory", v.value0);
  };
  exports["Stats"] = Stats;
  exports["isFile"] = isFile;
  exports["isDirectory"] = isDirectory;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.FS.Async"] = $PS["Node.FS.Async"] || {};
  var exports = $PS["Node.FS.Async"];
  var $foreign = $PS["Node.FS.Async"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Internal = $PS["Node.FS.Internal"];
  var Node_FS_Perms = $PS["Node.FS.Perms"];
  var Node_FS_Stats = $PS["Node.FS.Stats"];                
  var handleCallback = function (cb) {
      return $foreign.handleCallbackImpl(Data_Either.Left.create, Data_Either.Right.create, cb);
  };
  var fs = Node_FS_Internal.unsafeRequireFS;

  // | Makes a new directory with the specified permissions.
  var mkdir$prime = function (file) {
      return function (perms) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.mkdir(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
              });
          };
      };
  };

  // | Makes a new directory.
  var mkdir = Data_Function.flip(mkdir$prime)(Node_FS_Perms.mkPerms(Node_FS_Perms.all)(Node_FS_Perms.all)(Node_FS_Perms.all));

  // | Reads the entire contents of a file returning the result as a raw buffer.
  var readFile = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readFile(file, {}, handleCallback(cb));
          });
      };
  };

  // | Reads the entire contents of a text file with the specified encoding.
  var readTextFile = function (encoding) {
      return function (file) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.readFile(file, {
                      encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                  }, handleCallback(cb));
              });
          };
      };
  };

  // | Reads the contents of a directory.
  var readdir = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.readdir(file, handleCallback(cb));
          });
      };
  };

  // | Renames a file.
  var rename = function (oldFile) {
      return function (newFile) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.rename(oldFile, newFile, handleCallback(cb));
              });
          };
      };
  };

  // | Gets file statistics.
  var stat = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.stat(file, handleCallback(function ($32) {
                  return cb(Data_Functor.map(Data_Either.functorEither)(Node_FS_Stats.Stats.create)($32));
              }));
          });
      };
  };

  // | Deletes a file.
  var unlink = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.unlink(file, handleCallback(cb));
          });
      };
  };

  // | Writes a buffer to a file.
  var writeFile = function (file) {
      return function (buff) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.writeFile(file, buff, {}, handleCallback(cb));
              });
          };
      };
  };

  // | Writes text to a file using the specified encoding.
  var writeTextFile = function (encoding) {
      return function (file) {
          return function (buff) {
              return function (cb) {
                  return Node_FS_Internal.mkEffect(function (v) {
                      return fs.writeFile(file, buff, {
                          encoding: Data_Show.show(Node_Encoding.showEncoding)(encoding)
                      }, handleCallback(cb));
                  });
              };
          };
      };
  };

  // | Write to a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_write_fd_buffer_offset_length_position_callback)
  // | for details.
  var fdWrite = function (fd) {
      return function (buff) {
          return function (off) {
              return function (len) {
                  return function (pos) {
                      return function (cb) {
                          return Node_FS_Internal.mkEffect(function (v) {
                              return fs.write(fd, buff, off, len, Data_Nullable.toNullable(pos), handleCallback(cb));
                          });
                      };
                  };
              };
          };
      };
  };

  // | Close a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_close_fd_callback)
  // | for details.
  var fdClose = function (fd) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.close(fd, handleCallback(cb));
          });
      };
  };

  // | Convenience function to append the whole buffer to the current
  // | file position.
  var fdAppend = function (fd) {
      return function (buff) {
          return function (cb) {
              return function __do() {
                  var v = Node_Buffer_Class.size(Node_Buffer.mutableBufferEffect)(buff)();
                  return fdWrite(fd)(buff)(0)(v)(Data_Maybe.Nothing.value)(cb)();
              };
          };
      };
  };

  // | Check if the path exists.
  var exists = function (file) {
      return function (cb) {
          return Node_FS_Internal.mkEffect(function (v) {
              return fs.exists(file, function (b) {
                  return Effect_Unsafe.unsafePerformEffect(cb(b));
              });
          });
      };
  };

  // | Changes the permissions of a file.
  var chmod = function (file) {
      return function (perms) {
          return function (cb) {
              return Node_FS_Internal.mkEffect(function (v) {
                  return fs.chmod(file, Node_FS_Perms.permsToString(perms), handleCallback(cb));
              });
          };
      };
  };
  exports["rename"] = rename;
  exports["chmod"] = chmod;
  exports["stat"] = stat;
  exports["unlink"] = unlink;
  exports["mkdir"] = mkdir;
  exports["readdir"] = readdir;
  exports["readFile"] = readFile;
  exports["readTextFile"] = readTextFile;
  exports["writeFile"] = writeFile;
  exports["writeTextFile"] = writeTextFile;
  exports["exists"] = exists;
  exports["fdWrite"] = fdWrite;
  exports["fdAppend"] = fdAppend;
  exports["fdClose"] = fdClose;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Node.FS.Aff"] = $PS["Node.FS.Aff"] || {};
  var exports = $PS["Node.FS.Aff"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_FS_Async = $PS["Node.FS.Async"];                
  var toAff = function (p) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(p(k))(Effect_Aff.nonCanceler);
      });
  };
  var toAff1 = function (f) {
      return function (a) {
          return toAff(f(a));
      };
  };

  // |
  // | Deletes a file.
  // |
  var unlink = toAff1(Node_FS_Async.unlink);
  var toAff2 = function (f) {
      return function (a) {
          return function (b) {
              return toAff(f(a)(b));
          };
      };
  };                                              
  var toAff3 = function (f) {
      return function (a) {
          return function (b) {
              return function (c) {
                  return toAff(f(a)(b)(c));
              };
          };
      };
  };                                        

  // |
  // | Writes text to a file using the specified encoding.
  // |
  var writeTextFile = toAff3(Node_FS_Async.writeTextFile);

  // |
  // | Gets file statistics.
  // |
  var stat = toAff1(Node_FS_Async.stat);  

  // |
  // | Rename a file.
  // |
  var rename = toAff2(Node_FS_Async.rename);    

  // |
  // | Reads the contents of a directory.
  // |
  var readdir = toAff1(Node_FS_Async.readdir);

  // |
  // | Reads the entire contents of a text file with the specified encoding.
  // |
  var readTextFile = toAff2(Node_FS_Async.readTextFile);

  // |
  // | Makes a new directory.
  // |
  var mkdir = toAff1(Node_FS_Async.mkdir);  

  // | Close a file asynchronously. See the [Node Documentation](https://nodejs.org/api/fs.html#fs_fs_close_fd_callback)
  // | for details.
  var fdClose = toAff1(Node_FS_Async.fdClose);

  // | Convenience function to append the whole buffer to the current
  // | file position.
  var fdAppend = toAff2(Node_FS_Async.fdAppend);

  // |
  // | Check to see if a file exists.
  // |
  var exists = function (file) {
      return Effect_Aff.makeAff(function (k) {
          return Data_Functor.voidLeft(Effect.functorEffect)(Node_FS_Async.exists(file)(function ($0) {
              return k(Control_Applicative.pure(Data_Either.applicativeEither)($0));
          }))(Effect_Aff.nonCanceler);
      });
  };                                      

  // |
  // | Changes the permissions of a file.
  // |
  var chmod = toAff2(Node_FS_Async.chmod);
  exports["rename"] = rename;
  exports["chmod"] = chmod;
  exports["stat"] = stat;
  exports["unlink"] = unlink;
  exports["mkdir"] = mkdir;
  exports["readdir"] = readdir;
  exports["readTextFile"] = readTextFile;
  exports["writeTextFile"] = writeTextFile;
  exports["exists"] = exists;
  exports["fdAppend"] = fdAppend;
  exports["fdClose"] = fdClose;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Utils"] = $PS["Pulp.Utils"] || {};
  var exports = $PS["Pulp.Utils"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Exception = $PS["Effect.Exception"];                
  var $$throw = function (dictMonadError) {
      return function ($2) {
          return Control_Monad_Error_Class.throwError(dictMonadError.MonadThrow0())(Effect_Exception.error($2));
      };
  };
  var orErr = function (dictMonadError) {
      return function (msg) {
          return Data_Maybe.maybe($$throw(dictMonadError)(msg))(Control_Applicative.pure(((dictMonadError.MonadThrow0()).Monad0()).Applicative0()));
      };
  };
  exports["orErr"] = orErr;
  exports["throw"] = $$throw;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Args.Parser"] = $PS["Pulp.Args.Parser"] || {};
  var exports = $PS["Pulp.Args.Parser"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_State_Class = $PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Foreign = $PS["Foreign"];
  var Pulp_Utils = $PS["Pulp.Utils"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];
  var Text_Parsing_Parser_Combinators = $PS["Text.Parsing.Parser.Combinators"];
  var Text_Parsing_Parser_Pos = $PS["Text.Parsing.Parser.Pos"];
  var Text_Parsing_Parser_Token = $PS["Text.Parsing.Parser.Token"];                

  // | A version of Text.Parsing.Parser.Token.when which lies about the position,
  // | since we don't care about it here.
  var when = function (dictMonad) {
      return Text_Parsing_Parser_Token.when(dictMonad)(Data_Function["const"](Text_Parsing_Parser_Pos.initialPos));
  };

  // | A version of Text.Parsing.Parser.Token.token which lies about the position,
  // | since we don't care about it here.
  var token = function (dictMonad) {
      return Text_Parsing_Parser_Token.token(dictMonad)(Data_Function["const"](Text_Parsing_Parser_Pos.initialPos));
  };
  var matchOpt = function (o) {
      return function (key) {
          return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(key)(o.match);
      };
  };
  var matchNamed = function (dictEq) {
      return function (o) {
          return function (key) {
              return Data_Eq.eq(dictEq)(o.name)(key) || Data_Foldable.elem(Data_Foldable.foldableArray)(dictEq)(key)(o.alias);
          };
      };
  };

  // | A version of Text.Parsing.Parser.Token.match which lies about the position,
  // | since we don't care about it here.
  var match = function (dictMonad) {
      return function (dictEq) {
          return Text_Parsing_Parser_Token.match(dictMonad)(dictEq)(Data_Function["const"](Text_Parsing_Parser_Pos.initialPos));
      };
  };
  var lookup = function (dictMonad) {
      return function (dictEq) {
          return function (dictShow) {
              return function (matches) {
                  return function (table) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(token(dictMonad))(function (v) {
                          var v1 = Data_Foldable.find(Data_Foldable.foldableArray)(function (i) {
                              return matches(i)(v);
                          })(table);
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(dictMonad))(new Data_Tuple.Tuple(v, v1.value0));
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return Text_Parsing_Parser.fail(dictMonad)("Unknown command: " + Data_Show.show(dictShow)(v));
                          };
                          throw new Error("Failed pattern match at Pulp.Args.Parser (line 54, column 3 - line 56, column 55): " + [ v1.constructor.name ]);
                      });
                  };
              };
          };
      };
  };
  var lookupCmd = lookup(Effect_Aff.monadAff)(Data_Eq.eqString)(Data_Show.showString)(matchNamed(Data_Eq.eqString));
  var lookupOpt = lookup(Effect_Aff.monadAff)(Data_Eq.eqString)(Data_Show.showString)(matchOpt);
  var opt = function (opts) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(lookupOpt(opts))(function (v) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(v.value1.parser.parser(v.value0))(function (v1) {
              return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(Data_Map_Internal.singleton(v.value1.name)(v1));
          });
      });
  };
  var halt = function (err) {
      return Control_Monad_Trans_Class.lift(Text_Parsing_Parser.monadTransParserT)(Effect_Aff.monadAff)(Pulp_Utils["throw"](Effect_Aff.monadErrorAff)(err));
  };
  var extractDefault = function (o) {
      if (o.defaultValue instanceof Data_Maybe.Just) {
          return Data_Map_Internal.singleton(o.name)(new Data_Maybe.Just(Foreign.unsafeToForeign(o.defaultValue.value0)));
      };
      if (o.defaultValue instanceof Data_Maybe.Nothing) {
          return Data_Map_Internal.empty;
      };
      throw new Error("Failed pattern match at Pulp.Args.Parser (line 89, column 3 - line 93, column 16): " + [ o.defaultValue.constructor.name ]);
  };

  // See also https://github.com/purescript-contrib/purescript-parsing/issues/25
  var eof = function (dictMonad) {
      return function (msg) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(dictMonad))(Control_Monad_State_Class.get(Text_Parsing_Parser.monadStateParserT(dictMonad)))(function (v) {
              return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(dictMonad))(Data_List["null"](v.value0))(Text_Parsing_Parser.fail(dictMonad)(msg(v.value0)));
          });
      };
  };
  var cmd = function (cmds) {
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Text_Parsing_Parser_Combinators.withErrorMessage(Effect_Aff.monadAff)(lookupCmd(cmds))("command"))(function (v) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(v.value1);
      });
  };
  var arg = function (a) {
      if (a.required) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Effect_Aff.monadAff))(token(Effect_Aff.monadAff))(Text_Parsing_Parser.fail(Effect_Aff.monadAff)("Required argument \"" + (a.name + "\" missing."))))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(a.parser(v))(function (v1) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(Data_Map_Internal.singleton(a.name)(new Data_Maybe.Just(v1)));
              });
          });
      };
      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Effect_Aff.monadAff))(Text_Parsing_Parser_Combinators["try"](Effect_Aff.monadAff)(Data_Functor.map(Text_Parsing_Parser.functorParserT(Effect_Aff.functorAff))(Data_Maybe.Just.create)(Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(token(Effect_Aff.monadAff))(a.parser))))(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(Data_Maybe.Nothing.value)))(function (v) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(Data_Maybe.maybe(Data_Map_Internal.empty)(function ($54) {
              return Data_Map_Internal.singleton(a.name)(Data_Maybe.Just.create($54));
          })(v));
      });
  };
  var parseArgv = function (globals) {
      return function (commands) {
          var unrecognised = function ($55) {
              return (function (v) {
                  return "Unrecognised arguments: " + v;
              })(Data_String_Common.joinWith(", ")(Data_List.toUnfoldable(Data_Unfoldable.unfoldableArray)($55)));
          };
        
          // match a single "-h" or "--help"
  var matchHelp = Data_Functor["void"](Text_Parsing_Parser.functorParserT(Effect_Aff.functorAff))(when(Effect_Aff.monadAff)(function (v) {
              return Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(v)([ "-h", "--help" ]);
          }));
          var helpForCommand = function (command) {
              return Control_Apply.applySecond(Text_Parsing_Parser.applyParserT(Effect_Aff.monadAff))(matchHelp)(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(new Data_Either.Left(command)));
          };
          var defs = Data_Functor.map(Data_Functor.functorArray)(extractDefault);
          var globalDefaults = function (opts) {
              return Data_Map_Internal.unions(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(opts)(defs(globals)));
          };
          var normalCommand = function (globalOpts) {
              return function (command) {
                  return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Data_Traversable.traverse(Data_Traversable.traversableArray)(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(arg)(command["arguments"]))(function (v) {
                      return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Effect_Aff.monadAff))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators["try"](Effect_Aff.monadAff)(opt(command.options))))(function (v1) {
                          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Text_Parsing_Parser_Combinators.optionMaybe(Effect_Aff.monadAff)(match(Effect_Aff.monadAff)(Data_Eq.eqString)("--")))(function (v2) {
                              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Data_Maybe.maybe(Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))([  ]))(Data_Function["const"](Data_Array.many(Text_Parsing_Parser.alternativeParserT(Effect_Aff.monadAff))(Text_Parsing_Parser.lazyParserT)(token(Effect_Aff.monadAff))))(v2))(function (v3) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(eof(Effect_Aff.monadAff)(unrecognised))(function () {
                                      return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(new Data_Either.Right({
                                          globalOpts: globalOpts,
                                          command: command,
                                          commandOpts: Data_Map_Internal.unions(Data_Ord.ordString)(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1)(defs(command.options))),
                                          commandArgs: Data_Map_Internal.unions(Data_Ord.ordString)(Data_Foldable.foldableArray)(v),
                                          remainder: v3
                                      }));
                                  });
                              });
                          });
                      });
                  });
              };
          };
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Effect_Aff.functorAff))(globalDefaults)(Data_Array.many(Text_Parsing_Parser.alternativeParserT(Effect_Aff.monadAff))(Text_Parsing_Parser.lazyParserT)(Text_Parsing_Parser_Combinators["try"](Effect_Aff.monadAff)(opt(globals)))))(function (v) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(cmd(commands))(function (v1) {
                  return Control_Alt.alt(Text_Parsing_Parser.altParserT(Effect_Aff.monadAff))(helpForCommand(v1))(normalCommand(v)(v1));
              });
          });
      };
  };
  var parse = function (globals) {
      return function (commands) {
          return function (s) {
              return Text_Parsing_Parser.runParserT(Effect_Aff.monadAff)(Data_List.fromFoldable(Data_Foldable.foldableArray)(s))(parseArgv(globals)(commands));
          };
      };
  };
  exports["halt"] = halt;
  exports["matchNamed"] = matchNamed;
  exports["matchOpt"] = matchOpt;
  exports["token"] = token;
  exports["match"] = match;
  exports["when"] = when;
  exports["lookup"] = lookup;
  exports["lookupOpt"] = lookupOpt;
  exports["lookupCmd"] = lookupCmd;
  exports["opt"] = opt;
  exports["arg"] = arg;
  exports["cmd"] = cmd;
  exports["extractDefault"] = extractDefault;
  exports["eof"] = eof;
  exports["parseArgv"] = parseArgv;
  exports["parse"] = parse;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5

  // | Defines a VersionBump type and associated functions.
  "use strict";
  $PS["Pulp.VersionBump"] = $PS["Pulp.VersionBump"] || {};
  var exports = $PS["Pulp.VersionBump"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Version = $PS["Data.Version"];                
  var Major = (function () {
      function Major() {

      };
      Major.value = new Major();
      return Major;
  })();
  var Minor = (function () {
      function Minor() {

      };
      Minor.value = new Minor();
      return Minor;
  })();
  var Patch = (function () {
      function Patch() {

      };
      Patch.value = new Patch();
      return Patch;
  })();
  var ToExact = (function () {
      function ToExact(value0) {
          this.value0 = value0;
      };
      ToExact.create = function (value0) {
          return new ToExact(value0);
      };
      return ToExact;
  })();
  var parseBump = function (str) {
      var v = Data_String_Common.toLower(str);
      if (v === "major") {
          return new Data_Maybe.Just(Major.value);
      };
      if (v === "minor") {
          return new Data_Maybe.Just(Minor.value);
      };
      if (v === "patch") {
          return new Data_Maybe.Just(Patch.value);
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(ToExact.create)(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Version.parseVersion(str)));
  };
  var applyBump = function (b) {
      if (b instanceof Major) {
          return Data_Version.bumpMajor;
      };
      if (b instanceof Minor) {
          return Data_Version.bumpMinor;
      };
      if (b instanceof Patch) {
          return Data_Version.bumpPatch;
      };
      if (b instanceof ToExact) {
          return Data_Function["const"](b.value0);
      };
      throw new Error("Failed pattern match at Pulp.VersionBump (line 28, column 15 - line 32, column 22): " + [ b.constructor.name ]);
  };
  exports["Major"] = Major;
  exports["Minor"] = Minor;
  exports["Patch"] = Patch;
  exports["ToExact"] = ToExact;
  exports["parseBump"] = parseBump;
  exports["applyBump"] = applyBump;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Args.Types"] = $PS["Pulp.Args.Types"] || {};
  var exports = $PS["Pulp.Args.Types"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Trans_Class = $PS["Control.Monad.Trans.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Int = $PS["Data.Int"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Foreign = $PS["Foreign"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_FS_Stats = $PS["Node.FS.Stats"];
  var Node_Path = $PS["Node.Path"];
  var Pulp_Args_Parser = $PS["Pulp.Args.Parser"];
  var Pulp_VersionBump = $PS["Pulp.VersionBump"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                

  // TODO: this is gross; we end up parsing the version twice. Probably should
  // fix this by parameterising OptionParsers and ArgumentParsers based on the
  // type of the thing they parse.
  var versionBump = function (arg) {
      var v = Pulp_VersionBump.parseBump(arg);
      if (v instanceof Data_Maybe.Just) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(Foreign.unsafeToForeign(arg));
      };
      if (v instanceof Data_Maybe.Nothing) {
          return Text_Parsing_Parser.fail(Effect_Aff.monadAff)("Not a valid version bump. Must be: 'major', 'minor', 'patch', " + "or a version.");
      };
      throw new Error("Failed pattern match at Pulp.Args.Types (line 104, column 3 - line 109, column 31): " + [ v.constructor.name ]);
  };
  var require = function (pred) {
      return function (typ) {
          return function (path) {
              return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Effect_Aff.monadAff))(Control_Monad_Trans_Class.lift(Text_Parsing_Parser.monadTransParserT)(Effect_Aff.monadAff)(Node_FS_Aff.stat(path)))(Pulp_Args_Parser.halt(typ + (" '" + (path + "' not found.")))))(function (v) {
                  return Control_Applicative.unless(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(pred(v))(Pulp_Args_Parser.halt("Path '" + (path + ("' is not a " + (typ + ".")))));
              });
          };
      };
  };
  var requireDirectory = require(Node_FS_Stats.isDirectory)("Directory");
  var requireFile = require(Node_FS_Stats.isFile)("File");
  var flag = {
      name: Data_Maybe.Nothing.value,
      parser: function (v) {
          return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(Data_Maybe.Nothing.value);
      }
  };
  var argErr = function (arg) {
      return function (msg) {
          return Pulp_Args_Parser.halt("Argument " + (arg + (": " + msg)));
      };
  };
  var directories = {
      name: new Data_Maybe.Just("<dir:dir:...>"),
      parser: function (arg) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Effect_Aff.monadAff))(Pulp_Args_Parser.token(Effect_Aff.monadAff))(argErr(arg)("Needs a directory argument.")))(function (v) {
              var paths$prime = Data_Array.filter(function ($16) {
                  return !Data_String_Common["null"]($16);
              })(Data_String_Common.split(Node_Path.delimiter)(v));
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Data_Foldable.for_(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(Data_Foldable.foldableArray)(paths$prime)(requireDirectory))(function () {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(new Data_Maybe.Just(Foreign.unsafeToForeign(paths$prime)));
              });
          });
      }
  };
  var directory = {
      name: new Data_Maybe.Just("<dir>"),
      parser: function (arg) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Effect_Aff.monadAff))(Pulp_Args_Parser.token(Effect_Aff.monadAff))(argErr(arg)("Needs a directory argument.")))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(requireDirectory(v))(function () {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(new Data_Maybe.Just(Foreign.unsafeToForeign(v)));
              });
          });
      }
  };
  var file = {
      name: new Data_Maybe.Just("<file>"),
      parser: function (arg) {
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Control_Alt.alt(Text_Parsing_Parser.altParserT(Effect_Aff.monadAff))(Pulp_Args_Parser.token(Effect_Aff.monadAff))(argErr(arg)("Needs a file argument.")))(function (v) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(requireFile(v))(function () {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(new Data_Maybe.Just(Foreign.unsafeToForeign(v)));
              });
          });
      }
  };
  var $$int = {
      name: new Data_Maybe.Just("<int>"),
      parser: function (arg) {
          var err = argErr(arg)("Needs an int argument.");
          return Control_Bind.bind(Text_Parsing_Parser.bindParserT(Effect_Aff.monadAff))(Data_Functor.map(Text_Parsing_Parser.functorParserT(Effect_Aff.functorAff))(Data_Int.fromString)(Control_Alt.alt(Text_Parsing_Parser.altParserT(Effect_Aff.monadAff))(Pulp_Args_Parser.token(Effect_Aff.monadAff))(err)))(function (v) {
              if (v instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Text_Parsing_Parser.applicativeParserT(Effect_Aff.monadAff))(new Data_Maybe.Just(Foreign.unsafeToForeign(v.value0)));
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return err;
              };
              throw new Error("Failed pattern match at Pulp.Args.Types (line 54, column 5 - line 56, column 21): " + [ v.constructor.name ]);
          });
      }
  };
  var string = {
      name: new Data_Maybe.Just("<string>"),
      parser: function (arg) {
          return Data_Functor.map(Text_Parsing_Parser.functorParserT(Effect_Aff.functorAff))(function ($17) {
              return Data_Maybe.Just.create(Foreign.unsafeToForeign($17));
          })(Control_Alt.alt(Text_Parsing_Parser.altParserT(Effect_Aff.monadAff))(Pulp_Args_Parser.token(Effect_Aff.monadAff))(argErr(arg)("Needs a string argument.")));
      }
  };
  exports["flag"] = flag;
  exports["string"] = string;
  exports["file"] = file;
  exports["int"] = $$int;
  exports["directory"] = directory;
  exports["directories"] = directories;
  exports["versionBump"] = versionBump;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Args.Help"] = $PS["Pulp.Args.Help"] || {};
  var exports = $PS["Pulp.Args.Help"];
  var $foreign = $PS["Pulp.Args.Help"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Path = $PS["Node.Path"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Args = $PS["Pulp.Args"];
  var Pulp_Args_Types = $PS["Pulp.Args.Types"];                
  var prepareCmds = (function () {
      var foldCmds = function (n) {
          return Foreign_Object.insert(n.name)(n.desc);
      };
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(foldCmds)(Foreign_Object.empty);
  })();
  var prepareArguments = (function () {
      var formatKey = function (arg) {
          return Data_String_Common.toUpper(arg.name);
      };
      var foldOpts = function (arg) {
          return Foreign_Object.insert(formatKey(arg))(arg.desc);
      };
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(foldOpts)(Foreign_Object.empty);
  })();
  var helpOpt = Pulp_Args.option("help")([ "--help", "-h" ])(Pulp_Args_Types.flag)("Show this help message.");
  var getCommandName = Data_Functor.map(Effect.functorEffect)(function ($28) {
      return Data_Maybe.maybe("pulp")(function ($29) {
          return (function (v) {
              return v.name;
          })(Node_Path.parse($29));
      })((function (v) {
          return Data_Array.index(v)(1);
      })($28));
  })(Node_Process.argv);
  var formatTable = function (table) {
      var headers = Data_Array.sort(Data_Ord.ordString)(Foreign_Object.keys(table));
      var longest = Data_Maybe.fromMaybe(0)(Data_Foldable.maximum(Data_Ord.ordInt)(Data_Foldable.foldableArray)(Data_Functor.mapFlipped(Data_Functor.functorArray)(headers)(Data_String_CodePoints.length)));
      var formatEntry = function (key) {
          return (function (entry) {
              var padding = longest - Data_String_CodePoints.length(key) | 0;
              return function __do() {
                  var v = $foreign.wrap(entry)(longest + 4 | 0)();
                  return "  " + (key + ($foreign.pad(padding + 2 | 0) + (v + "\x0a")));
              };
          })(Data_Maybe.fromJust()(Foreign_Object.lookup(key)(table)));
      };
      return function __do() {
          var v = Data_Traversable.sequence(Data_Traversable.traversableArray)(Effect.applicativeEffect)(Data_Functor.mapFlipped(Data_Functor.functorArray)(headers)(formatEntry))();
          return Data_String_Common.joinWith("")(v);
      };
  };
  var formatPassThrough = function (mdesc) {
      var desc = Data_Maybe.fromMaybe("Passthrough options are ignored.")(mdesc);
      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign.wrap("  " + desc)(2));
  };
  var formatCmds = function ($30) {
      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(formatTable(prepareCmds($30)));
  };
  var formatArguments = function ($31) {
      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(formatTable(prepareArguments($31)));
  };
  var describeOpt = function (opt) {
      var tryDefault = function (def) {
          var v = Control_Monad_Except.runExcept(Foreign_Generic_Class.decode(Foreign_Generic_Class.stringDecode)(def));
          if (v instanceof Data_Either.Right) {
              return new Data_Maybe.Just(Data_Show.show(Data_Show.showString)(v.value0));
          };
          if (v instanceof Data_Either.Left) {
              var v1 = Control_Monad_Except.runExcept(Foreign_Generic_Class.decode(Foreign_Generic_Class.intDecode)(def));
              if (v1 instanceof Data_Either.Right) {
                  return new Data_Maybe.Just(Data_Show.show(Data_Show.showInt)(v1.value0));
              };
              if (v1 instanceof Data_Either.Left) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Pulp.Args.Help (line 55, column 9 - line 59, column 20): " + [ v1.constructor.name ]);
          };
          throw new Error("Failed pattern match at Pulp.Args.Help (line 51, column 5 - line 59, column 20): " + [ v.constructor.name ]);
      };
      return opt.desc + (function () {
          if (opt.defaultValue instanceof Data_Maybe.Nothing) {
              return "";
          };
          if (opt.defaultValue instanceof Data_Maybe.Just) {
              return Data_Maybe.maybe("")(function (d) {
                  return " [Default: " + (d + "]");
              })(tryDefault(opt.defaultValue.value0));
          };
          throw new Error("Failed pattern match at Pulp.Args.Help (line 46, column 31 - line 48, column 74): " + [ opt.defaultValue.constructor.name ]);
      })();
  };
  var prepareOpts = (function () {
      var formatKey = function (n) {
          return Data_String_Common.joinWith(" ")(n.match) + (function () {
              if (n.parser.name instanceof Data_Maybe.Nothing) {
                  return "";
              };
              if (n.parser.name instanceof Data_Maybe.Just) {
                  return " " + n.parser.name.value0;
              };
              throw new Error("Failed pattern match at Pulp.Args.Help (line 63, column 53 - line 65, column 33): " + [ n.parser.name.constructor.name ]);
          })();
      };
      var foldOpts = function (n) {
          return Foreign_Object.insert(formatKey(n))(describeOpt(n));
      };
      return Data_Foldable.foldr(Data_Foldable.foldableArray)(foldOpts)(Foreign_Object.empty);
  })();
  var formatOpts = function ($32) {
      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(formatTable(prepareOpts($32)));
  };
  var printHelp = function (out) {
      return function (globals) {
          return function (commands) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(getCommandName))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("Usage: " + (v + " [global-options] <command> [command-options]\x0a")))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.bolded("\x0aGlobal options:\x0a"))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(formatOpts(Data_Semigroup.append(Data_Semigroup.semigroupArray)(globals)([ helpOpt ])))(out.write))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.bolded("\x0aCommands:\x0a"))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(formatCmds(commands))(out.write))(function () {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)($foreign.wrap("Use `" + (v + (" <command> --help` to " + "learn about command specific options.")))(2)))(function (v1) {
                                          return out.write("\x0a" + (v1 + "\x0a\x0a"));
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  var argumentSynopsis = (function () {
      var format = function (arg) {
          return Data_String_Common.toUpper((function () {
              if (arg.required) {
                  return arg.name;
              };
              return "[" + (arg.name + "]");
          })());
      };
      return function ($33) {
          return Data_String_Common.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(format)($33));
      };
  })();
  var printCommandHelp = function (out) {
      return function (globals) {
          return function (command) {
              var hasCommandOpts = !Data_Array["null"](command.options);
              var hasArguments = !Data_Array["null"](command["arguments"]);
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(getCommandName))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("Usage: " + (v + (" [global-options] " + (command.name + (" " + ((function () {
                      if (hasArguments) {
                          return argumentSynopsis(command["arguments"]) + " ";
                      };
                      return "";
                  })() + ((function () {
                      if (hasCommandOpts) {
                          return "[command-options]";
                      };
                      return "";
                  })() + "\x0a"))))))))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.bolded("\x0aCommand: " + (command.name + "\x0a")))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("  " + (command.desc + "\x0a")))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(hasArguments)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.bolded("\x0aArguments:\x0a"))(function () {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(formatArguments(command["arguments"]))(out.write);
                              })))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(hasCommandOpts)(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.bolded("\x0aCommand options:\x0a"))(function () {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(formatOpts(command.options))(out.write);
                                  })))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.bolded("\x0aGlobal options:\x0a"))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(formatOpts(Data_Semigroup.append(Data_Semigroup.semigroupArray)(globals)([ helpOpt ])))(out.write))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.bolded("\x0aPassthrough options:\x0a"))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(formatPassThrough(command.passthroughDesc))(out.write))(function () {
                                                      return out.write("\x0a");
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  exports["printHelp"] = printHelp;
  exports["printCommandHelp"] = printCommandHelp;
})(PS);
(function(exports) {
  // module Pulp.Browserify

  "use strict";

  function write(input, output, callback) {
    var pipe = require("through")();
    input.pipe(pipe);
    pipe.pipe(output, {end: false});
    pipe.on("end", callback);
  }

  exports["browserifyBundle'"] = function browserifyBundle$prime(opts, callback) {
    var stream = new require("stream").Readable();
    var browserify = require("browserify");
    var mold = require("mold-source-map");
    var path = require("path");
    stream.push(opts.src);
    stream.push(null);
    var b = browserify({
      basedir: opts.basedir,
      entries: stream,
      standalone: opts.standalone,
      debug: opts.debug
    });
    if (opts.transform) {
      b.transform(opts.transform);
    }
    var bundle = b.bundle();
    if (opts.debug) {
      var tmpRoot = path.dirname(opts.tmpFilePath);
      bundle = bundle.
        pipe(mold.transformSourcesContent(function (s, i) {
          if (i === 1) {
            return s.replace('//# sourceMappingURL=', "$&" + tmpRoot + "/");
          }
          return s;
        })
      );
    }
    write(bundle, opts.out, callback);
  };

  exports["browserifyIncBundle'"] = function browserifyIncBundle$prime(opts, callback) {
    var browserifyInc = require("browserify-incremental");
    var mold = require("mold-source-map");
    var path = require('path');
    var b = browserifyInc({
      basedir: opts.buildPath,
      cacheFile: opts.cachePath,
      standalone: opts.standalone,
      debug: opts.debug
    });
    b.add(opts.path);
    if (opts.transform) b.transform(opts.transform);
    var bundle = b.bundle();
    if (opts.debug) {
      bundle = bundle.pipe(mold.transform(function (map) {
        map.sourceRoot(path.resolve());
        return map.toComment();
      }));
    }
    write(bundle, opts.out, callback);
  };
})(PS["Pulp.Browserify"] = PS["Pulp.Browserify"] || {});
(function(exports) {
  'use strict';

  /* eslint-env node*/

  exports.unsafeFromNullable = function unsafeFromNullable (msg) {
      return function (x) {
          if (x === null) throw new Error(msg);
          return x;
      };
  };

  exports.spawnImpl = function spawnImpl (command) {
      return function (args) {
          return function (opts) {
              return function () {
                  return require('child_process').spawn(command, args, opts);
              };
          };
      };
  };

  exports.fork = function fork (cmd) {
      return function (args) {
          return function () {
              return require('child_process').fork(cmd, args);
          };
      };
  };

  exports.mkOnExit = function mkOnExit (mkChildExit) {
      return function onExit (cp) {
          return function (cb) {
              return function () {
                  cp.on('exit', function (code, signal) {
                      cb(mkChildExit(code)(signal))();
                  });
              };
          };
      };
  };

  exports.onError = function onError (cp) {
      return function (cb) {
          return function () {
              cp.on('error', function (err) {
                  cb(err)();
              });
          };
      };
  };

  exports.undefined = undefined;
  exports.process = process;
})(PS["Node.ChildProcess"] = PS["Node.ChildProcess"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module contains various types and functions to allow you to spawn and
  // | interact with child processes.
  // |
  // | It is intended to be imported qualified, as follows:
  // |
  // | ```purescript
  // | import Node.ChildProcess (ChildProcess, CHILD_PROCESS)
  // | import Node.ChildProcess as ChildProcess
  // | ```
  // |
  // | The [Node.js documentation](https://nodejs.org/api/child_process.html)
  // | forms the basis for this module and has in-depth documentation about
  // | runtime behaviour.
  "use strict";
  $PS["Node.ChildProcess"] = $PS["Node.ChildProcess"] || {};
  var exports = $PS["Node.ChildProcess"];
  var $foreign = $PS["Node.ChildProcess"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Effect_Exception_Unsafe = $PS["Effect.Exception.Unsafe"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                

  // | Behaviour for standard IO streams (eg, standard input, standard output) of
  // | a child process.
  // |
  // | * `Pipe`: creates a pipe between the child and parent process, which can
  // |   then be accessed as a `Stream` via the `stdin`, `stdout`, or `stderr`
  // |   functions.
  // | * `Ignore`: ignore this stream. This will cause Node to open /dev/null and
  // |   connect it to the stream.
  // | * `ShareStream`: Connect the supplied stream to the corresponding file
  // |    descriptor in the child.
  // | * `ShareFD`: Connect the supplied file descriptor (which should be open
  // |   in the parent) to the corresponding file descriptor in the child.
  var Pipe = (function () {
      function Pipe() {

      };
      Pipe.value = new Pipe();
      return Pipe;
  })();

  // | Behaviour for standard IO streams (eg, standard input, standard output) of
  // | a child process.
  // |
  // | * `Pipe`: creates a pipe between the child and parent process, which can
  // |   then be accessed as a `Stream` via the `stdin`, `stdout`, or `stderr`
  // |   functions.
  // | * `Ignore`: ignore this stream. This will cause Node to open /dev/null and
  // |   connect it to the stream.
  // | * `ShareStream`: Connect the supplied stream to the corresponding file
  // |    descriptor in the child.
  // | * `ShareFD`: Connect the supplied file descriptor (which should be open
  // |   in the parent) to the corresponding file descriptor in the child.
  var Ignore = (function () {
      function Ignore() {

      };
      Ignore.value = new Ignore();
      return Ignore;
  })();

  // | Behaviour for standard IO streams (eg, standard input, standard output) of
  // | a child process.
  // |
  // | * `Pipe`: creates a pipe between the child and parent process, which can
  // |   then be accessed as a `Stream` via the `stdin`, `stdout`, or `stderr`
  // |   functions.
  // | * `Ignore`: ignore this stream. This will cause Node to open /dev/null and
  // |   connect it to the stream.
  // | * `ShareStream`: Connect the supplied stream to the corresponding file
  // |    descriptor in the child.
  // | * `ShareFD`: Connect the supplied file descriptor (which should be open
  // |   in the parent) to the corresponding file descriptor in the child.
  var ShareStream = (function () {
      function ShareStream(value0) {
          this.value0 = value0;
      };
      ShareStream.create = function (value0) {
          return new ShareStream(value0);
      };
      return ShareStream;
  })();

  // | Behaviour for standard IO streams (eg, standard input, standard output) of
  // | a child process.
  // |
  // | * `Pipe`: creates a pipe between the child and parent process, which can
  // |   then be accessed as a `Stream` via the `stdin`, `stdout`, or `stderr`
  // |   functions.
  // | * `Ignore`: ignore this stream. This will cause Node to open /dev/null and
  // |   connect it to the stream.
  // | * `ShareStream`: Connect the supplied stream to the corresponding file
  // |    descriptor in the child.
  // | * `ShareFD`: Connect the supplied file descriptor (which should be open
  // |   in the parent) to the corresponding file descriptor in the child.
  var ShareFD = (function () {
      function ShareFD(value0) {
          this.value0 = value0;
      };
      ShareFD.create = function (value0) {
          return new ShareFD(value0);
      };
      return ShareFD;
  })();

  // | Specifies how a child process exited; normally (with an exit code), or
  // | due to a signal.
  var Normally = (function () {
      function Normally(value0) {
          this.value0 = value0;
      };
      Normally.create = function (value0) {
          return new Normally(value0);
      };
      return Normally;
  })();

  // | Specifies how a child process exited; normally (with an exit code), or
  // | due to a signal.
  var BySignal = (function () {
      function BySignal(value0) {
          this.value0 = value0;
      };
      BySignal.create = function (value0) {
          return new BySignal(value0);
      };
      return BySignal;
  })();

  // | Convert a ChildProcess.Error to a standard Error, which can then be thrown
  // | inside an Effect or Aff computation (for example).
  var toStandardError = Unsafe_Coerce.unsafeCoerce;
  var toActualStdIOBehaviour = function (b) {
      if (b instanceof Pipe) {
          return "pipe";
      };
      if (b instanceof Ignore) {
          return "ignore";
      };
      if (b instanceof ShareFD) {
          return b.value0;
      };
      if (b instanceof ShareStream) {
          return b.value0;
      };
      throw new Error("Failed pattern match at Node.ChildProcess (line 510, column 28 - line 514, column 33): " + [ b.constructor.name ]);
  };
  var toActualStdIOOptions = Data_Functor.map(Data_Functor.functorArray)(function ($29) {
      return Data_Nullable.toNullable(Data_Functor.map(Data_Maybe.functorMaybe)(toActualStdIOBehaviour)($29));
  });

  // | Spawn a child process. Note that, in the event that a child process could
  // | not be spawned (for example, if the executable was not found) this will
  // | not throw an error. Instead, the `ChildProcess` will be created anyway,
  // | but it will immediately emit an 'error' event.
  var spawn = function (cmd) {
      return function (args) {
          var convertOpts = function (opts) {
              return {
                  cwd: Data_Maybe.fromMaybe($foreign["undefined"])(opts.cwd),
                  stdio: toActualStdIOOptions(opts.stdio),
                  env: Data_Nullable.toNullable(opts.env),
                  detached: opts.detached,
                  uid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.uid),
                  gid: Data_Maybe.fromMaybe($foreign["undefined"])(opts.gid)
              };
          };
          return function ($30) {
              return $foreign.spawnImpl(cmd)(args)(convertOpts($30));
          };
      };
  }; 
  var runChildProcess = function (v) {
      return v;
  };

  // | Create pipes for each of the three standard IO streams.
  var pipe = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ Pipe.value, Pipe.value, Pipe.value ]);

  // | The process ID of a child process. Note that if the process has already
  // | exited, another process may have taken the same ID, so be careful!
  var pid = function ($31) {
      return (function (v) {
          return v.pid;
      })(runChildProcess($31));
  };                                                                                     
  var mkExit = function (code) {
      return function (signal) {
          var fromSignal = Control_Bind.composeKleisli(Data_Maybe.bindMaybe)(Data_Nullable.toMaybe)(function ($32) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(BySignal.create)(Data_Posix_Signal.fromString($32));
          });
          var fromCode = function ($33) {
              return Data_Functor.map(Data_Maybe.functorMaybe)(Normally.create)(Data_Nullable.toMaybe($33));
          };
          var v = Control_Alt.alt(Data_Maybe.altMaybe)(fromCode(code))(fromSignal(signal));
          if (v instanceof Data_Maybe.Just) {
              return v.value0;
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Effect_Exception_Unsafe.unsafeThrow("Node.ChildProcess.mkExit: Invalid arguments");
          };
          throw new Error("Failed pattern match at Node.ChildProcess (line 169, column 3 - line 172, column 3): " + [ v.constructor.name ]);
      };
  };                                       

  // | Handle the `"exit"` signal.
  var onExit = $foreign.mkOnExit(mkExit);
  var mkEffect = Unsafe_Coerce.unsafeCoerce;
  var missingStream = function (str) {
      return "Node.ChildProcess: stream not available: " + (str + ("\x0aThis is probably " + ("because you passed something other than Pipe to the stdio option when " + "you spawned it.")));
  };

  // | The standard error stream of a child process. Note that this is only
  // | available if the process was spawned with the stderr option set to "pipe".
  var stderr = function ($34) {
      return $foreign.unsafeFromNullable(missingStream("stderr"))((function (v) {
          return v.stderr;
      })(runChildProcess($34)));
  };

  // | The standard input stream of a child process. Note that this is only
  // | available if the process was spawned with the stdin option set to "pipe".
  var stdin = function ($35) {
      return $foreign.unsafeFromNullable(missingStream("stdin"))((function (v) {
          return v.stdin;
      })(runChildProcess($35)));
  };

  // | The standard output stream of a child process. Note that this is only
  // | available if the process was spawned with the stdout option set to "pipe".
  var stdout = function ($36) {
      return $foreign.unsafeFromNullable(missingStream("stdout"))((function (v) {
          return v.stdout;
      })(runChildProcess($36)));
  };

  // | Send a signal to a child process. In the same way as the
  // | [unix kill(2) system call](https://linux.die.net/man/2/kill),
  // | sending a signal to a child process won't necessarily kill it.
  // |
  // | The resulting effects of this function depend on the process
  // | and the signal. They can vary from system to system.
  // | The child process might emit an `"error"` event if the signal
  // | could not be delivered.
  var kill = function (sig) {
      return function (v) {
          return mkEffect(function (v1) {
              return v.kill(Data_Posix_Signal.toString(sig));
          });
      };
  };

  // | Share `stdin` with `stdin`, `stdout` with `stdout`,
  // | and `stderr` with `stderr`.
  var inherit = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ new ShareStream($foreign.process.stdin), new ShareStream($foreign.process.stdout), new ShareStream($foreign.process.stderr) ]);

  // | A default set of `SpawnOptions`. Everything is set to `Nothing`,
  // | `detached` is `false` and `stdio` is `ChildProcess.pipe`.
  var defaultSpawnOptions = {
      cwd: Data_Maybe.Nothing.value,
      stdio: pipe,
      env: Data_Maybe.Nothing.value,
      detached: false,
      uid: Data_Maybe.Nothing.value,
      gid: Data_Maybe.Nothing.value
  };
  exports["stdin"] = stdin;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["pid"] = pid;
  exports["kill"] = kill;
  exports["toStandardError"] = toStandardError;
  exports["Normally"] = Normally;
  exports["BySignal"] = BySignal;
  exports["onExit"] = onExit;
  exports["spawn"] = spawn;
  exports["defaultSpawnOptions"] = defaultSpawnOptions;
  exports["Pipe"] = Pipe;
  exports["Ignore"] = Ignore;
  exports["ShareStream"] = ShareStream;
  exports["ShareFD"] = ShareFD;
  exports["pipe"] = pipe;
  exports["inherit"] = inherit;
  exports["onError"] = $foreign.onError;
  exports["fork"] = $foreign.fork;
})(PS);
(function(exports) {
  // module Pulp.System.Stream
  "use strict";

  exports["concatStreamToBuffer'"] = function concatStream$prime(stream, callback) {
    var concat = require("concat-stream");

    var onSuccess = function(buf) {
      callback(null, buf);
    };

    var onError = function(err) {
      callback(err, null);
    };

    stream.on('error', onError);
    stream.pipe(concat(onSuccess));
  };

  exports.createGzip = require("zlib").createGzip;
})(PS["Pulp.System.Stream"] = PS["Pulp.System.Stream"] || {});
(function(exports) {
  "use strict";

  exports.onError = function (s) {
    return function (f) {
      return function () {
        s.on("error", function (e) {
          f(e)();
        });
      };
    };
  };

  exports.write = function (w) {
    return function (chunk) {
      return function (done) {
        return function () {
          return w.write(chunk, null, done);
        };
      };
    };
  };

  exports.writeStringImpl = function (w) {
    return function (enc) {
      return function (s) {
        return function (done) {
          return function () {
            return w.write(s, enc, done);
          };
        };
      };
    };
  };

  exports.end = function (w) {
    return function (done) {
      return function () {
        w.end(null, null, function () {
          done();
        });
      };
    };
  };
})(PS["Node.Stream"] = PS["Node.Stream"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module provides a low-level wrapper for the [Node Stream API](https://nodejs.org/api/stream.html).
  "use strict";
  $PS["Node.Stream"] = $PS["Node.Stream"] || {};
  var exports = $PS["Node.Stream"];
  var $foreign = $PS["Node.Stream"];
  var Data_Show = $PS["Data.Show"];
  var Node_Encoding = $PS["Node.Encoding"];                

  // | Write a string in the specified encoding to a writable stream.
  var writeString = function (w) {
      return function (enc) {
          return $foreign.writeStringImpl(w)(Data_Show.show(Node_Encoding.showEncoding)(enc));
      };
  };
  exports["writeString"] = writeString;
  exports["onError"] = $foreign.onError;
  exports["write"] = $foreign.write;
  exports["end"] = $foreign.end;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.System.Stream"] = $PS["Pulp.System.Stream"] || {};
  var exports = $PS["Pulp.System.Stream"];
  var $foreign = $PS["Pulp.System.Stream"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_Process = $PS["Node.Process"];
  var Node_Stream = $PS["Node.Stream"];
  var Pulp_System_FFI = $PS["Pulp.System.FFI"];            
  var write = function (stream) {
      return function (str) {
          return Effect_Aff.makeAff(function (cb) {
              return Control_Apply.applyFirst(Effect.applyEffect)(Data_Monoid.mempty(Effect.monoidEffect(Effect_Aff.monoidCanceler)))(Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(stream)(Node_Encoding.UTF8.value)(str)(cb(new Data_Either.Right(Data_Unit.unit)))));
          });
      };
  };
  var stdout = Node_Process.stdout;
  var stderr = Node_Process.stderr;       
  var end = function (stream) {
      return Effect_Aff.makeAff(function (cb) {
          return Control_Apply.applyFirst(Effect.applyEffect)(Data_Monoid.mempty(Effect.monoidEffect(Effect_Aff.monoidCanceler)))(Data_Functor["void"](Effect.functorEffect)(Node_Stream.end(stream)(cb(new Data_Either.Right(Data_Unit.unit)))));
      });
  };
  var concatStreamToBuffer = function (stream) {
      return Pulp_System_FFI.runNode(Data_Function_Uncurried.runFn2($foreign["concatStreamToBuffer'"])(stream));
  };
  var concatStream = function (stream) {
      return Control_Bind.bind(Effect_Aff.bindAff)(concatStreamToBuffer(stream))(function (v) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer_Class.toString(Node_Buffer.mutableBufferEffect)(Node_Encoding.UTF8.value)(v));
      });
  };
  exports["end"] = end;
  exports["write"] = write;
  exports["stdout"] = stdout;
  exports["stderr"] = stderr;
  exports["concatStream"] = concatStream;
  exports["concatStreamToBuffer"] = concatStreamToBuffer;
  exports["createGzip"] = $foreign.createGzip;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Exec"] = $PS["Pulp.Exec"] || {};
  var exports = $PS["Pulp.Exec"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Posix_Signal = $PS["Data.Posix.Signal"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_AVar = $PS["Effect.Aff.AVar"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Platform = $PS["Node.Platform"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_System_Stream = $PS["Pulp.System.Stream"];                

  // | A slightly weird combination of `onError` and `onExit` into one.
  var wait = function (child) {
      return Effect_Aff.makeAff(function (cb) {
          var success = function ($27) {
              return cb(Data_Either.Right.create($27));
          };
          return function __do() {
              Node_ChildProcess.onExit(child)(function ($28) {
                  return success(Data_Either.Right.create($28));
              })();
              Node_ChildProcess.onError(child)(function ($29) {
                  return success(Data_Either.Left.create($29));
              })();
              return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
          };
      });
  };
  var showExit = function (v) {
      if (v instanceof Node_ChildProcess.Normally) {
          return "with exit code " + Data_Show.show(Data_Show.showInt)(v.value0);
      };
      if (v instanceof Node_ChildProcess.BySignal) {
          return "as a result of receiving " + Data_Show.show(Data_Posix_Signal.showSignal)(v.value0);
      };
      throw new Error("Failed pattern match at Pulp.Exec (line 142, column 1 - line 142, column 30): " + [ v.constructor.name ]);
  };
  var handleErrors = function (cmd) {
      return function (retry) {
          return function (err) {
              if (err.code === "ENOENT") {
                  var $16 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
                  if ($16) {
                      var v = Data_String_CodeUnits.stripSuffix(".cmd")(cmd);
                      if (v instanceof Data_Maybe.Nothing) {
                          return retry(cmd + ".cmd");
                      };
                      if (v instanceof Data_Maybe.Just) {
                          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("`" + (v.value0 + ("` executable not found. (nor `" + (cmd + "`)")))));
                      };
                      throw new Error("Failed pattern match at Pulp.Exec (line 151, column 13 - line 155, column 8): " + [ v.constructor.name ]);
                  };
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("`" + (cmd + "` executable not found.")));
              };
              if (Data_Boolean.otherwise) {
                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Node_ChildProcess.toStandardError(err));
              };
              throw new Error("Failed pattern match at Pulp.Exec (line 146, column 1 - line 146, column 75): " + [ cmd.constructor.name, retry.constructor.name, err.constructor.name ]);
          };
      };
  };

  // | Like exec, but allows you to supply your own StdIOBehaviour.
  var execWithStdio = function (stdio) {
      return function (cmd) {
          return function (args) {
              return function (env) {
                  var retry = function (newCmd) {
                      return execWithStdio(stdio)(newCmd)(args)(env);
                  };
                  var onExit = function (exit) {
                      if (exit instanceof Node_ChildProcess.Normally && exit.value0 === 0) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      };
                      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Subcommand terminated " + showExit(exit)));
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ChildProcess.spawn(cmd)(args)({
                      cwd: Node_ChildProcess.defaultSpawnOptions.cwd,
                      stdio: stdio,
                      env: env,
                      detached: Node_ChildProcess.defaultSpawnOptions.detached,
                      uid: Node_ChildProcess.defaultSpawnOptions.uid,
                      gid: Node_ChildProcess.defaultSpawnOptions.gid
                  })))(function (v) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(wait(v))(Data_Either.either(handleErrors(cmd)(retry))(onExit));
                  });
              };
          };
      };
  };
  var execQuietWithStderr = function (stderrBehaviour) {
      return function (cmd) {
          return function (args) {
              return function (env) {
                  var retry = function (newCmd) {
                      return execQuietWithStderr(stderrBehaviour)(newCmd)(args)(env);
                  };
                  var onExit = function (outVar) {
                      return function (exit) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.take(outVar))(function (childOut) {
                              if (exit instanceof Node_ChildProcess.Normally && exit.value0 === 0) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(childOut);
                              };
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_System_Stream.write(Pulp_System_Stream.stderr)(childOut))(function () {
                                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Subcommand terminated " + showExit(exit)));
                              });
                          });
                      };
                  };
                  var stdio = [ new Data_Maybe.Just(new Node_ChildProcess.ShareStream(Node_Process.stdin)), new Data_Maybe.Just(Node_ChildProcess.Pipe.value), new Data_Maybe.Just(stderrBehaviour) ];
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ChildProcess.spawn(cmd)(args)({
                      cwd: Node_ChildProcess.defaultSpawnOptions.cwd,
                      stdio: stdio,
                      env: env,
                      detached: Node_ChildProcess.defaultSpawnOptions.detached,
                      uid: Node_ChildProcess.defaultSpawnOptions.uid,
                      gid: Node_ChildProcess.defaultSpawnOptions.gid
                  })))(function (v) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v1) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.forkAff(Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Stream.concatStream(Node_ChildProcess.stdout(v)))(function (x) {
                              return Effect_Aff_AVar.put(x)(v1);
                          })))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(wait(v))(Data_Either.either(handleErrors(cmd)(retry))(onExit(v1)));
                          });
                      });
                  });
              };
          };
      };
  };

  // | Same as exec, except instead of relaying stdout immediately, it is
  // | captured and returned as a String.
  var execQuiet = execQuietWithStderr(new Node_ChildProcess.ShareStream(Node_Process.stderr));
  var pursBundle = function (files) {
      return function (args) {
          return function (env) {
              return execQuiet("purs")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "bundle" ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(files)(args)))(env);
          };
      };
  };

  // | Start a child process asynchronously, with the given command line
  // | arguments and environment, and wait for it to exit.
  // | On a non-zero exit code, throw an error.
  // |
  // | If the executable was not found and we are on Windows, retry with ".cmd"
  // | appended.
  // |
  // | Stdout, stdin, and stderr of the child process are shared with the pulp
  // | process (that is, data on stdin from pulp is relayed to the child process,
  // | and any stdout and stderr from the child process are relayed back out by
  // | pulp, which usually means they will immediately appear in the terminal).
  var exec = execWithStdio(Node_ChildProcess.inherit);

  // | A version of `exec` which installs signal handlers to make sure that the
  // | signals SIGINT and SIGTERM are relayed to the child process, if received.
  var execInteractive = function (cmd) {
      return function (args) {
          return function (env) {
              var retry = function (newCmd) {
                  return exec(newCmd)(args)(env);
              };
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ChildProcess.spawn(cmd)(args)({
                  cwd: Node_ChildProcess.defaultSpawnOptions.cwd,
                  stdio: Node_ChildProcess.inherit,
                  env: env,
                  detached: Node_ChildProcess.defaultSpawnOptions.detached,
                  uid: Node_ChildProcess.defaultSpawnOptions.uid,
                  gid: Node_ChildProcess.defaultSpawnOptions.gid
              })))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Foldable.for_(Effect.applicativeEffect)(Data_Foldable.foldableArray)([ Data_Posix_Signal.SIGTERM.value, Data_Posix_Signal.SIGINT.value ])(function (sig) {
                      return Node_Process.onSignal(sig)(Data_Functor["void"](Effect.functorEffect)(Node_ChildProcess.kill(sig)(v)));
                  })))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(wait(v))(Data_Either.either(handleErrors(cmd)(retry))(Data_Function["const"](Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit))));
                  });
              });
          };
      };
  };
  var compiler = function (name) {
      return function (deps) {
          return function (args) {
              return function (env) {
                
                  // | Like Node.ChildProcess.inherit except the child process' standard output
                  // | is sent to Pulp's standard error.
  var inheritButOutToErr = Data_Functor.map(Data_Functor.functorArray)(Data_Maybe.Just.create)([ new Node_ChildProcess.ShareStream(Node_Process.stdin), new Node_ChildProcess.ShareStream(Node_Process.stderr), new Node_ChildProcess.ShareStream(Node_Process.stderr) ]);
                  return execWithStdio(inheritButOutToErr)(name)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(args)(deps))(env);
              };
          };
      };
  };
  var psa = compiler("psa");
  var pursBuild = function (deps) {
      return function (args) {
          return compiler("purs")(deps)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "compile" ])(args));
      };
  };
  exports["exec"] = exec;
  exports["execQuiet"] = execQuiet;
  exports["execWithStdio"] = execWithStdio;
  exports["execQuietWithStderr"] = execQuietWithStderr;
  exports["execInteractive"] = execInteractive;
  exports["psa"] = psa;
  exports["pursBuild"] = pursBuild;
  exports["pursBundle"] = pursBundle;
})(PS);
(function(exports) {
  // module Pulp.System.Files

  "use strict";

  exports.isEEXIST = function isEEXIST(err) {
    return err && err.code === 'EEXIST';
  };

  var temp = require('temp').track();
  exports["openTemp'"] = function openTemp$prime(opts, callback) {
    temp.open(opts, callback);
  };

  exports.createWriteStream = function createWriteStream(path) {
    return function() {
      return require('fs').createWriteStream(path);
    };
  };

  exports.isENOENT = function isENOENT(error) {
    return error.code === "ENOENT";
  };
})(PS["Pulp.System.Files"] = PS["Pulp.System.Files"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.System.Files"] = $PS["Pulp.System.Files"] || {};
  var exports = $PS["Pulp.System.Files"];
  var $foreign = $PS["Pulp.System.Files"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Pulp_System_FFI = $PS["Pulp.System.FFI"];
  var openTemp = function (opts) {
      return Pulp_System_FFI.runNode(Data_Function_Uncurried.runFn2($foreign["openTemp'"])(opts));
  };
  var mkdirIfNotExist = function (dir) {
      return Control_Monad_Error_Class.catchJust(Effect_Aff.monadErrorAff)(function (e) {
          var $0 = $foreign.isEEXIST(e);
          if ($0) {
              return new Data_Maybe.Just(Data_Unit.unit);
          };
          return Data_Maybe.Nothing.value;
      })(Node_FS_Aff.mkdir(dir))(Control_Applicative.pure(Effect_Aff.applicativeAff));
  };
  exports["mkdirIfNotExist"] = mkdirIfNotExist;
  exports["openTemp"] = openTemp;
  exports["createWriteStream"] = $foreign.createWriteStream;
  exports["isENOENT"] = $foreign.isENOENT;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Project"] = $PS["Pulp.Project"] || {};
  var exports = $PS["Pulp.Project"];
  var Control_Alt = $PS["Control.Alt"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_JSON = $PS["Foreign.JSON"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_Path = $PS["Node.Path"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_System_Files = $PS["Pulp.System.Files"];                
  var Project = function (x) {
      return x;
  };

  // | If project file has a `set` property we assume it's a psc-package project file
  var usingPscPackage = function (v) {
      var v1 = Control_Monad_Except.runExcept(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("set")(v.projectFile))(Foreign.readString));
      if (v1 instanceof Data_Either.Right) {
          return true;
      };
      return false;
  };

  // | Read a project's bower file at the given path and construct a Project
  // | value.
  var readConfig = function (configFilePath) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(configFilePath))(function (v) {
          var v1 = Control_Monad_Except.runExcept(Foreign_JSON.parseJSON(v));
          if (v1 instanceof Data_Either.Left) {
              return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Unable to parse " + (Node_Path.basename(configFilePath) + (": " + Data_Show.show(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(v1.value0)))));
          };
          if (v1 instanceof Data_Either.Right) {
              var path = Node_Path.dirname(configFilePath);
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ path ])(".pulp-cache")))(function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.chdir(path)))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_System_Files.mkdirIfNotExist(v2))(function () {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                              projectFile: v1.value0,
                              cache: v2,
                              path: path
                          });
                      });
                  });
              });
          };
          throw new Error("Failed pattern match at Pulp.Project (line 54, column 3 - line 62, column 72): " + [ v1.constructor.name ]);
      });
  };

  // | Attempt to find a file in the given directory or any parent of it.
  var findIn = function (path) {
      return function (file) {
          var fullPath = Node_Path.concat([ path, file ]);
          return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists(fullPath))(function (v) {
              if (v) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just(fullPath));
              };
              var parent = Node_Path.dirname(path);
              var $25 = path === parent;
              if ($25) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
              };
              return findIn(parent)(file);
          });
      };
  };

  // | Use the provided project file, or if it is Nothing, try to find a project file
  // | path in this or any parent directory, with Bower taking precedence over psc-package.
  var getProjectFile = (function () {
      var search = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.cwd))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(findIn(v)("bower.json"))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(findIn(v)("psc-package.json"))(function (v2) {
                  var v3 = Control_Alt.alt(Data_Maybe.altMaybe)(v1)(v2);
                  if (v3 instanceof Data_Maybe.Just) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(v3.value0);
                  };
                  if (v3 instanceof Data_Maybe.Nothing) {
                      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("No bower.json or psc-package.json found in current or parent directories. Are you in a PureScript project?"));
                  };
                  throw new Error("Failed pattern match at Pulp.Project (line 80, column 5 - line 85, column 1): " + [ v3.constructor.name ]);
              });
          });
      });
      return Data_Maybe.maybe(search)(Control_Applicative.pure(Effect_Aff.applicativeAff));
  })();
  var getProject = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("bowerFile")(args))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("pscPackage")(args))(function (v1) {
              var pscPackage = (function () {
                  if (v1) {
                      return new Data_Maybe.Just("psc-package.json");
                  };
                  return Data_Maybe.Nothing.value;
              })();
              return Control_Bind.bind(Effect_Aff.bindAff)(getProjectFile(Control_Alt.alt(Data_Maybe.altMaybe)(v)(pscPackage)))(readConfig);
          });
      });
  };
  var decodeProject = new Foreign_Generic_Class.Decode(function (o) {
      return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Project)(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("projectFile")(o))(function (v) {
          return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("path")(o))(Foreign.readString))(function (v1) {
              return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_Index.readProp("cache")(o))(Foreign.readString))(function (v2) {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))({
                      projectFile: v,
                      path: v1,
                      cache: v2
                  });
              });
          });
      }));
  });
  exports["Project"] = Project;
  exports["getProject"] = getProject;
  exports["usingPscPackage"] = usingPscPackage;
  exports["decodeProject"] = decodeProject;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Files"] = $PS["Pulp.Files"] || {};
  var exports = $PS["Pulp.Files"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Array = $PS["Data.Array"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Set = $PS["Data.Set"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unfoldable = $PS["Data.Unfoldable"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Node_Path = $PS["Node.Path"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Project = $PS["Pulp.Project"];                      
  var recursiveGlobWithExtension = function (ext) {
      return function ($10) {
          return Data_Functor.map(Data_Functor.functorArray)(function (v) {
              return v + ("/**/*." + ext);
          })(Data_Set.toUnfoldable(Data_Unfoldable.unfoldableArray)($10));
      };
  };
  var sources = recursiveGlobWithExtension("purs");
  var pscPackageGlobs = (function () {
    
      // Split on newlines and strip the /**/*/.purs suffixes just to
      // append them later so it plays well with the other globs
  var processGlobs = function ($11) {
          return Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)(Data_Array.mapMaybe(Data_String_CodeUnits.stripSuffix(Node_Path.sep + ("**" + (Node_Path.sep + "*.purs"))))(Control_Bind.composeKleisli(Control_Bind.bindArray)(Data_String_Common.split("\x0d\x0a"))(Data_String_Common.split("\x0a"))($11)));
      };
      return Data_Functor.mapFlipped(Effect_Aff.functorAff)(Pulp_Exec.execQuiet("psc-package")([ "sources" ])(Data_Maybe.Nothing.value))(processGlobs);
  })();
  var outputModules = function (buildPath) {
      return [ buildPath + "/*/*.js" ];
  };
  var includeGlobs = function (opts) {
      var mkSet = function ($12) {
          return Data_Set.fromFoldable(Data_Foldable.foldableArray)(Data_Ord.ordString)(Data_Maybe.fromMaybe([  ])($12));
      };
      return Data_Functor.map(Effect_Aff.functorAff)(mkSet)(Pulp_Args_Get.getOption(Foreign_Generic_Class.arrayDecode(Foreign_Generic_Class.stringDecode))("includePaths")(opts));
  };
  var globsFromOption$prime = function (dictDecode) {
      return function (f) {
          return function (name) {
              return function (opts) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(dictDecode)(name)(opts))(function (v) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)((function () {
                          if (v instanceof Data_Maybe.Just) {
                              return Data_Set.singleton(f(v.value0));
                          };
                          if (v instanceof Data_Maybe.Nothing) {
                              return Data_Set.empty;
                          };
                          throw new Error("Failed pattern match at Pulp.Files (line 46, column 10 - line 48, column 31): " + [ v.constructor.name ]);
                      })());
                  });
              };
          };
      };
  };
  var globsFromOption = function (dictDecode) {
      return globsFromOption$prime(dictDecode)(Control_Category.identity(Control_Category.categoryFn));
  };
  var localGlobs = globsFromOption(Foreign_Generic_Class.stringDecode)("srcPath");
  var testGlobs = globsFromOption(Foreign_Generic_Class.stringDecode)("testPath");
  var ffis = recursiveGlobWithExtension("js");
  var dependencyGlobs = function (opts) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Pulp_Project.decodeProject)("_project")(opts))(function (v) {
          var $9 = Pulp_Project.usingPscPackage(v);
          if ($9) {
              return pscPackageGlobs;
          };
          return globsFromOption$prime(Foreign_Generic_Class.stringDecode)(function (path) {
              return Node_Path.concat([ path, "purescript-*", "src" ]);
          })("dependencyPath")(opts);
      });
  };
  var defaultGlobs = function (opts) {
      return Data_Functor.map(Effect_Aff.functorAff)(Data_Set.unions(Data_List_Types.foldableList)(Data_Ord.ordString))(Data_Traversable.sequence(Data_List_Types.traversableList)(Effect_Aff.applicativeAff)(Data_List.fromFoldable(Data_Foldable.foldableArray)([ localGlobs(opts), dependencyGlobs(opts), includeGlobs(opts) ])));
  };
  exports["sources"] = sources;
  exports["ffis"] = ffis;
  exports["localGlobs"] = localGlobs;
  exports["testGlobs"] = testGlobs;
  exports["dependencyGlobs"] = dependencyGlobs;
  exports["includeGlobs"] = includeGlobs;
  exports["defaultGlobs"] = defaultGlobs;
  exports["outputModules"] = outputModules;
})(PS);
(function(exports) {
  // module Pulp.System.SupportsColor
  "use strict";

  // The MIT License (MIT)
  // 
  // Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)
  // 
  // Permission is hereby granted, free of charge, to any person obtaining a copy
  // of this software and associated documentation files (the "Software"), to deal
  // in the Software without restriction, including without limitation the rights
  // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  // copies of the Software, and to permit persons to whom the Software is
  // furnished to do so, subject to the following conditions:
  // 
  // The above copyright notice and this permission notice shall be included in
  // all copies or substantial portions of the Software.
  // 
  // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  // THE SOFTWARE.

  exports.supportLevel = (function() {
    if (process.stderr && !process.stderr.isTTY) {
      return 0;
    }

    if (process.platform === 'win32') {
      return 1;
    }

    if ('COLORTERM' in process.env) {
      return 1;
    }

    if (process.env.TERM === 'dumb') {
      return 0;
    }

    if (/^xterm-256(?:color)?/.test(process.env.TERM)) {
      return 2;
    }

    if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
      return 1;
    }

    return 0;
  })();
})(PS["Pulp.System.SupportsColor"] = PS["Pulp.System.SupportsColor"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.System.SupportsColor"] = $PS["Pulp.System.SupportsColor"] || {};
  var exports = $PS["Pulp.System.SupportsColor"];
  var $foreign = $PS["Pulp.System.SupportsColor"];
  var hasBasic = $foreign.supportLevel >= 1;
  exports["hasBasic"] = hasBasic;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Outputter"] = $PS["Pulp.Outputter"] || {};
  var exports = $PS["Pulp.Outputter"];
  var Ansi_Codes = $PS["Ansi.Codes"];
  var Ansi_Output = $PS["Ansi.Output"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_System_Stream = $PS["Pulp.System.Stream"];
  var Pulp_System_SupportsColor = $PS["Pulp.System.SupportsColor"];                

  // | An outputter which doesn't ever output anything.
  var nullOutputter = (function () {
      var dud = Data_Function["const"](Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit));
      return {
          log: dud,
          err: dud,
          write: dud,
          bolded: dud,
          monochrome: false
      };
  })();
  var monochromeOutputter = (function () {
      var monobullet = function (text) {
          return Pulp_System_Stream.write(Pulp_System_Stream.stderr)("* " + (text + "\x0a"));
      };
      return {
          log: monobullet,
          err: monobullet,
          write: Pulp_System_Stream.write(Pulp_System_Stream.stderr),
          bolded: Pulp_System_Stream.write(Pulp_System_Stream.stderr),
          monochrome: true
      };
  })();
  var bullet = function (stream) {
      return function (color) {
          return function (text) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_System_Stream.write(stream)(Ansi_Output.withGraphics(Ansi_Output.foreground(color))("* ")))(function () {
                  return Pulp_System_Stream.write(stream)(text + "\x0a");
              });
          };
      };
  };
  var ansiOutputter = {
      log: bullet(Pulp_System_Stream.stderr)(Ansi_Codes.Green.value),
      err: bullet(Pulp_System_Stream.stderr)(Ansi_Codes.Red.value),
      write: Pulp_System_Stream.write(Pulp_System_Stream.stderr),
      bolded: function ($4) {
          return Pulp_System_Stream.write(Pulp_System_Stream.stderr)(Ansi_Output.withGraphics(Ansi_Output.bold)($4));
      },
      monochrome: false
  };

  // | Get an outputter. The argument represents "monochrome"; if true is
  // | supplied, the returned logger will never use color. Otherwise, whether or
  // | not colour is used depends on the "supports-color" module. Note that the
  // | `monochrome` attribute of the returned outputter might not necessarily
  // | be the same as the argument supplied.
  var makeOutputter = function (monochrome) {
      var $1 = !monochrome && Pulp_System_SupportsColor.hasBasic;
      if ($1) {
          return ansiOutputter;
      };
      return monochromeOutputter;
  };

  // | Get an outputter, with monochrome based on the command line arguments.
  var getOutputter = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("_silenced")(args.commandOpts))(function (v) {
          if (v) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(nullOutputter);
          };
          return Data_Functor.map(Effect_Aff.functorAff)(makeOutputter)(Pulp_Args_Get.getFlag("monochrome")(args.globalOpts));
      });
  };
  exports["getOutputter"] = getOutputter;
  exports["makeOutputter"] = makeOutputter;
})(PS);
(function(exports) {
  "use strict";

  exports.sorceryImpl = function sorceryImpl(file, succ, err) {
    var sorcery = require('sorcery');
    sorcery.load(file).then(function (chain) {
      if (!chain) {
        err(new Error("Sorcery did not resolve chain for " + file));
        return;
      }
      chain.write().then(succ, err);
    }, err);
  };
})(PS["Pulp.Sorcery"] = PS["Pulp.Sorcery"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Sorcery"] = $PS["Pulp.Sorcery"] || {};
  var exports = $PS["Pulp.Sorcery"];
  var $foreign = $PS["Pulp.Sorcery"];
  var Control_Apply = $PS["Control.Apply"];
  var Data_Either = $PS["Data.Either"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];                

  // | Run sorcery given JS file
  var sorcery = function (file) {
      return Effect_Aff.makeAff(function (cb) {
          return Control_Apply.applyFirst(Effect.applyEffect)(Data_Monoid.mempty(Effect.monoidEffect(Effect_Aff.monoidCanceler)))(function () {
              return $foreign.sorceryImpl(file, cb(new Data_Either.Right(Data_Unit.unit)), function ($0) {
                  return cb(Data_Either.Left.create($0))();
              });
          });
      });
  };
  exports["sorcery"] = sorcery;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Validate"] = $PS["Pulp.Validate"] || {};
  var exports = $PS["Pulp.Validate"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodePoints = $PS["Data.String.CodePoints"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Version_Haskell = $PS["Data.Version.Haskell"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var minimumPursVersion = new Data_Version_Haskell.Version(Data_List.fromFoldable(Data_Foldable.foldableArray)([ 0, 11, 0 ]), Data_List_Types.Nil.value);
  var getVersionFrom = function (bin) {
      return function (out) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Functor.functorFn)(Data_String_CodePoints.takeWhile(function (v) {
              return Data_Eq.notEq(Data_String_CodePoints.eqCodePoint)(v)(Data_String_CodePoints.codePointFromChar(" "));
          }))(Data_String_Common.trim))(Pulp_Exec.execQuiet(bin)([ "--version" ])(Data_Maybe.Nothing.value)))(function (v) {
              var v1 = Data_Version_Haskell.parseVersion(v);
              if (v1 instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value0);
              };
              if (v1 instanceof Data_Either.Left) {
                  var msg = Text_Parsing_Parser.parseErrorMessage(v1.value0);
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("Unable to parse the version from " + (bin + (". (It was: " + (v + ")")))))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("Please check that the right executable is on your PATH."))(function () {
                          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Couldn't parse version from " + bin));
                      });
                  });
              };
              throw new Error("Failed pattern match at Pulp.Validate (line 45, column 3 - line 52, column 64): " + [ v1.constructor.name ]);
          });
      };
  };
  var getPursVersion = getVersionFrom("purs");
  var validate = function (out) {
      return Control_Bind.bind(Effect_Aff.bindAff)(getPursVersion(out))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Ord.lessThan(Data_Version_Haskell.ordVersion)(v)(minimumPursVersion))(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("This version of Pulp requires version " + (Data_Version_Haskell.showVersion(minimumPursVersion) + (" of the PureScript compiler " + "or higher."))))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("Your installed version is " + (Data_Version_Haskell.showVersion(v) + ".")))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("Please either upgrade PureScript or downgrade Pulp to version 10.x."))(function () {
                      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Minimum purs version not satisfied"));
                  });
              });
          })))(function () {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v);
          });
      });
  };
  var getPsaVersion = getVersionFrom("psa");
  exports["validate"] = validate;
  exports["getPursVersion"] = getPursVersion;
  exports["getPsaVersion"] = getPsaVersion;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Build"] = $PS["Pulp.Build"] || {};
  var exports = $PS["Pulp.Build"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Version_Haskell = $PS["Data.Version.Haskell"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_Path = $PS["Node.Path"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Args = $PS["Pulp.Args"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Files = $PS["Pulp.Files"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_Sorcery = $PS["Pulp.Sorcery"];
  var Pulp_System_Files = $PS["Pulp.System.Files"];
  var Pulp_System_Stream = $PS["Pulp.System.Stream"];
  var Pulp_Validate = $PS["Pulp.Validate"];                
  var NormalBuild = (function () {
      function NormalBuild() {

      };
      NormalBuild.value = new NormalBuild();
      return NormalBuild;
  })();
  var TestBuild = (function () {
      function TestBuild() {

      };
      TestBuild.value = new TestBuild();
      return TestBuild;
  })();
  var RunBuild = (function () {
      function RunBuild() {

      };
      RunBuild.value = new RunBuild();
      return RunBuild;
  })();

  // | Get a writable stream which output should be written to, based on the
  // | value of the 'to' option.
  var withOutputStream = function (opts) {
      return function (aff) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("to")(opts))(function (v) {
              if (v instanceof Data_Maybe.Just) {
                  var dir = Node_Path.dirname(v.value0);
                  var tmpFile = dir + (Node_Path.sep + ("." + Node_Path.basename(v.value0)));
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_System_Files.mkdirIfNotExist(dir))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Pulp_System_Files.createWriteStream(tmpFile)))(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(aff(v1)))(function () {
                              return Data_Functor["void"](Effect_Aff.functorAff)(Pulp_System_Stream.end(v1));
                          });
                      })))(function (v1) {
                          if (v1 instanceof Data_Either.Right) {
                              return Node_FS_Aff.rename(tmpFile)(v.value0);
                          };
                          if (v1 instanceof Data_Either.Left) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(Effect_Aff.apathize(Node_FS_Aff.unlink(tmpFile))))(function () {
                                  return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(v1.value0);
                              });
                          };
                          throw new Error("Failed pattern match at Pulp.Build (line 169, column 9 - line 174, column 27): " + [ v1.constructor.name ]);
                      });
                  });
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return aff(Pulp_System_Stream.stdout);
              };
              throw new Error("Failed pattern match at Pulp.Build (line 159, column 3 - line 176, column 17): " + [ v.constructor.name ]);
          });
      };
  };
  var shouldUsePsa = function (args) {
    
      // TODO this is actually semver
  var minimumPsaVersion = new Data_Version_Haskell.Version(Data_List.fromFoldable(Data_Foldable.foldableArray)([ 0, 5, 0 ]), Data_List_Types.Nil.value);
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("noPsa")(args.commandOpts))(function (v) {
          if (v) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(false);
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Pulp_Validate.getPsaVersion(v1)))(function (v2) {
                  if (v2 instanceof Data_Either.Left) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(false);
                  };
                  if (v2 instanceof Data_Either.Right) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Ord.greaterThanOrEq(Data_Version_Haskell.ordVersion)(v2.value0)(minimumPsaVersion));
                  };
                  throw new Error("Failed pattern match at Pulp.Build (line 109, column 7 - line 113, column 40): " + [ v2.constructor.name ]);
              });
          });
      });
  };
  var eqBuildType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof NormalBuild && y instanceof NormalBuild) {
              return true;
          };
          if (x instanceof TestBuild && y instanceof TestBuild) {
              return true;
          };
          if (x instanceof RunBuild && y instanceof RunBuild) {
              return true;
          };
          return false;
      };
  });
  var bundle = function (args) {
      var parseModulesOption = Data_Maybe.maybe([  ])(Data_String_Common.split(","));
      var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Bundling JavaScript..."))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("skipEntryPoint")(opts))(function (v1) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(parseModulesOption)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("modules")(opts)))(function (v2) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("buildPath")(opts))(function (v3) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("main")(opts))(function (v4) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("sourceMaps")(args.commandOpts))(function (v5) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("to")(opts))(function (v6) {
                                      var bundleArgs = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)([ [ "--module=" + v4 ], (function () {
                                          if (v1) {
                                              return [  ];
                                          };
                                          return [ "--main=" + v4 ];
                                      })(), Data_Functor.map(Data_Functor.functorArray)(function (m) {
                                          return "--module=" + m;
                                      })(v2), (function () {
                                          if (v5) {
                                              return [ "--source-maps" ];
                                          };
                                          return [  ];
                                      })(), Data_Maybe.maybe([  ])(function (f) {
                                          return [ "-o", f ];
                                      })(v6), args.remainder ]);
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Exec.pursBundle(Pulp_Files.outputModules(v3))(bundleArgs)(Data_Maybe.Nothing.value))(function (v7) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                                              if (v6 instanceof Data_Maybe.Just && v5) {
                                                  return Pulp_Sorcery.sorcery(v6.value0);
                                              };
                                              if (v6 instanceof Data_Maybe.Just) {
                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                              };
                                              return withOutputStream(opts)(function (out$prime) {
                                                  return Pulp_System_Stream.write(out$prime)(v7);
                                              });
                                          })())(function () {
                                              return v.log("Bundled.");
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var go = function (buildType) {
      return function (args) {
          var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.cwd))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Building project in " + v1))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Apply.apply(Effect_Aff.applyAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Set.union(Data_Ord.ordString))(Pulp_Files.defaultGlobs(opts)))((function () {
                          var $70 = Data_Eq.eq(eqBuildType)(buildType)(TestBuild.value);
                          if ($70) {
                              return Pulp_Files.testGlobs(opts);
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Set.empty);
                      })()))(function (v2) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("buildPath")(args.commandOpts))(function (v3) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("noPsa")(args.commandOpts))(function (v4) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("sourceMaps")(args.commandOpts))(function (v5) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Validate.getPursVersion(v))(function (v6) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.intDecode)("jobs")(args.commandOpts))(function (v7) {
                                              var sourceMapArg = (function () {
                                                  if (v5 && Data_Ord.greaterThanOrEq(Data_Version_Haskell.ordVersion)(v6)(new Data_Version_Haskell.Version(Data_List.fromFoldable(Data_Foldable.foldableArray)([ 0, 12, 0 ]), Data_List_Types.Nil.value))) {
                                                      return [ "--codegen", "sourcemaps" ];
                                                  };
                                                  if (v5) {
                                                      return [ "--source-maps" ];
                                                  };
                                                  return [  ];
                                              })();
                                              var sourceGlobs = Pulp_Files.sources(v2);
                                              var jobsArgs = Data_Maybe.maybe([  ])(function (j) {
                                                  return [ "+RTS", "-N" + Data_Show.show(Data_Show.showInt)(j), "-RTS" ];
                                              })(v7);
                                              var extraArgs = (function () {
                                                  var $78 = Data_Eq.notEq(eqBuildType)(buildType)(RunBuild.value);
                                                  if ($78) {
                                                      return args.remainder;
                                                  };
                                                  return [  ];
                                              })();
                                              var binArgs = Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "-o", v3 ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(sourceMapArg)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(jobsArgs)(extraArgs)));
                                              return Control_Bind.bind(Effect_Aff.bindAff)(shouldUsePsa(args))(function (v8) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                                                      if (v8) {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("monochrome")(args.globalOpts))(function (v9) {
                                                              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("dependencyPath")(args.commandOpts))(function (v10) {
                                                                  var binArgs$prime = Data_Semigroup.append(Data_Semigroup.semigroupArray)(binArgs)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "--is-lib=" + v10 ])((function () {
                                                                      if (v9) {
                                                                          return [ "--monochrome" ];
                                                                      };
                                                                      return [  ];
                                                                  })()));
                                                                  return Pulp_Exec.psa(sourceGlobs)(binArgs$prime)(Data_Maybe.Nothing.value);
                                                              });
                                                          });
                                                      };
                                                      return Pulp_Exec.pursBuild(sourceGlobs)(binArgs)(Data_Maybe.Nothing.value);
                                                  })())(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Build successful."))(function () {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Apply.apply(Effect_Aff.applyAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraBoolean))(Pulp_Args_Get.getFlag("optimise")(opts)))(Pulp_Args_Get.hasOption("to")(opts)))(function (v9) {
                                                              return Control_Applicative.when(Effect_Aff.applicativeAff)(v9)(bundle(args));
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  };
  var runBuild = Pulp_Args.runAction(go(RunBuild.value));
  var testBuild = Pulp_Args.runAction(go(TestBuild.value));
  var action = go(NormalBuild.value);
  var build = Pulp_Args.runAction(action);
  exports["action"] = action;
  exports["build"] = build;
  exports["testBuild"] = testBuild;
  exports["runBuild"] = runBuild;
  exports["withOutputStream"] = withOutputStream;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Run"] = $PS["Pulp.Run"] || {};
  var exports = $PS["Pulp.Run"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_Path = $PS["Node.Path"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Build = $PS["Pulp.Build"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_System_Files = $PS["Pulp.System.Files"];                
  var prependPath = function (newPath) {
      return function (paths) {
          return Data_Maybe.Just.create((function () {
              if (paths instanceof Data_Maybe.Nothing) {
                  return newPath;
              };
              if (paths instanceof Data_Maybe.Just) {
                  return newPath + (Node_Path.delimiter + paths.value0);
              };
              throw new Error("Failed pattern match at Pulp.Run (line 55, column 10 - line 57, column 46): " + [ paths.constructor.name ]);
          })());
      };
  };

  // | Given a build path, create an environment that is just like this process'
  // | environment, except with NODE_PATH set up for commands like `pulp run`.
  var setupEnv = function (buildPath) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.getEnv))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([  ])(buildPath)))(function (v1) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Foreign_Object.alter(prependPath(v1))("NODE_PATH")(v));
          });
      });
  };

  // | Escape a string for insertion into a JS string literal.
  var jsEscape = function ($22) {
      return Data_String_Common.replace("'")("\\'")(Data_String_Common.replace("\\")("\\\\")($22));
  };

  // | Construct a JS string to be used as an entry point from a module name.
  var makeEntry = function (main) {
      return "require('" + (jsEscape(main) + "').main();\x0a");
  };
  var action = function (args) {
      var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Build.runBuild(args))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("main")(opts))(function (v1) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)(makeEntry(v1))(Node_Encoding.UTF8.value)))(function (v2) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Files.openTemp({
                          prefix: "pulp-run",
                          suffix: ".js"
                      }))(function (v3) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.fdAppend(v3.fd)(v2))(function (v4) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.fdClose(v3.fd))(function (v5) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("buildPath")(opts))(function (v6) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("runtime")(opts))(function (v7) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(setupEnv(v6))(function (v8) {
                                              return Pulp_Exec.exec(v7)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v3.path ])(args.remainder))(new Data_Maybe.Just(v8));
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  exports["action"] = action;
  exports["setupEnv"] = setupEnv;
  exports["prependPath"] = prependPath;
  exports["jsEscape"] = jsEscape;
  exports["makeEntry"] = makeEntry;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Browserify"] = $PS["Pulp.Browserify"] || {};
  var exports = $PS["Pulp.Browserify"];
  var $foreign = $PS["Pulp.Browserify"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Argonaut_Core = $PS["Data.Argonaut.Core"];
  var Data_Argonaut_Parser = $PS["Data.Argonaut.Parser"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_Path = $PS["Node.Path"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Args = $PS["Pulp.Args"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Build = $PS["Pulp.Build"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Files = $PS["Pulp.Files"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_Project = $PS["Pulp.Project"];
  var Pulp_Run = $PS["Pulp.Run"];
  var Pulp_Sorcery = $PS["Pulp.Sorcery"];
  var Pulp_System_FFI = $PS["Pulp.System.FFI"];
  var Pulp_System_Files = $PS["Pulp.System.Files"];                
  var updateSourceMapPaths = function (basePath) {
      return function (text) {
          var updateWithEffect = function (effect) {
              return function (key) {
                  return function (map) {
                      return function __do() {
                          var v = Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value))(effect)(Foreign_Object.lookup(key)(map))();
                          return Foreign_Object.update(Data_Function["const"](v))(key)(map);
                      };
                  };
              };
          };
          var resolveFile = Data_Argonaut_Core.caseJsonString(Control_Applicative.pure(Effect.applicativeEffect)(Data_Argonaut_Core.jsonNull))(function ($95) {
              return Data_Functor.map(Effect.functorEffect)(Data_Argonaut_Core.fromString)(Node_Path.resolve([ basePath ])($95));
          });
          var resolveFiles = Data_Argonaut_Core.caseJsonArray(Control_Applicative.pure(Effect.applicativeEffect)(Data_Maybe.Nothing.value))(function ($96) {
              return Data_Functor.map(Effect.functorEffect)(function ($97) {
                  return Data_Maybe.Just.create(Data_Argonaut_Core.fromArray($97));
              })(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect.applicativeEffect)(resolveFile)($96));
          });
          var v = Data_Argonaut_Parser.jsonParser(text);
          if (v instanceof Data_Either.Left) {
              return Control_Applicative.pure(Effect.applicativeEffect)(text);
          };
          if (v instanceof Data_Either.Right) {
              return function __do() {
                  var v1 = Data_Argonaut_Core.caseJsonObject(Control_Applicative.pure(Effect.applicativeEffect)(Data_Argonaut_Core.jsonEmptyObject))(function ($98) {
                      return Data_Functor.map(Effect.functorEffect)(Data_Argonaut_Core.fromObject)(updateWithEffect(resolveFiles)("sources")($98));
                  })(v.value0)();
                  return Data_Argonaut_Core.stringify(v1);
              };
          };
          throw new Error("Failed pattern match at Pulp.Browserify (line 228, column 3 - line 232, column 35): " + [ v.constructor.name ]);
      };
  };
  var shouldSkipEntryPoint = function (opts) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("skipEntryPoint")(opts))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("standalone")(opts))(function (v1) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v || Data_Maybe.isJust(v1));
          });
      });
  };

  // | Given the build path, modify this process' NODE_PATH environment variable
  // | for browserify.
  var setupNodePath = function (buildPath) {
      return function __do() {
          var v = Node_Process.lookupEnv("NODE_PATH")();
          var v1 = Node_Path.resolve([  ])(buildPath)();
          return Node_Process.setEnv("NODE_PATH")((function () {
              if (v instanceof Data_Maybe.Just) {
                  return v1 + (Node_Path.delimiter + v.value0);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return v1;
              };
              throw new Error("Failed pattern match at Pulp.Browserify (line 186, column 5 - line 188, column 28): " + [ v.constructor.name ]);
          })())();
      };
  };
  var makeOptExport = function (main) {
      return "module.exports = PS[\"" + (Pulp_Run.jsEscape(main) + "\"];\x0a");
  };
  var makeExport = function (main) {
      return function ($$export) {
          if ($$export) {
              return "module.exports = require(\"" + (Pulp_Run.jsEscape(main) + "\");\x0a");
          };
          return Pulp_Run.makeEntry(main);
      };
  };
  var buildForBrowserify = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("skipCompile")(args.commandOpts))(function (v) {
          return Control_Applicative.when(Effect_Aff.applicativeAff)(!v)((function () {
              var munge = function ($99) {
                  return Data_Map_Internal["delete"](Data_Ord.ordString)("optimise")(Data_Map_Internal["delete"](Data_Ord.ordString)("to")($99));
              };
              return Pulp_Build.build({
                  globalOpts: args.globalOpts,
                  commandOpts: munge(args.commandOpts),
                  commandArgs: args.commandArgs,
                  command: args.command,
                  remainder: [  ]
              });
          })());
      });
  };
  var browserifyIncBundle = function (opts) {
      return Pulp_System_FFI.runNode(Data_Function_Uncurried.runFn2($foreign["browserifyIncBundle'"])(opts));
  };
  var incremental = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Browserifying..."))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("buildPath")(opts))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(setupNodePath(v1)))(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("force")(opts))(function (v2) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Pulp_Project.decodeProject)("_project")(opts))(function (v3) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([ v3.cache ])("browserify.json")))(function (v4) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(v2)(Effect_Aff.apathize(Node_FS_Aff.unlink(v4))))(function () {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("transform")(opts))(function (v5) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("standalone")(opts))(function (v6) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("main")(opts))(function (v7) {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("sourceMaps")(opts))(function (v8) {
                                                      return Control_Bind.bind(Effect_Aff.bindAff)(shouldSkipEntryPoint(opts))(function (v9) {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                                                              if (v9) {
                                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Node_Path.concat([ v1, v7 ]));
                                                              };
                                                              var entryJs = makeExport(v7)(Data_Maybe.isJust(v6));
                                                              var entryPath = Node_Path.concat([ v1, "browserify.js" ]);
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(entryPath)(entryJs))(function () {
                                                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(entryPath);
                                                              });
                                                          })())(function (v10) {
                                                              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("to")(opts))(function (v11) {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Build.withOutputStream(opts)(function (out$prime) {
                                                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(v1))(function ($100) {
                                                                          return Node_Path.resolve([ v1 ])(Node_Path.dirname($100));
                                                                      })(v11)))(function (v12) {
                                                                          return browserifyIncBundle({
                                                                              basedir: v1,
                                                                              cacheFile: v4,
                                                                              path: v10,
                                                                              transform: Data_Nullable.toNullable(v5),
                                                                              standalone: Data_Nullable.toNullable(v6),
                                                                              out: out$prime,
                                                                              debug: v8,
                                                                              outDir: v12
                                                                          });
                                                                      });
                                                                  }))(function () {
                                                                      if (v11 instanceof Data_Maybe.Just && v8) {
                                                                          return Pulp_Sorcery.sorcery(v11.value0);
                                                                      };
                                                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var browserifyBundle = function (opts) {
      return Pulp_System_FFI.runNode(Data_Function_Uncurried.runFn2($foreign["browserifyBundle'"])(opts));
  };
  var optimising = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Files.defaultGlobs(opts))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("buildPath")(opts))(function (v2) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("main")(opts))(function (v3) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("transform")(opts))(function (v4) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("standalone")(opts))(function (v5) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("sourceMaps")(opts))(function (v6) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("to")(opts))(function (v7) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Files.openTemp({
                                          prefix: "pulp-browserify-bundle-",
                                          suffix: ".js"
                                      }))(function (v8) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(shouldSkipEntryPoint(opts))(function (v9) {
                                              var bundleArgs = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidArray)([ [ "--module=" + v3 ], (function () {
                                                  if (v9) {
                                                      return [  ];
                                                  };
                                                  return [ "--main=" + v3 ];
                                              })(), (function () {
                                                  if (v6) {
                                                      return [ "--source-maps" ];
                                                  };
                                                  return [  ];
                                              })(), [ "-o", v8.path ], args.remainder ]);
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Exec.pursBundle(Pulp_Files.outputModules(v2))(bundleArgs)(Data_Maybe.Nothing.value))(function (v10) {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(v8.path))(function (v11) {
                                                      var mapFile = v8.path + ".map";
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(v6)(Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(mapFile))(function (v12) {
                                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(updateSourceMapPaths(Node_Path.dirname(mapFile))(v12)))(function (v13) {
                                                              return Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(mapFile)(v13);
                                                          });
                                                      })))(function () {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Browserifying..."))(function () {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(setupNodePath(v2)))(function () {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Build.withOutputStream(opts)(function (out$prime) {
                                                                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Path.resolve([  ])(v2)))(function (v12) {
                                                                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Maybe.maybe(Control_Applicative.pure(Effect.applicativeEffect)(v2))(function ($101) {
                                                                              return Node_Path.resolve([ v2 ])(Node_Path.dirname($101));
                                                                          })(v7)))(function (v13) {
                                                                              return browserifyBundle({
                                                                                  basedir: v12,
                                                                                  src: v11 + (function () {
                                                                                      var $87 = Data_Maybe.isJust(v5);
                                                                                      if ($87) {
                                                                                          return makeOptExport(v3);
                                                                                      };
                                                                                      return "";
                                                                                  })(),
                                                                                  transform: Data_Nullable.toNullable(v4),
                                                                                  standalone: Data_Nullable.toNullable(v5),
                                                                                  out: out$prime,
                                                                                  debug: v6,
                                                                                  outDir: v13,
                                                                                  tmpFilePath: v8.path
                                                                              });
                                                                          });
                                                                      });
                                                                  }))(function () {
                                                                      if (v7 instanceof Data_Maybe.Just && v6) {
                                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Sorcery.sorcery(v7.value0))(function () {
                                                                              return Node_FS_Aff.unlink(mapFile);
                                                                          });
                                                                      };
                                                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  var action = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.cwd))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Browserifying project in " + v1))(function () {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("optimise")(args.commandOpts))(function (v2) {
                      var act = (function () {
                          if (v2) {
                              return optimising;
                          };
                          return incremental;
                      })();
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(buildForBrowserify(args))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Args.runAction(act)(args))(function () {
                              return v.log("Browserified.");
                          });
                      });
                  });
              });
          });
      });
  };
  exports["action"] = action;
  exports["makeExport"] = makeExport;
  exports["makeOptExport"] = makeOptExport;
  exports["buildForBrowserify"] = buildForBrowserify;
  exports["shouldSkipEntryPoint"] = shouldSkipEntryPoint;
  exports["optimising"] = optimising;
  exports["incremental"] = incremental;
  exports["setupNodePath"] = setupNodePath;
  exports["browserifyBundle"] = browserifyBundle;
  exports["browserifyIncBundle"] = browserifyIncBundle;
  exports["updateSourceMapPaths"] = updateSourceMapPaths;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Git"] = $PS["Pulp.Git"] || {};
  var exports = $PS["Pulp.Git"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Version = $PS["Data.Version"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Utils = $PS["Pulp.Utils"];                

  // | Run a command, piping stderr to /dev/null
  var run = function (cmd) {
      return function (args) {
          return Pulp_Exec.execQuietWithStderr(Node_ChildProcess.Ignore.value)(cmd)(args)(Data_Maybe.Nothing.value);
      };
  };

  // | Throw an error if the git working tree is dirty.
  var requireCleanGitWorkingTree = Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Exec.execQuiet("git")([ "status", "--porcelain" ])(Data_Maybe.Nothing.value))(function (v) {
      var $4 = Data_Foldable.all(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_String_Common["null"])(Data_String_Common.split("\x0a")(v));
      if ($4) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
      };
      return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("Your git working tree is dirty. Please commit or stash " + "your changes first.");
  });
  var dropPrefix = function (prefix) {
      return function (str) {
          return Data_Maybe.fromMaybe(str)(Data_String_CodeUnits.stripPrefix(prefix)(str));
      };
  };

  // | Given a number of lines of text, attempt to parse each line as a version,
  // | and return the maximum.
  var maxVersion = (function () {
      var parseMay = function (str) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create(str))(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Data_Version.parseVersion(dropPrefix("v")(str))));
      };
      return function ($7) {
          return Data_Foldable.maximumBy(Data_Foldable.foldableArray)(Data_Function.on(Data_Ord.compare(Data_Version.ordVersion))(Data_Tuple.snd))(Data_Array.mapMaybe(function ($8) {
              return parseMay(Data_String_Common.trim($8));
          })(Data_String_Common.split("\x0a")($7)));
      };
  })();

  // | Get the latest semver version tag in the repository. The tag must start
  // | with a "v" and be followed by a valid semver version, for example
  // | "v1.2.3".
  // |
  // | Returns Nothing if there are no such tags in the repository.
  var getLatestTaggedVersion = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(run("git")([ "describe", "--tags", "--abbrev=0", "HEAD" ])))(function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(maxVersion)(v));
  });

  // | Get the version tag pointing to the currently checked out commit, if any.
  // | The tag must start with a "v" and be followed by a valid semver version,
  // | for example "v1.2.3".
  // |
  // | If multiple tags point to the checked out commit, return the latest
  // | version according to semver version comparison.
  var getVersionFromGitTag = Control_Bind.bind(Effect_Aff.bindAff)(run("git")([ "tag", "--points-at", "HEAD" ]))(function (v) {
      return Control_Applicative.pure(Effect_Aff.applicativeAff)(maxVersion(v));
  });
  exports["requireCleanGitWorkingTree"] = requireCleanGitWorkingTree;
  exports["getVersionFromGitTag"] = getVersionFromGitTag;
  exports["getLatestTaggedVersion"] = getLatestTaggedVersion;
  exports["dropPrefix"] = dropPrefix;
})(PS);
(function(exports) {
  "use strict";
  var http =require("http");
  var https =require("https"); 

  exports.requestImpl = function (opts) {
    return function (k) {
      return function () {
        var lib = opts.protocol === "https:" ? https : http;
        return lib.request(opts, function (res) {
          k(res)();
        });
      };
    };
  };
})(PS["Node.HTTP.Client"] = PS["Node.HTTP.Client"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines low-level bindings to the Node HTTP client.
  "use strict";
  $PS["Node.HTTP.Client"] = $PS["Node.HTTP.Client"] || {};
  var exports = $PS["Node.HTTP.Client"];
  var $foreign = $PS["Node.HTTP.Client"];
  var Data_Options = $PS["Data.Options"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];

  // | Get the response status message
  var statusMessage = function ($6) {
      return $6.statusMessage;
  };

  // | Get the response status code
  var statusCode = function ($7) {
      return $7.statusCode;
  };

  // | Create a readable stream from a response object.
  var responseAsStream = Unsafe_Coerce.unsafeCoerce;

  // | Create a writable stream from a request object.
  var requestAsStream = Unsafe_Coerce.unsafeCoerce;

  // | Make a HTTP request using the specified options and response callback.
  var request = function ($9) {
      return $foreign.requestImpl(Data_Options.options($9));
  };                                                              

  // | The protocol to use
  var protocol = Data_Options.opt("protocol");

  // | The request path, including query string if appropriate.
  var path = Data_Options.opt("path");

  // | The HTTP request method: GET, POST, etc.
  var method = Data_Options.opt("method");

  // | Domain name or IP
  var hostname = Data_Options.opt("hostname");
  var headers = Data_Options.opt("headers");
  exports["protocol"] = protocol;
  exports["hostname"] = hostname;
  exports["method"] = method;
  exports["path"] = path;
  exports["headers"] = headers;
  exports["request"] = request;
  exports["requestAsStream"] = requestAsStream;
  exports["responseAsStream"] = responseAsStream;
  exports["statusCode"] = statusCode;
  exports["statusMessage"] = statusMessage;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.System.HTTP"] = $PS["Pulp.System.HTTP"] || {};
  var exports = $PS["Pulp.System.HTTP"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Node_HTTP_Client = $PS["Node.HTTP.Client"];
  var Node_Stream = $PS["Node.Stream"];                
  var httpRequest = function (reqOptions) {
      return function (reqBody) {
          var maybeWrite = function (v) {
              return function (v1) {
                  return function (next) {
                      if (v1 instanceof Data_Maybe.Just) {
                          return Data_Functor["void"](Effect.functorEffect)(Node_Stream.write(v)(v1.value0)(next));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return next;
                      };
                      throw new Error("Failed pattern match at Pulp.System.HTTP (line 24, column 3 - line 24, column 76): " + [ v.constructor.name, v1.constructor.name, next.constructor.name ]);
                  };
              };
          };
          return Effect_Aff.makeAff(function (cb) {
              return function __do() {
                  var v = Node_HTTP_Client.request(reqOptions)(function ($8) {
                      return cb(Data_Either.Right.create($8));
                  })();
                  var reqStream = Node_HTTP_Client.requestAsStream(v);
                  Node_Stream.onError(reqStream)(function ($9) {
                      return cb(Data_Either.Left.create($9));
                  })();
                  maybeWrite(reqStream)(reqBody)(Node_Stream.end(reqStream)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit)))();
                  return Data_Monoid.mempty(Effect_Aff.monoidCanceler);
              };
          });
      };
  };
  exports["httpRequest"] = httpRequest;
})(PS);
(function(exports) {
  // module Pulp.System.Read

  "use strict";

  exports["read'"] = require("read");
})(PS["Pulp.System.Read"] = PS["Pulp.System.Read"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.System.Read"] = $PS["Pulp.System.Read"] || {};
  var exports = $PS["Pulp.System.Read"];
  var $foreign = $PS["Pulp.System.Read"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Pulp_System_FFI = $PS["Pulp.System.FFI"];                
  var read = function (opts) {
      return Pulp_System_FFI.runNode(Data_Function_Uncurried.runFn2($foreign["read'"])(opts));
  };
  exports["read"] = read;
})(PS);
(function(exports) {
  "use strict";

  exports.__dirname = __dirname;
  exports.__filename = __filename;
})(PS["Node.Globals"] = PS["Node.Globals"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | Global objects exposed by Node.js. See also the [Node.js API
  // | documentation](https://nodejs.org/api/globals.html).
  "use strict";
  $PS["Node.Globals"] = $PS["Node.Globals"] || {};
  var exports = $PS["Node.Globals"];
  var $foreign = $PS["Node.Globals"];
  exports["__dirname"] = $foreign["__dirname"];
  exports["__filename"] = $foreign["__filename"];
})(PS);
(function(exports) {
  // module Pulp.System.Which

  "use strict";

  exports["which'"] = require("which");
})(PS["Pulp.System.Which"] = PS["Pulp.System.Which"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.System.Which"] = $PS["Pulp.System.Which"] || {};
  var exports = $PS["Pulp.System.Which"];
  var $foreign = $PS["Pulp.System.Which"];
  var Data_Function_Uncurried = $PS["Data.Function.Uncurried"];
  var Pulp_System_FFI = $PS["Pulp.System.FFI"];                
  var which = function (cmd) {
      return Pulp_System_FFI.runNode(Data_Function_Uncurried.runFn2($foreign["which'"])(cmd));
  };
  exports["which"] = which;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Version"] = $PS["Pulp.Version"] || {};
  var exports = $PS["Pulp.Version"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Version = $PS["Data.Version"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Exception_Unsafe = $PS["Effect.Exception.Unsafe"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_JSON = $PS["Foreign.JSON"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Node_Globals = $PS["Node.Globals"];
  var Node_Path = $PS["Node.Path"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_System_Which = $PS["Pulp.System.Which"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var versionString = Effect_Unsafe.unsafePerformEffect(function __do() {
      var v = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(Node_Path.concat([ Node_Globals["__dirname"], "package.json" ]))();
      var v1 = Control_Monad_Except.runExcept(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_JSON.parseJSON(v))(Foreign_Index.readProp("version")))(Foreign.readString));
      if (v1 instanceof Data_Either.Left) {
          return Effect_Exception.throwException(Effect_Exception.error("pulp: Unable to parse package.json: " + Data_Show.show(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(v1.value0)))();
      };
      if (v1 instanceof Data_Either.Right) {
          return v1.value0;
      };
      throw new Error("Failed pattern match at Pulp.Version (line 38, column 5 - line 42, column 15): " + [ v1.constructor.name ]);
  });
  var version = (function () {
      var v = Data_Version.parseVersion(versionString);
      if (v instanceof Data_Either.Right) {
          return v.value0;
      };
      if (v instanceof Data_Either.Left) {
          return Effect_Exception_Unsafe.unsafeThrow("pulp: Unable to parse version from package.json: " + Data_Show.show(Text_Parsing_Parser.showParseError)(v.value0));
      };
      throw new Error("Failed pattern match at Pulp.Version (line 29, column 3 - line 32, column 42): " + [ v.constructor.name ]);
  })();
  var printVersion = Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Exec.execQuiet("purs")([ "--version" ])(Data_Maybe.Nothing.value))(function (v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Pulp_System_Which.which("purs")))(function (v1) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Console.log("Pulp version " + (Data_Version.showVersion(version) + ("\x0apurs version " + (Data_String_Common.trim(v) + Data_Either.either(Data_Function["const"](""))(function (p) {
              return " using " + Data_String_Common.trim(p);
          })(v1))))));
      });
  });
  exports["version"] = version;
  exports["versionString"] = versionString;
  exports["printVersion"] = printVersion;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Login"] = $PS["Pulp.Login"] || {};
  var exports = $PS["Pulp.Login"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Options = $PS["Data.Options"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Semiring = $PS["Data.Semiring"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_JSON = $PS["Foreign.JSON"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_FS_Perms = $PS["Node.FS.Perms"];
  var Node_HTTP_Client = $PS["Node.HTTP.Client"];
  var Node_Path = $PS["Node.Path"];
  var Node_Platform = $PS["Node.Platform"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_System_Files = $PS["Pulp.System.Files"];
  var Pulp_System_HTTP = $PS["Pulp.System.HTTP"];
  var Pulp_System_Read = $PS["Pulp.System.Read"];
  var Pulp_System_Stream = $PS["Pulp.System.Stream"];
  var Pulp_Version = $PS["Pulp.Version"];                
  var obtainTokenFromStdin = function (out) {
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("Please obtain a GitHub personal access token at:\x0a"))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("  https://github.com/settings/tokens/new\x0a"))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("No scopes are required, so don't check any of the boxes.\x0a"))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("\x0a"))(function () {
                      return Data_Functor.map(Effect_Aff.functorAff)(Data_String_Common.trim)(Pulp_System_Read.read({
                          prompt: "After you've done that, paste it in here: ",
                          silent: true
                      }));
                  });
              });
          });
      });
  };
  var getHome = (function () {
      var homeVar = (function () {
          var $7 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
          if ($7) {
              return "USERPROFILE";
          };
          return "HOME";
      })();
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.lookupEnv(homeVar)))(function (v) {
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value0);
          };
          if (v instanceof Data_Maybe.Nothing) {
              return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("The " + (homeVar + " environment variable is not set.")));
          };
          throw new Error("Failed pattern match at Pulp.Login (line 116, column 3 - line 121, column 66): " + [ v.constructor.name ]);
      });
  })();
  var tokenFilePath = Control_Apply.apply(Effect_Aff.applyAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Semigroup.append(Data_Semigroup.semigroupString))(getHome))(Control_Applicative.pure(Effect_Aff.applicativeAff)("/.pulp/github-oauth-token"));
  var writeTokenFile = function (token) {
      return Control_Bind.bind(Effect_Aff.bindAff)(tokenFilePath)(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_System_Files.mkdirIfNotExist(Node_Path.dirname(v)))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(v)(token))(function () {
                  return Node_FS_Aff.chmod(v)(Node_FS_Perms.mkPerms(Data_Semiring.add(Node_FS_Perms.semiringPerm)(Node_FS_Perms.read)(Node_FS_Perms.write))(Node_FS_Perms.none)(Node_FS_Perms.none));
              });
          });
      });
  };
  var checkToken = function (out) {
      return function (token) {
          var reqOptions = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Options.monoidOptions)([ Data_Options.assoc(Node_HTTP_Client.protocol)("https:"), Data_Options.assoc(Node_HTTP_Client.hostname)("api.github.com"), Data_Options.assoc(Node_HTTP_Client.path)("/user"), Data_Options.assoc(Node_HTTP_Client.headers)(Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("Accept", "application/vnd.github.v3+json"), new Data_Tuple.Tuple("Authorization", "token " + token), new Data_Tuple.Tuple("User-Agent", "Pulp-" + Pulp_Version.versionString) ])) ]);
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_HTTP.httpRequest(reqOptions)(Data_Maybe.Nothing.value))(function (v) {
              var statusCode = Node_HTTP_Client.statusCode(v);
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Stream.concatStream(Node_HTTP_Client.responseAsStream(v)))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.unless(Effect_Aff.applicativeAff)(statusCode === 200)(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error((function () {
                      if (statusCode === 401) {
                          return "Your token was not accepted (401 Unauthorized).";
                      };
                      var header = "Something went wrong (HTTP " + (Data_Show.show(Data_Show.showInt)(statusCode) + (" " + (Node_HTTP_Client.statusMessage(v) + ").")));
                      return header + ("\x0a" + v1);
                  })()))))(function () {
                      var v2 = Control_Monad_Except.runExcept(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_JSON.parseJSON(v1))(Foreign_Index.readProp("login")))(Foreign.readString));
                      if (v2 instanceof Data_Either.Right) {
                          return out.write("Successfully authenticated as " + (v2.value0 + ".\x0a"));
                      };
                      if (v2 instanceof Data_Either.Left) {
                          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Unexpected response from GitHub API: " + Data_Show.show(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(v2.value0)));
                      };
                      throw new Error("Failed pattern match at Pulp.Login (line 83, column 3 - line 87, column 79): " + [ v2.constructor.name ]);
                  });
              });
          });
      };
  };

  // TODO: Obtain tokens automatically after prompting for a username and
  // password.
  //
  // Unfortunately it is not easy to do this without exposing the client secret,
  // so I think we need to add a route to Pursuit itself to support this, so that
  // Pursuit sort of proxies to GitHub and adds its client secret itself.
  var action = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(obtainTokenFromStdin(v))(function (v1) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(checkToken(v)(v1))(function () {
                  return writeTokenFile(v1);
              });
          });
      });
  };
  exports["action"] = action;
  exports["tokenFilePath"] = tokenFilePath;
})(PS);
(function(exports) {
  exports._parseJSON = JSON.parse;

  exports._undefined = undefined;
})(PS["Simple.JSON"] = PS["Simple.JSON"] || {});
(function(exports) {
  "use strict";

  exports.unsafeGet = function (label) {
    return function (rec) {
      return rec[label];
    };
  };
})(PS["Record.Unsafe"] = PS["Record.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | The functions in this module are highly unsafe as they treat records like
  // | stringly-keyed maps and can coerce the row of labels that a record has.
  // |
  // | These function are intended for situations where there is some other way of
  // | proving things about the structure of the record - for example, when using
  // | `RowToList`. **They should never be used for general record manipulation.**
  "use strict";
  $PS["Record.Unsafe"] = $PS["Record.Unsafe"] || {};
  var exports = $PS["Record.Unsafe"];
  var $foreign = $PS["Record.Unsafe"];
  exports["unsafeGet"] = $foreign.unsafeGet;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Record"] = $PS["Record"] || {};
  var exports = $PS["Record"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Record_Unsafe = $PS["Record.Unsafe"];

  // | Get a property for a label which is specified using a value-level proxy for
  // | a type-level string.
  // |
  // | For example:
  // |
  // | ```purescript
  // | get (SProxy :: SProxy "x") :: forall r a. { x :: a | r } -> a
  // | ```
  var get = function (dictIsSymbol) {
      return function (dictCons) {
          return function (l) {
              return function (r) {
                  return Record_Unsafe.unsafeGet(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(r);
              };
          };
      };
  };
  exports["get"] = get;
})(PS);
(function(exports) {
  "use strict";

  exports.copyRecord = function(rec) {
    var copy = {};
    for (var key in rec) {
      if ({}.hasOwnProperty.call(rec, key)) {
        copy[key] = rec[key];
      }
    }
    return copy;
  };

  exports.unsafeInsert = function(l) {
    return function(a) {
      return function(rec) {
        rec[l] = a;
        return rec;
      };
    };
  };
})(PS["Record.Builder"] = PS["Record.Builder"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Record.Builder"] = $PS["Record.Builder"] || {};
  var exports = $PS["Record.Builder"];
  var $foreign = $PS["Record.Builder"];
  var Control_Category = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Symbol = $PS["Data.Symbol"];
  var semigroupoidBuilder = Control_Semigroupoid.semigroupoidFn;

  // | Build by inserting a new field.
  var insert = function (dictCons) {
      return function (dictLacks) {
          return function (dictIsSymbol) {
              return function (l) {
                  return function (a) {
                      return function (r1) {
                          return $foreign.unsafeInsert(Data_Symbol.reflectSymbol(dictIsSymbol)(l))(a)(r1);
                      };
                  };
              };
          };
      };
  };
  var categoryBuilder = Control_Category.categoryFn;

  // | Build a record, starting from some other record.
  var build = function (v) {
      return function (r1) {
          return v($foreign.copyRecord(r1));
      };
  };
  exports["build"] = build;
  exports["insert"] = insert;
  exports["semigroupoidBuilder"] = semigroupoidBuilder;
  exports["categoryBuilder"] = categoryBuilder;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Type.Data.RowList"] = $PS["Type.Data.RowList"] || {};
  var exports = $PS["Type.Data.RowList"];

  // | A proxy data type whose type parameter is a type of kind `RowList`.
  // |
  // | Commonly used for specialising a function with a quantified type.
  var RLProxy = (function () {
      function RLProxy() {

      };
      RLProxy.value = new RLProxy();
      return RLProxy;
  })();
  exports["RLProxy"] = RLProxy;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Simple.JSON"] = $PS["Simple.JSON"] || {};
  var exports = $PS["Simple.JSON"];
  var $foreign = $PS["Simple.JSON"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];
  var Data_Bifunctor = $PS["Data.Bifunctor"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Foreign = $PS["Foreign"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Global_Unsafe = $PS["Global.Unsafe"];
  var Record = $PS["Record"];
  var Record_Builder = $PS["Record.Builder"];
  var Type_Data_RowList = $PS["Type.Data.RowList"];
  var WriteForeignFields = function (writeImplFields) {
      this.writeImplFields = writeImplFields;
  };

  // -- | A class for writing a value into JSON
  // -- | need to do this intelligently using Foreign probably, because of null and undefined whatever
  var WriteForeign = function (writeImpl) {
      this.writeImpl = writeImpl;
  };

  // | A class for reading foreign values from properties
  var ReadForeignFields = function (getFields) {
      this.getFields = getFields;
  };

  // | A class for reading foreign values to a type
  var ReadForeign = function (readImpl) {
      this.readImpl = readImpl;
  };
  var writeImplFields = function (dict) {
      return dict.writeImplFields;
  };
  var writeImpl = function (dict) {
      return dict.writeImpl;
  };

  // | Write a JSON string from a type `a`.
  var writeJSON = function (dictWriteForeign) {
      return function ($89) {
          return Global_Unsafe.unsafeStringify(writeImpl(dictWriteForeign)($89));
      };
  };
  var writeForeignString = new WriteForeign(Foreign.unsafeToForeign);
  var writeForeignObject = function (dictWriteForeign) {
      return new WriteForeign(function ($90) {
          return Foreign.unsafeToForeign(Foreign_Object.mapWithKey(Data_Function["const"](writeImpl(dictWriteForeign)))($90));
      });
  };
  var $$undefined = $foreign["_undefined"];
  var writeForeignMaybe = function (dictWriteForeign) {
      return new WriteForeign(Data_Maybe.maybe($$undefined)(writeImpl(dictWriteForeign)));
  };
  var recordWriteForeign = function (dictRowToList) {
      return function (dictWriteForeignFields) {
          return new WriteForeign(function (rec) {
              var steps = writeImplFields(dictWriteForeignFields)(Type_Data_RowList.RLProxy.value)(rec);
              return Foreign.unsafeToForeign(Record_Builder.build(steps)({}));
          });
      };
  };
  var readString = new ReadForeign(Foreign.readString);
  var readImpl = function (dict) {
      return dict.readImpl;
  };
  var readMaybe = function (dictReadForeign) {
      return new ReadForeign((function () {
          var readNullOrUndefined = function (v) {
              return function (value) {
                  if (Foreign.isNull(value) || Foreign.isUndefined(value)) {
                      return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Data_Maybe.Nothing.value);
                  };
                  return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Maybe.Just.create)(v(value));
              };
          };
          return readNullOrUndefined(readImpl(dictReadForeign));
      })());
  };
  var readObject = function (dictReadForeign) {
      return new ReadForeign((function () {
          var readObject$prime = function (value) {
              if (Foreign.tagOf(value) === "Object") {
                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign.unsafeFromForeign(value));
              };
              if (Data_Boolean.otherwise) {
                  return Foreign.fail(new Foreign.TypeMismatch("Object", Foreign.tagOf(value)));
              };
              throw new Error("Failed pattern match at Simple.JSON (line 190, column 7 - line 190, column 51): " + [ value.constructor.name ]);
          };
          return Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(function ($92) {
              return Data_Traversable.sequence(Foreign_Object.traversableObject)(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Foreign_Object.mapWithKey(Data_Function["const"](readImpl(dictReadForeign)))($92));
          })(readObject$prime);
      })());
  };                                                                                                                                      
  var readFieldsNil = new ReadForeignFields(function (v) {
      return function (v1) {
          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Control_Category.identity(Record_Builder.categoryBuilder));
      };
  });
  var parseJSON = (function () {
    
      // Nate Faubion: "It uses unsafePerformEffect because that’s the only way to catch exceptions and still use the builtin json decoder"
  var runPure = Effect_Unsafe.unsafePerformEffect;
      return function ($96) {
          return Control_Monad_Except_Trans.ExceptT(Data_Identity.Identity(Data_Bifunctor.lmap(Data_Either.bifunctorEither)(function ($97) {
              return Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Foreign.ForeignError.create(Effect_Exception.message($97)));
          })(runPure(Effect_Exception["try"](function () {
              return $foreign["_parseJSON"]($96);
          })))));
      };
  })();

  // | Read a JSON string to a type `a` while returning a `MultipleErrors` if the
  // | parsing failed.
  var readJSON = function (dictReadForeign) {
      return function ($98) {
          return Control_Monad_Except.runExcept(Control_Bind.composeKleisliFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(parseJSON)($98));
      };
  }; 
  var nilWriteForeignFields = new WriteForeignFields(function (v) {
      return function (v1) {
          return Control_Category.identity(Record_Builder.categoryBuilder);
      };
  });
  var getFields = function (dict) {
      return dict.getFields;
  };
  var readRecord = function (dictRowToList) {
      return function (dictReadForeignFields) {
          return new ReadForeign(function (o) {
              return Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Data_Function.flip(Record_Builder.build)({}))(getFields(dictReadForeignFields)(Type_Data_RowList.RLProxy.value)(o));
          });
      };
  };
  var consWriteForeignFields = function (dictIsSymbol) {
      return function (dictWriteForeign) {
          return function (dictWriteForeignFields) {
              return function (dictCons) {
                  return function (dictLacks) {
                      return function (dictCons1) {
                          return new WriteForeignFields(function (v) {
                              return function (rec) {
                                  var rest = writeImplFields(dictWriteForeignFields)(Type_Data_RowList.RLProxy.value)(rec);
                                  var value = writeImpl(dictWriteForeign)(Record.get(dictIsSymbol)(dictCons)(Data_Symbol.SProxy.value)(rec));
                                  var result = Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder)(Record_Builder.insert(dictCons1)(dictLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(value))(rest);
                                  return result;
                              };
                          });
                      };
                  };
              };
          };
      };
  };
  var applyEither = function (dictSemigroup) {
      return function (v) {
          return function (v1) {
              if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Right) {
                  return new Data_Either.Left(v.value0);
              };
              if (v instanceof Data_Either.Left && v1 instanceof Data_Either.Left) {
                  return new Data_Either.Left(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Left) {
                  return new Data_Either.Left(v1.value0);
              };
              if (v instanceof Data_Either.Right && v1 instanceof Data_Either.Right) {
                  return new Data_Either.Right(v.value0(v1.value0));
              };
              throw new Error("Failed pattern match at Simple.JSON (line 234, column 1 - line 234, column 90): " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var exceptTApply = function (dictSemigroup) {
      return function (dictApplicative) {
          return function (fun) {
              return function (a) {
                  return Control_Monad_Except_Trans.ExceptT(Control_Apply.apply(dictApplicative.Apply0())(Data_Functor.map((dictApplicative.Apply0()).Functor0())(applyEither(dictSemigroup))(Control_Monad_Except_Trans.runExceptT(fun)))(Control_Monad_Except_Trans.runExceptT(a)));
              };
          };
      };
  };
  var readFieldsCons = function (dictIsSymbol) {
      return function (dictReadForeign) {
          return function (dictReadForeignFields) {
              return function (dictLacks) {
                  return function (dictCons) {
                      return new ReadForeignFields(function (v) {
                          return function (obj) {
                              var rest = getFields(dictReadForeignFields)(Type_Data_RowList.RLProxy.value)(obj);
                              var name = Data_Symbol.reflectSymbol(dictIsSymbol)(Data_Symbol.SProxy.value);
                              var withExcept$prime = Control_Monad_Except.withExcept(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.ErrorAtProperty.create(name)));
                              var first = Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(withExcept$prime(Control_Bind.bindFlipped(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(readImpl(dictReadForeign))(Foreign_Index.readProp(name)(obj))))(function (v1) {
                                  return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(Data_Identity.monadIdentity))(Record_Builder.insert(dictCons)(dictLacks)(dictIsSymbol)(Data_Symbol.SProxy.value)(v1));
                              });
                              return exceptTApply(Data_List_Types.semigroupNonEmptyList)(Data_Identity.applicativeIdentity)(Data_Functor.map(Control_Monad_Except_Trans.functorExceptT(Data_Identity.functorIdentity))(Control_Semigroupoid.compose(Record_Builder.semigroupoidBuilder))(first))(rest);
                          };
                      });
                  };
              };
          };
      };
  };
  exports["readJSON"] = readJSON;
  exports["writeJSON"] = writeJSON;
  exports["parseJSON"] = parseJSON;
  exports["ReadForeign"] = ReadForeign;
  exports["readImpl"] = readImpl;
  exports["ReadForeignFields"] = ReadForeignFields;
  exports["getFields"] = getFields;
  exports["WriteForeign"] = WriteForeign;
  exports["writeImpl"] = writeImpl;
  exports["WriteForeignFields"] = WriteForeignFields;
  exports["writeImplFields"] = writeImplFields;
  exports["readString"] = readString;
  exports["readMaybe"] = readMaybe;
  exports["readObject"] = readObject;
  exports["readRecord"] = readRecord;
  exports["readFieldsCons"] = readFieldsCons;
  exports["readFieldsNil"] = readFieldsNil;
  exports["writeForeignString"] = writeForeignString;
  exports["writeForeignMaybe"] = writeForeignMaybe;
  exports["writeForeignObject"] = writeForeignObject;
  exports["recordWriteForeign"] = recordWriteForeign;
  exports["consWriteForeignFields"] = consWriteForeignFields;
  exports["nilWriteForeignFields"] = nilWriteForeignFields;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Publish"] = $PS["Pulp.Publish"] || {};
  var exports = $PS["Pulp.Publish"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_MonadZero = $PS["Control.MonadZero"];
  var Control_Parallel = $PS["Control.Parallel"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_HeytingAlgebra = $PS["Data.HeytingAlgebra"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Options = $PS["Data.Options"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Version = $PS["Data.Version"];
  var Data_Version_Haskell = $PS["Data.Version.Haskell"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_HTTP_Client = $PS["Node.HTTP.Client"];
  var Node_Path = $PS["Node.Path"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Git = $PS["Pulp.Git"];
  var Pulp_Login = $PS["Pulp.Login"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_System_Files = $PS["Pulp.System.Files"];
  var Pulp_System_HTTP = $PS["Pulp.System.HTTP"];
  var Pulp_System_Read = $PS["Pulp.System.Read"];
  var Pulp_System_Stream = $PS["Pulp.System.Stream"];
  var Pulp_Utils = $PS["Pulp.Utils"];
  var Pulp_Validate = $PS["Pulp.Validate"];
  var Simple_JSON = $PS["Simple.JSON"];                
  var writeResolutionsFile = function (resolutionsContents) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Files.openTemp({
          prefix: "pulp-publish",
          suffix: ".json"
      }))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.bindFlipped(Effect_Aff.bindAff)(Node_FS_Aff.fdAppend(v.fd))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)(resolutionsContents)(Node_Encoding.UTF8.value))))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.fdClose(v.fd))(function (v2) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.path);
              });
          });
      });
  };
  var uploadPursuitDocs = function (out) {
      return function (authToken) {
          return function (gzippedJson) {
              var headers = Foreign_Object.fromFoldable(Data_Foldable.foldableArray)([ new Data_Tuple.Tuple("Accept", "application/json"), new Data_Tuple.Tuple("Authorization", "token " + authToken), new Data_Tuple.Tuple("Content-Encoding", "gzip") ]);
              var reqOptions = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Options.monoidOptions)([ Data_Options.assoc(Node_HTTP_Client.method)("POST"), Data_Options.assoc(Node_HTTP_Client.protocol)("https:"), Data_Options.assoc(Node_HTTP_Client.hostname)("pursuit.purescript.org"), Data_Options.assoc(Node_HTTP_Client.path)("/packages"), Data_Options.assoc(Node_HTTP_Client.headers)(headers) ]);
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_HTTP.httpRequest(reqOptions)(new Data_Maybe.Just(gzippedJson)))(function (v) {
                  var v1 = Node_HTTP_Client.statusCode(v);
                  if (v1 === 201) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                  };
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bindFlipped(Effect_Aff.bindAff)(out.err)(Pulp_System_Stream.concatStream(Node_HTTP_Client.responseAsStream(v))))(function () {
                      return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("Expected an HTTP 201 response from Pursuit, got: " + Data_Show.show(Data_Show.showInt)(v1));
                  });
              });
          };
      };
  };
  var serializeResolutions = function (rs) {
      var toKeyValuePair = function (v) {
          return new Data_Tuple.Tuple(v.packageName, {
              version: v.version,
              path: v.path
          });
      };
      var obj = Foreign_Object.fromFoldable(Data_Foldable.foldableArray)(Data_Functor.map(Data_Functor.functorArray)(toKeyValuePair)(rs));
      return Simple_JSON.writeJSON(Simple_JSON.writeForeignObject(Simple_JSON.recordWriteForeign()(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "path";
      }))(Simple_JSON.writeForeignString)(Simple_JSON.consWriteForeignFields(new Data_Symbol.IsSymbol(function () {
          return "version";
      }))(Simple_JSON.writeForeignMaybe(Simple_JSON.writeForeignString))(Simple_JSON.nilWriteForeignFields)()()())()()())))(obj);
  };
  var readTokenFile = Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Login.tokenFilePath)(function (v) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(v)))(function (v1) {
          if (v1 instanceof Data_Either.Right) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(v1.value0);
          };
          if (v1 instanceof Data_Either.Left && Pulp_System_Files.isENOENT(v1.value0)) {
              return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("Pursuit authentication token not found. Try running `pulp login` first.");
          };
          if (v1 instanceof Data_Either.Left) {
              return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(v1.value0);
          };
          throw new Error("Failed pattern match at Pulp.Publish (line 302, column 3 - line 308, column 21): " + [ v1.constructor.name ]);
      });
  });
  var pursuitUrl = function (name) {
      return function (vers) {
          return "https://pursuit.purescript.org/packages/" + (name + ("/" + Data_Version.showVersion(vers)));
      };
  };
  var pursPublish = function (resolutionsPath) {
      return Pulp_Exec.execQuiet("purs")([ "publish", "--manifest", "bower.json", "--resolutions", resolutionsPath ])(Data_Maybe.Nothing.value);
  };

  // | Parse some JSON, or throw an error.
  var parseJsonText = function (dictReadForeign) {
      return function (source) {
          return function (json) {
              var v = Simple_JSON.readJSON(dictReadForeign)(json);
              if (v instanceof Data_Either.Left) {
                  return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("Error while decoding " + (source + (":\x0a" + Data_String_Common.joinWith("; ")(Data_Array.fromFoldable(Data_List_Types.foldableNonEmptyList)(Data_Functor.map(Data_List_Types.functorNonEmptyList)(Foreign.renderForeignError)(v.value0))))));
              };
              if (v instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(v.value0);
              };
              throw new Error("Failed pattern match at Pulp.Publish (line 349, column 3 - line 354, column 12): " + [ v.constructor.name ]);
          };
      };
  };

  // | Read a file containing JSON text and parse it, or throw an error.
  var parseJsonFile = function (dictReadForeign) {
      return function (filePath) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readTextFile(Node_Encoding.UTF8.value)(filePath))(function (v) {
              return parseJsonText(dictReadForeign)("file " + filePath)(v);
          });
      };
  };

  // | Like normal string equality, except also allow cases where one is the same
  // | as the other except for a trailing ".git".
  var packageUrlIsEqual = function (a) {
      return function (b) {
          return Data_Foldable.or(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)([ a === b, a + ".git" === b, a === b + ".git" ]);
      };
  };
  var gzip = function (str) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Pulp_System_Stream.createGzip))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_System_Stream.write(v)(str))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_System_Stream.end(v))(function () {
                  return Pulp_System_Stream.concatStreamToBuffer(v);
              });
          });
      });
  };
  var getResolutionsLegacy = Pulp_Exec.execQuiet("bower")([ "list", "--json", "--offline" ])(Data_Maybe.Nothing.value);

  // Obtain resolutions information for a Bower project. If a dependency has been
  // installed in a non-standard way, e.g. via a particular branch or commit
  // rather than a published version, the `version` field for that package in the
  // result will be Nothing.
  var getResolutionsBower = function (dependencyPath) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.readdir(dependencyPath))(function (v) {
          return Data_Function.flip(Control_Parallel.parTraverse(Effect_Aff.parallelAff)(Data_Traversable.traversableArray))(v)(function (dir) {
              return Control_Bind.bind(Effect_Aff.bindAff)(parseJsonFile(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "_resolution";
              }))(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "type";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsNil)()()))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "name";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "version";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsNil)()())()())()()))(Node_Path.concat([ dependencyPath, dir, ".bower.json" ])))(function (v1) {
                  var version = Control_Apply.applySecond(Data_Maybe.applyMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(v1["_resolution"].type === "version"))(new Data_Maybe.Just(v1.version));
                  var path = dependencyPath + (Node_Path.sep + dir);
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                      packageName: v1.name,
                      version: version,
                      path: path
                  });
              });
          });
      });
  };

  // Obtain resolutions information for a Bower project as a string containing
  // JSON, using the new format.
  var getResolutions = function (hasDeps) {
      return function (dependencyPath) {
          return Data_Functor.map(Effect_Aff.functorAff)(serializeResolutions)((function () {
              if (hasDeps) {
                  return getResolutionsBower(dependencyPath);
              };
              return Control_Applicative.pure(Effect_Aff.applicativeAff)([  ]);
          })());
      };
  };

  // | Create a resolutions file, using the new format where the installed
  // | version of `purs` is recent enough to be able to understand it, and using
  // | the legacy format otherwise. Returns the created file path.
  var resolutionsFile = function (manifest) {
      return function (args) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Validate.getPursVersion(v))(function (v1) {
                  return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                      var $60 = Data_Ord.greaterThanOrEq(Data_Version_Haskell.ordVersion)(v1)(new Data_Version_Haskell.Version(Data_List.fromFoldable(Data_Foldable.foldableArray)([ 0, 12, 4 ]), Data_List_Types.Nil.value));
                      if ($60) {
                          var hasDependencies = Data_Maybe.maybe(false)(function ($85) {
                              return !Foreign_Object.isEmpty($85);
                          })(manifest.dependencies);
                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("dependencyPath")(args.commandOpts))(function (v2) {
                              return getResolutions(hasDependencies)(v2);
                          });
                      };
                      return getResolutionsLegacy;
                  })())(function (v2) {
                      return writeResolutionsFile(v2);
                  });
              });
          });
      };
  };
  var confirm = function (q) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Read.read({
          prompt: q + " [y/n] ",
          silent: false
      }))(function (v) {
          var v1 = Data_String_Common.trim(Data_String_Common.toLower(v));
          if (v1 === "y") {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
          };
          return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("Aborted");
      });
  };
  var confirmRun = function (out) {
      return function (cmd) {
          return function (args) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("About to execute:"))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("> " + (cmd + (" " + (Data_String_Common.joinWith(" ")(args) + "\x0a")))))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(confirm("Ok?"))(function () {
                          return Pulp_Exec.exec(cmd)(args)(Data_Maybe.Nothing.value);
                      });
                  });
              });
          };
      };
  };
  var checkRegistered = function (out) {
      return function (pkgName) {
          return function (repoUrl) {
              var get = function (filepath) {
                  var reqOptions = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Options.monoidOptions)([ Data_Options.assoc(Node_HTTP_Client.method)("GET"), Data_Options.assoc(Node_HTTP_Client.protocol)("https:"), Data_Options.assoc(Node_HTTP_Client.hostname)("raw.githubusercontent.com"), Data_Options.assoc(Node_HTTP_Client.path)("/purescript/registry/master/" + filepath) ]);
                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_HTTP.httpRequest(reqOptions)(Data_Maybe.Nothing.value))(function (v) {
                      var v1 = Node_HTTP_Client.statusCode(v);
                      if (v1 === 200) {
                          return Pulp_System_Stream.concatStream(Node_HTTP_Client.responseAsStream(v));
                      };
                      var msg = "Unable to fetch file " + (filepath + " from purescript/registry");
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err(msg))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("HTTP " + (Data_Show.show(Data_Show.showInt)(v1) + (" " + Node_HTTP_Client.statusMessage(v)))))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bindFlipped(Effect_Aff.bindAff)(out.err)(Pulp_System_Stream.concatStream(Node_HTTP_Client.responseAsStream(v))))(function () {
                                  return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)(msg);
                              });
                          });
                      });
                  });
              };
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("Checking your package is registered in purescript/registry... "))(function () {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(get("bower-packages.json"))(parseJsonText(Simple_JSON.readObject(Simple_JSON.readString))("registry bower-packages.json")))(function (v) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(get("new-packages.json"))(parseJsonText(Simple_JSON.readObject(Simple_JSON.readString))("registry new-packages.json")))(function (v1) {
                          var v2 = Foreign_Object.lookup(pkgName)(Foreign_Object.union(v)(v1));
                          if (v2 instanceof Data_Maybe.Just) {
                              var $70 = packageUrlIsEqual(repoUrl)(v2.value0);
                              if ($70) {
                                  return out.write("ok\x0a");
                              };
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("\x0a"))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("A package with the name " + (pkgName + " already exists in the registry, but the repository urls did not match.")))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("Repository url in your bower.json file:"))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("  " + repoUrl))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("Repository url in the registry:"))(function () {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("  " + v2.value0))(function () {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("Please make sure these urls match."))(function () {
                                                          return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("Package repository url mismatch");
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          };
                          if (v2 instanceof Data_Maybe.Nothing) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("\x0a"))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("No package with the name " + (pkgName + " exists in the registry.")))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("Please register your package by sending a PR to purescript/registry first, adding your package to `new-packages.json`"))(function () {
                                          return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("Package not registered");
                                      });
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Pulp.Publish (line 103, column 3 - line 129, column 3): " + [ v2.constructor.name ]);
                      });
                  });
              });
          };
      };
  };
  var checkBowerProject = Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists("bower.json"))(function (v) {
      if (v) {
          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
      };
      return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("For the time being, libraries should be installable with Bower" + (" before being submitted to Pursuit. Please create a " + " bower.json file first."));
  });

  // TODO:
  // * Check that the 'origin' remote matches with bower.json
  // * Better handling for the situation where the person running 'pulp publish'
  //   doesn't actually own the repo.
  var action = (function () {
      var getVersion = Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Git.getVersionFromGitTag)(Data_Maybe.maybe(Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("Internal error: No version could be extracted from the git tags" + (" in this repository. This should not have happened. Please" + " report this: https://github.com/bodil/pulp/issues/new")))(Control_Applicative.pure(Effect_Aff.applicativeAff)));
      return function (args) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(checkBowerProject)(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Git.requireCleanGitWorkingTree)(function () {
                      return Control_Bind.bind(Effect_Aff.bindAff)(readTokenFile)(function (v1) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(parseJsonFile(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "dependencies";
                          }))(Simple_JSON.readMaybe(Simple_JSON.readObject(Simple_JSON.readString)))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "name";
                          }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "repository";
                          }))(Simple_JSON.readMaybe(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "type";
                          }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                              return "url";
                          }))(Simple_JSON.readString)(Simple_JSON.readFieldsNil)()())()())))(Simple_JSON.readFieldsNil)()())()())()()))("bower.json"))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(resolutionsFile(v2)(args))(function (v3) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(pursPublish(v3))(gzip))(function (v4) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Utils.orErr(Effect_Aff.monadErrorAff)("'repository' key not present in bower.json")(Data_Functor.map(Data_Maybe.functorMaybe)(function (v5) {
                                          return v5.url;
                                      })(v2.repository)))(function (v5) {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(checkRegistered(v)(v2.name)(v5))(function () {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(getVersion)(function (v6) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(confirm("Publishing " + (v2.name + (" at v" + (Data_Version.showVersion(v6.value1) + ". Is this ok?")))))(function () {
                                                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("noPush")(args.commandOpts))(function (v7) {
                                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.unless(Effect_Aff.applicativeAff)(v7)(Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("pushTo")(args.commandOpts))(function (v8) {
                                                              return confirmRun(v)("git")([ "push", v8, "HEAD", "refs/tags/" + v6.value0 ]);
                                                          })))(function () {
                                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Uploading documentation to Pursuit..."))(function () {
                                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(uploadPursuitDocs(v)(v1)(v4))(function () {
                                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Done."))(function () {
                                                                          return v.log("You can view your package's documentation at: " + pursuitUrl(v2.name)(v6.value1));
                                                                      });
                                                                  });
                                                              });
                                                          });
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      };
  })();
  exports["action"] = action;
  exports["resolutionsFile"] = resolutionsFile;
  exports["parseJsonFile"] = parseJsonFile;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.BumpVersion"] = $PS["Pulp.BumpVersion"] || {};
  var exports = $PS["Pulp.BumpVersion"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Symbol = $PS["Data.Symbol"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Version = $PS["Data.Version"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Git = $PS["Pulp.Git"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_Publish = $PS["Pulp.Publish"];
  var Pulp_System_Read = $PS["Pulp.System.Read"];
  var Pulp_VersionBump = $PS["Pulp.VersionBump"];
  var Simple_JSON = $PS["Simple.JSON"];                
  var untilJust = function (dictMonad) {
      return function (act) {
          return Control_Bind.bind(dictMonad.Bind1())(act)(function (v) {
              if (v instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(v.value0);
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return untilJust(dictMonad)(act);
              };
              throw new Error("Failed pattern match at Pulp.BumpVersion (line 151, column 3 - line 155, column 20): " + [ v.constructor.name ]);
          });
      };
  };
  var tagNewVersion = function (version) {
      var versionStr = "v" + Data_Version.showVersion(version);
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Exec.exec("git")([ "commit", "--allow-empty", "--message=" + versionStr ])(Data_Maybe.Nothing.value))(function () {
          return Pulp_Exec.exec("git")([ "tag", "--annotate", "--message=" + versionStr, versionStr ])(Data_Maybe.Nothing.value);
      });
  };

  // | Prompt and ask the user what to use as the initial version.
  var promptInitial = function (out) {
      var vers = function (major) {
          return function (minor) {
              return function (patch) {
                  return Data_Version.version(major)(minor)(patch)(Data_List_Types.Nil.value)(Data_List_Types.Nil.value);
              };
          };
      };
      var initialOptions = [ new Data_Tuple.Tuple("a", vers(1)(0)(0)), new Data_Tuple.Tuple("b", vers(0)(1)(0)), new Data_Tuple.Tuple("c", vers(0)(0)(1)) ];
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("Initial version"))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("You can release this code as:\x0a"))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(initialOptions)(function (v) {
                  return out.write(v.value0 + (") v" + (Data_Version.showVersion(v.value1) + "\x0a")));
              }))(function () {
                  return untilJust(Effect_Aff.monadAff)(Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Read.read({
                      prompt: "Choose one, or enter a specific version:",
                      silent: false
                  }))(function (v) {
                      var v1 = Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)(Data_String_Common.toLower(v))(initialOptions);
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just(v1.value0));
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          var v2 = Data_Version.parseVersion(Pulp_Git.dropPrefix("v")(v));
                          if (v2 instanceof Data_Either.Right) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just(v2.value0));
                          };
                          if (v2 instanceof Data_Either.Left) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("Sorry, that choice wasn't understood."))(function () {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                              });
                          };
                          throw new Error("Failed pattern match at Pulp.BumpVersion (line 101, column 9 - line 106, column 25): " + [ v2.constructor.name ]);
                      };
                      throw new Error("Failed pattern match at Pulp.BumpVersion (line 97, column 5 - line 106, column 25): " + [ v1.constructor.name ]);
                  }));
              });
          });
      });
  };
  var promptCurrent = function (out) {
      return function (current) {
          var bumpOptions = [ new Data_Tuple.Tuple("a", Pulp_VersionBump.Major.value), new Data_Tuple.Tuple("b", Pulp_VersionBump.Minor.value), new Data_Tuple.Tuple("c", Pulp_VersionBump.Patch.value) ];
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("The current version is v" + Data_Version.showVersion(current)))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.write("You can bump the version to:\x0a"))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(bumpOptions)(function (v) {
                      return out.write(v.value0 + (") v" + (Data_Version.showVersion(Pulp_VersionBump.applyBump(v.value1)(current)) + "\x0a")));
                  }))(function () {
                      return untilJust(Effect_Aff.monadAff)(Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Read.read({
                          prompt: "Choose one, or enter a specific version:",
                          silent: false
                      }))(function (v) {
                          var v1 = Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)(Data_String_Common.toLower(v))(bumpOptions);
                          if (v1 instanceof Data_Maybe.Just) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just(Pulp_VersionBump.applyBump(v1.value0)(current)));
                          };
                          if (v1 instanceof Data_Maybe.Nothing) {
                              var v2 = Data_Version.parseVersion(Pulp_Git.dropPrefix("v")(v));
                              if (v2 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(new Data_Maybe.Just(v2.value0));
                              };
                              if (v2 instanceof Data_Either.Left) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("Sorry, that choice wasn't understood."))(function () {
                                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                                  });
                              };
                              throw new Error("Failed pattern match at Pulp.BumpVersion (line 134, column 9 - line 139, column 25): " + [ v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Pulp.BumpVersion (line 130, column 5 - line 139, column 25): " + [ v1.constructor.name ]);
                      }));
                  });
              });
          });
      };
  };
  var newVersion = function (mbump) {
      return function (mcurrent) {
          return function (out) {
              if (mbump instanceof Data_Maybe.Just && mbump.value0 instanceof Pulp_VersionBump.ToExact) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(mbump.value0.value0);
              };
              if (mcurrent instanceof Data_Maybe.Just && mbump instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Pulp_VersionBump.applyBump(mbump.value0)(mcurrent.value0));
              };
              if (mcurrent instanceof Data_Maybe.Just && mbump instanceof Data_Maybe.Nothing) {
                  return promptCurrent(out)(mcurrent.value0);
              };
              if (mcurrent instanceof Data_Maybe.Nothing) {
                  return promptInitial(out);
              };
              throw new Error("Failed pattern match at Pulp.BumpVersion (line 62, column 33 - line 66, column 60): " + [ mcurrent.constructor.name, mbump.constructor.name ]);
          };
      };
  };
  var internalError = function (msg) {
      return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Internal error in Pulp.BumpVersion: " + (msg + ("\x0a" + "This is a bug. Please report it.\x0a"))));
  };

  // | Try running `purs publish --dry-run` to make sure the code is suitable for
  // | release.
  var checkPursPublish = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Checking your package using purs publish..."))(function () {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Publish.parseJsonFile(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "dependencies";
              }))(Simple_JSON.readMaybe(Simple_JSON.readObject(Simple_JSON.readString)))(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "name";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "repository";
              }))(Simple_JSON.readMaybe(Simple_JSON.readRecord()(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "type";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsCons(new Data_Symbol.IsSymbol(function () {
                  return "url";
              }))(Simple_JSON.readString)(Simple_JSON.readFieldsNil)()())()())))(Simple_JSON.readFieldsNil)()())()())()()))("bower.json"))(function (v1) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Publish.resolutionsFile(v1)(args))(function (v2) {
                      return Pulp_Exec.exec("purs")([ "publish", "--manifest", "bower.json", "--resolutions", v2, "--dry-run" ])(Data_Maybe.Nothing.value);
                  });
              });
          });
      });
  };

  // | Returns the new version that we should bump to.
  var bumpVersion = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.snd))(Pulp_Git.getLatestTaggedVersion))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)("bump")(args.commandArgs))(function (v2) {
                  return Control_Bind.bind(Effect_Aff.bindAff)((function () {
                      if (v2 instanceof Data_Maybe.Just) {
                          return Data_Maybe.maybe(internalError("invalid bump"))(function ($58) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Just.create($58));
                          })(Pulp_VersionBump.parseBump(v2.value0));
                      };
                      if (v2 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Maybe.Nothing.value);
                      };
                      throw new Error("Failed pattern match at Pulp.BumpVersion (line 54, column 12 - line 57, column 28): " + [ v2.constructor.name ]);
                  })())(function (v3) {
                      return newVersion(v3)(v1)(v);
                  });
              });
          });
      });
  };
  var action = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Git.requireCleanGitWorkingTree)(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(checkPursPublish(args))(function () {
                  return Control_Bind.bind(Effect_Aff.bindAff)(bumpVersion(args))(function (v1) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(tagNewVersion(v1))(function () {
                          return v.log("Bumped to: v" + Data_Version.showVersion(v1));
                      });
                  });
              });
          });
      });
  };
  exports["action"] = action;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Docs"] = $PS["Pulp.Docs"] || {};
  var exports = $PS["Pulp.Docs"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Version_Haskell = $PS["Data.Version.Haskell"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Files = $PS["Pulp.Files"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_Validate = $PS["Pulp.Validate"];                
  var action = function (args) {
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Validate.getPursVersion(v))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.cwd))(function (v2) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Generating documentation in " + v2))(function () {
                      var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("withTests")(opts))(function (v3) {
                          var includeWhen = function (b) {
                              return function (act) {
                                  if (b) {
                                      return act;
                                  };
                                  return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Set.empty);
                              };
                          };
                          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Apply.apply(Effect_Aff.applyAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Set.union(Data_Ord.ordString))(includeWhen(v3)(Pulp_Files.testGlobs(opts))))(Pulp_Files.defaultGlobs(opts)))(function (v4) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("buildPath")(opts))(function (v5) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Ord.lessThan(Data_Version_Haskell.ordVersion)(v1)(new Data_Version_Haskell.Version(Data_List.fromFoldable(Data_Foldable.foldableArray)([ 0, 13, 0 ]), Data_List_Types.Nil.value)))(v.log("Warning: 'pulp docs' now only supports 'purs' v0.13.0 and above. Please either update 'purs' or downgrade 'pulp'.")))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Exec.exec("purs")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "docs", "--compile-output", v5 ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(args.remainder)(Pulp_Files.sources(v4))))(Data_Maybe.Nothing.value))(function () {
                                          return v.log("Documentation generated.");
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  exports["action"] = action;
})(PS);
(function(exports) {
  // module Pulp.Init
  "use strict";

  exports.bowerFile = function bowerFile(name) {
    return JSON.stringify({
      name: name,
      ignore: [
        "**/.*",
        "node_modules",
        "bower_components",
        "output"
      ],
      dependencies: {
      },
      devDependencies: {
      },
    }, null, 2) + "\n";
  };
})(PS["Pulp.Init"] = PS["Pulp.Init"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.PackageManager"] = $PS["Pulp.PackageManager"] || {};
  var exports = $PS["Pulp.PackageManager"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Either = $PS["Data.Either"];
  var Data_Function = $PS["Data.Function"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_System_Which = $PS["Pulp.System.Which"];                
  var run = function (execName) {
      return function (errorMsg) {
          return function (args) {
              var errorMsg$prime = "No `" + (execName + ("` executable found.\x0a\x0a" + errorMsg));
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Pulp_System_Which.which(execName)))(function (v) {
                  return Data_Either.either(Data_Function["const"](Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error(errorMsg$prime))))(function (e) {
                      return Pulp_Exec.exec(e)(args)(Data_Maybe.Nothing.value);
                  })(v);
              });
          };
      };
  };
  var launchPscPackage = run("psc-package")("Install psc-package from: https://github.com/purescript/psc-package");
  var launchBower = run("bower")("Pulp no longer bundles Bower. You'll need to install it manually:\x0a\x0a   $ npm install -g bower\x0a");
  exports["launchBower"] = launchBower;
  exports["launchPscPackage"] = launchPscPackage;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Init"] = $PS["Pulp.Init"] || {};
  var exports = $PS["Pulp.Init"];
  var $foreign = $PS["Pulp.Init"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Data_Array = $PS["Data.Array"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_List = $PS["Data.List"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_String_Common = $PS["Data.String.Common"];
  var Data_Version_Haskell = $PS["Data.Version.Haskell"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_Path = $PS["Node.Path"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_PackageManager = $PS["Pulp.PackageManager"];
  var Pulp_System_Files = $PS["Pulp.System.Files"];
  var Pulp_Utils = $PS["Pulp.Utils"];
  var Pulp_Validate = $PS["Pulp.Validate"];                
  var Bower = (function () {
      function Bower() {

      };
      Bower.value = new Bower();
      return Bower;
  })();
  var PscPackage = (function () {
      function PscPackage() {

      };
      PscPackage.value = new PscPackage();
      return PscPackage;
  })();
  var UseEff = (function () {
      function UseEff() {

      };
      UseEff.value = new UseEff();
      return UseEff;
  })();
  var UseEffect = (function () {
      function UseEffect() {

      };
      UseEffect.value = new UseEffect();
      return UseEffect;
  })();
  var unlines = function (arr) {
      return Data_String_Common.joinWith("\x0a")(arr) + "\x0a";
  };
  var testFile = function (v) {
      if (v instanceof UseEffect) {
          return unlines([ "module Test.Main where", "", "import Prelude", "import Effect (Effect)", "import Effect.Console (log)", "", "main :: Effect Unit", "main = do", "  log \"You should add some tests.\"" ]);
      };
      if (v instanceof UseEff) {
          return unlines([ "module Test.Main where", "", "import Prelude", "import Control.Monad.Eff (Eff)", "import Control.Monad.Eff.Console (CONSOLE, log)", "", "main :: forall e. Eff (console :: CONSOLE | e) Unit", "main = do", "  log \"You should add some tests.\"" ]);
      };
      throw new Error("Failed pattern match at Pulp.Init (line 81, column 12 - line 103, column 4): " + [ v.constructor.name ]);
  };
  var pursReplFile = unlines([ "import Prelude" ]);
  var mainFile = function (v) {
      if (v instanceof UseEffect) {
          return unlines([ "module Main where", "", "import Prelude", "import Effect (Effect)", "import Effect.Console (log)", "", "main :: Effect Unit", "main = do", "  log \"Hello sailor!\"" ]);
      };
      if (v instanceof UseEff) {
          return unlines([ "module Main where", "", "import Prelude", "import Control.Monad.Eff (Eff)", "import Control.Monad.Eff.Console (CONSOLE, log)", "", "main :: forall e. Eff (console :: CONSOLE | e) Unit", "main = do", "  log \"Hello sailor!\"" ]);
      };
      throw new Error("Failed pattern match at Pulp.Init (line 56, column 12 - line 78, column 4): " + [ v.constructor.name ]);
  };
  var gitignore = unlines([ "/bower_components/", "/node_modules/", "/.pulp-cache/", "/output/", "/generated-docs/", "/.psc-package/", "/.psc*", "/.purs*", "/.psa*" ]);
  var projectFiles = function (initStyle) {
      return function (effOrEffect) {
          return function (pathRoot) {
              return function (projectName) {
                  var fullPath = function (pathParts) {
                      return Node_Path.concat(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ pathRoot ])(pathParts));
                  };
                  var common = [ {
                      path: fullPath([ ".gitignore" ]),
                      content: gitignore
                  }, {
                      path: fullPath([ ".purs-repl" ]),
                      content: pursReplFile
                  }, {
                      path: fullPath([ "src", "Main.purs" ]),
                      content: mainFile(effOrEffect)
                  }, {
                      path: fullPath([ "test", "Main.purs" ]),
                      content: testFile(effOrEffect)
                  } ];
                  var bowerJson = {
                      path: fullPath([ "bower.json" ]),
                      content: $foreign.bowerFile(projectName)
                  };
                  if (initStyle instanceof Bower) {
                      return Data_Array.cons(bowerJson)(common);
                  };
                  if (initStyle instanceof PscPackage) {
                      return common;
                  };
                  throw new Error("Failed pattern match at Pulp.Init (line 107, column 3 - line 109, column 25): " + [ initStyle.constructor.name ]);
              };
          };
      };
  };
  var init = function (initStyle) {
      return function (effOrEffect) {
          return function (force) {
              return function (out) {
                  var install = function (v) {
                      return function (v1) {
                          if (v instanceof Bower && v1 instanceof UseEff) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_PackageManager.launchBower([ "install", "--save", "purescript-prelude@3.3.0", "purescript-console@3.0.0" ]))(function () {
                                  return Pulp_PackageManager.launchBower([ "install", "--save-dev", "purescript-psci-support@3.0.0" ]);
                              });
                          };
                          if (v instanceof Bower && v1 instanceof UseEffect) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_PackageManager.launchBower([ "install", "--save", "purescript-prelude", "purescript-console", "purescript-effect" ]))(function () {
                                  return Pulp_PackageManager.launchBower([ "install", "--save-dev", "purescript-psci-support" ]);
                              });
                          };
                          if (v instanceof PscPackage && v1 instanceof UseEff) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_PackageManager.launchPscPackage([ "init" ]))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_PackageManager.launchPscPackage([ "install", "eff" ]))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_PackageManager.launchPscPackage([ "install", "console" ]))(function () {
                                          return Pulp_PackageManager.launchPscPackage([ "install", "psci-support" ]);
                                      });
                                  });
                              });
                          };
                          if (v instanceof PscPackage && v1 instanceof UseEffect) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_PackageManager.launchPscPackage([ "init" ]))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_PackageManager.launchPscPackage([ "install", "effect" ]))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_PackageManager.launchPscPackage([ "install", "console" ]))(function () {
                                          return Pulp_PackageManager.launchPscPackage([ "install", "psci-support" ]);
                                      });
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Pulp.Init (line 143, column 5 - line 145, column 77): " + [ v.constructor.name, v1.constructor.name ]);
                      };
                  };
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.cwd))(function (v) {
                      var projectName = Node_Path.basename(v);
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("Generating project skeleton in " + v))(function () {
                          var files = projectFiles(initStyle)(effOrEffect)(v)(projectName);
                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(!force)(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(files)(function (f) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.exists(f.path))(function (v1) {
                                  return Control_Applicative.when(Effect_Aff.applicativeAff)(v1)(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Found " + (f.path + (": " + ("There's already a project here. Run `pulp init --force` " + "if you're sure you want to overwrite it."))))));
                              });
                          })))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Foldable.for_(Effect_Aff.applicativeAff)(Data_Foldable.foldableArray)(files)(function (f) {
                                  var dir = Node_Path.dirname(f.path);
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Applicative.when(Effect_Aff.applicativeAff)(dir !== v)(Pulp_System_Files.mkdirIfNotExist(dir)))(function () {
                                      return Node_FS_Aff.writeTextFile(Node_Encoding.UTF8.value)(f.path)(f.content);
                                  });
                              }))(function () {
                                  return install(initStyle)(effOrEffect);
                              });
                          });
                      });
                  });
              };
          };
      };
  };
  var action = (function () {
      var minEffectVersion = new Data_Version_Haskell.Version(Data_List.fromFoldable(Data_Foldable.foldableArray)([ 0, 12, 0 ]), Data_List_Types.Nil.value);
      var getEffOrEffect = function (out) {
          return function (withEff) {
              return function (withEffect) {
                  if (withEff) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(UseEff.value);
                  };
                  if (withEffect) {
                      return Control_Applicative.pure(Effect_Aff.applicativeAff)(UseEffect.value);
                  };
                  if (Data_Boolean.otherwise) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Validate.getPursVersion(out))(function (v) {
                          var $24 = Data_Ord.lessThan(Data_Version_Haskell.ordVersion)(v)(minEffectVersion);
                          if ($24) {
                              return Control_Applicative.pure(Effect_Aff.applicativeAff)(UseEff.value);
                          };
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(UseEffect.value);
                      });
                  };
                  throw new Error("Failed pattern match at Pulp.Init (line 180, column 3 - line 187, column 21): " + [ out.constructor.name, withEff.constructor.name, withEffect.constructor.name ]);
              };
          };
      };
      return function (args) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("force")(args.commandOpts))(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("pscPackage")(args.globalOpts))(function (v1) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("withEff")(args.commandOpts))(function (v2) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("withEffect")(args.commandOpts))(function (v3) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v4) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(getEffOrEffect(v4)(v2)(v3))(function (v5) {
                                  var $31 = v2 && v3;
                                  if ($31) {
                                      return Pulp_Utils["throw"](Effect_Aff.monadErrorAff)("Cannot specify both --with-eff and --with-effect. Please choose one and try again.");
                                  };
                                  return init((function () {
                                      if (v1) {
                                          return PscPackage.value;
                                      };
                                      return Bower.value;
                                  })())(v5)(v)(v4);
                              });
                          });
                      });
                  });
              });
          });
      };
  })();
  exports["action"] = action;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Repl"] = $PS["Pulp.Repl"] || {};
  var exports = $PS["Pulp.Repl"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Files = $PS["Pulp.Files"];                
  var action = function (args) {
      var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
      return Control_Bind.bind(Effect_Aff.bindAff)(Control_Apply.apply(Effect_Aff.applyAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Set.union(Data_Ord.ordString))(Pulp_Files.defaultGlobs(opts)))(Pulp_Files.testGlobs(opts)))(function (v) {
          return Pulp_Exec.execInteractive("purs")(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ "repl" ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)(Pulp_Files.sources(v))(args.remainder)))(Data_Maybe.Nothing.value);
      });
  };
  exports["action"] = action;
})(PS);
(function(exports) {
  "use strict";
  var http =require("http"); 

  exports.createServer = function (handleRequest) {
    return function () {
      return http.createServer(function (req, res) {
        handleRequest(req)(res)();
      });
    };
  };

  exports.listenImpl = function (server) {
    return function (port) {
      return function (hostname) {
        return function (backlog) {
          return function (done) {
            return function () {
              if (backlog !== null) {
                server.listen(port, hostname, backlog, done);
              } else {
                server.listen(port, hostname, done);
              }
            };
          };
        };
      };
    };
  };

  exports.setStatusCode = function (res) {
    return function (code) {
      return function () {
        res.statusCode = code;
      };
    };
  };

  exports.setStatusMessage = function (res) {
    return function (message) {
      return function () {
        res.statusMessage = message;
      };
    };
  };
})(PS["Node.HTTP"] = PS["Node.HTTP"] || {});
(function($PS) {
  // Generated by purs version 0.12.5

  // | This module defines low-level bindings to the Node HTTP module.
  "use strict";
  $PS["Node.HTTP"] = $PS["Node.HTTP"] || {};
  var exports = $PS["Node.HTTP"];
  var $foreign = $PS["Node.HTTP"];
  var Data_Nullable = $PS["Data.Nullable"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                

  // | Coerce the response object into a writable stream.
  var responseAsStream = Unsafe_Coerce.unsafeCoerce;

  // | Get the request URL
  var requestURL = function ($4) {
      return $4.url;
  };                                               

  // | Listen on a port in order to start accepting HTTP requests. The specified callback will be run when setup is complete.
  var listen = function (server) {
      return function (opts) {
          return function (done) {
              return $foreign.listenImpl(server)(opts.port)(opts.hostname)(Data_Nullable.toNullable(opts.backlog))(done);
          };
      };
  };
  exports["listen"] = listen;
  exports["requestURL"] = requestURL;
  exports["responseAsStream"] = responseAsStream;
  exports["createServer"] = $foreign.createServer;
  exports["setStatusCode"] = $foreign.setStatusCode;
  exports["setStatusMessage"] = $foreign.setStatusMessage;
})(PS);
(function(exports) {
  "use strict";

  exports["new"] = function(path) {
    return function() {
      var s = require('node-static');
      return new s.Server(path, {
        headers: {
          'cache-control': 'no-cache'
        }
      });
    };
  };

  exports.serve = function(server) {
    return function(req) {
      return function(res) {
        return function() {
          server.serve(req, res);
        };
      };
    };
  };

  exports.serveFile = function(server) {
    return function(file) {
      return function(statusCode) {
        return function(req) {
          return function(res) {
            return function() {
              server.serveFile(file, statusCode, {}, req, res);
            };
          };
        };
      };
    };
  };
})(PS["Pulp.System.StaticServer"] = PS["Pulp.System.StaticServer"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.System.StaticServer"] = $PS["Pulp.System.StaticServer"] || {};
  var exports = $PS["Pulp.System.StaticServer"];
  var $foreign = $PS["Pulp.System.StaticServer"];
  exports["new"] = $foreign["new"];
  exports["serve"] = $foreign.serve;
  exports["serveFile"] = $foreign.serveFile;
})(PS);
(function(exports) {
  // module Pulp.Watch

  "use strict";

  exports.watch = function(pattern) {
    return function(act) {
      return function() {
        var Gaze = require("gaze").Gaze;

        var gaze = new Gaze(pattern, { follow: true });

        gaze.on("all", function(_, path) {
          act(path)();
        });
      };
    };
  };
})(PS["Pulp.Watch"] = PS["Pulp.Watch"] || {});
(function(exports) {
  // module Pulp.System.TreeKill
  "use strict";

  exports.treeKill = function treeKill(pid) {
    return function(signal) {
      return function() {
        require("tree-kill")(pid, signal);
      };
    };
  };
})(PS["Pulp.System.TreeKill"] = PS["Pulp.System.TreeKill"] || {});
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.System.TreeKill"] = $PS["Pulp.System.TreeKill"] || {};
  var exports = $PS["Pulp.System.TreeKill"];
  var $foreign = $PS["Pulp.System.TreeKill"];
  exports["treeKill"] = $foreign.treeKill;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Watch"] = $PS["Pulp.Watch"] || {};
  var exports = $PS["Pulp.Watch"];
  var $foreign = $PS["Pulp.Watch"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Array = $PS["Data.Array"];
  var Data_Bounded = $PS["Data.Bounded"];
  var Data_DateTime = $PS["Data.DateTime"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Set = $PS["Data.Set"];
  var Data_Time_Duration = $PS["Data.Time.Duration"];
  var Data_Traversable = $PS["Data.Traversable"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_AVar = $PS["Effect.Aff.AVar"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Now = $PS["Effect.Now"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Node_ChildProcess = $PS["Node.ChildProcess"];
  var Node_Globals = $PS["Node.Globals"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Files = $PS["Pulp.Files"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_System_TreeKill = $PS["Pulp.System.TreeKill"];
  var Pulp_Utils = $PS["Pulp.Utils"];                

  // Returns Nothing if the given Options did not include the relevant options
  // i.e. watching does not make sense with this command.
  var watchDirectories = function (opts) {
      var basicPathOpts = [ "srcPath", "testPath", "dependencyPath" ];
      return Control_Bind.bind(Effect_Aff.bindAff)(Data_Traversable.traverse(Data_Traversable.traversableArray)(Effect_Aff.applicativeAff)(Data_Function.flip(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode))(opts))(basicPathOpts))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Maybe.fromMaybe([  ]))(Pulp_Args_Get.getOption(Foreign_Generic_Class.arrayDecode(Foreign_Generic_Class.stringDecode))("includePaths")(opts)))(function (v1) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Functor.map(Data_Maybe.functorMaybe)(function (v2) {
                  return Data_Semigroup.append(Data_Semigroup.semigroupArray)(v2)(v1);
              })(Data_Traversable.sequence(Data_Traversable.traversableArray)(Data_Maybe.applicativeMaybe)(v)));
          });
      });
  };

  // | Ensure that a callback is only called at some given maximum frequency,
  // | by returning a new callback that does nothing if an attempt is made to
  // | perform it again sooner than the given duration since the last attempt.
  var debounce = function (cooldown) {
      return function (callback) {
          return function __do() {
              var v = Effect_Ref["new"](Data_Bounded.bottom(Data_DateTime.boundedDateTime))();
              return function (info) {
                  return function __do() {
                      var v1 = Effect_Ref.read(v)();
                      var v2 = Effect_Now.nowDateTime();
                      return Control_Applicative.when(Effect.applicativeEffect)(Data_Ord.greaterThan(Data_Time_Duration.ordMilliseconds)(Data_DateTime.diff(Data_Time_Duration.durationMilliseconds)(v2)(v1))(cooldown))(function __do() {
                          Effect_Ref.write(v2)(v)();
                          return callback(info)();
                      })();
                  };
              };
          };
      };
  };
  var watchAff = function (dirs) {
      return function (callback) {
          return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(function __do() {
              var v = debounce(100.0)(function ($25) {
                  return Data_Functor["void"](Effect.functorEffect)(Effect_Aff.launchAff(callback($25)));
              })();
              return $foreign.watch(dirs)(v)();
          });
      };
  };
  var action = function (args) {
      var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(watchDirectories(opts))(Pulp_Utils.orErr(Effect_Aff.monadErrorAff)("This command does not work with --watch")))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Data_Functor.map(Effect.functorEffect)(function ($26) {
                  return Data_Array.filter(function (v2) {
                      return Data_Foldable.notElem(Data_Foldable.foldableArray)(Data_Eq.eqString)(v2)([ "-w", "--watch" ]);
                  })(Data_Array.drop(2)($26));
              })(Node_Process.argv)))(function (v2) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v3) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ChildProcess.fork(Node_Globals["__filename"])(v2)))(function (x) {
                          return Effect_Aff_AVar.put(x)(v3);
                      }))(function () {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Control_Apply.apply(Effect_Aff.applyAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Set.union(Data_Ord.ordString))(Pulp_Files.defaultGlobs(opts)))(Pulp_Files.testGlobs(opts)))(function (v4) {
                              var fileGlobs = Data_Semigroup.append(Data_Semigroup.semigroupArray)(Pulp_Files.sources(v4))(Pulp_Files.ffis(v4));
                              return watchAff(fileGlobs)(function (path) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.take(v3))(function (v5) {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Pulp_System_TreeKill.treeKill(Node_ChildProcess.pid(v5))("SIGTERM")))(function () {
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.write("---\x0a"))(function () {
                                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Source tree changed; restarting:"))(function () {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_ChildProcess.fork(Node_Globals["__filename"])(v2)))(Data_Functor.flap(Data_Functor.functorFn)(Effect_Aff_AVar.put)(v3));
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  exports["watchAff"] = watchAff;
  exports["watchDirectories"] = watchDirectories;
  exports["action"] = action;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Server"] = $PS["Pulp.Server"] || {};
  var exports = $PS["Pulp.Server"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Either = $PS["Data.Either"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Show = $PS["Data.Show"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Aff_AVar = $PS["Effect.Aff.AVar"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_HTTP = $PS["Node.HTTP"];
  var Node_Path = $PS["Node.Path"];
  var Node_Stream = $PS["Node.Stream"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Build = $PS["Pulp.Build"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_System_StaticServer = $PS["Pulp.System.StaticServer"];
  var Pulp_Utils = $PS["Pulp.Utils"];
  var Pulp_Watch = $PS["Pulp.Watch"];                
  var Succeeded = (function () {
      function Succeeded() {

      };
      Succeeded.value = new Succeeded();
      return Succeeded;
  })();
  var Failed = (function () {
      function Failed() {

      };
      Failed.value = new Failed();
      return Failed;
  })();
  var rebuildWith = function (v) {
      return function (args) {
          var addExtras = function ($37) {
              return (function () {
                  if (v.quiet) {
                      return Data_Map_Internal.insert(Data_Ord.ordString)("_silenced")(Data_Maybe.Nothing.value);
                  };
                  return Control_Category.identity(Control_Category.categoryFn);
              })()(Data_Map_Internal.insert(Data_Ord.ordString)("to")(new Data_Maybe.Just(Foreign.unsafeToForeign(v.bundleFileName)))($37));
          };
          return Pulp_Build.build({
              globalOpts: args.globalOpts,
              commandOpts: addExtras(args.commandOpts),
              commandArgs: args.commandArgs,
              command: args.command,
              remainder: args.remainder
          });
      };
  };
  var listen = function (server) {
      return function (opts) {
          return Effect_Aff.makeAff(function (cb) {
              return Control_Apply.applyFirst(Effect.applyEffect)(Data_Monoid.mempty(Effect.monoidEffect(Effect_Aff.monoidCanceler)))(Node_HTTP.listen(server)(opts)(cb(new Data_Either.Right(Data_Unit.unit))));
          });
      };
  };
  var getBundleFileName = function (opts) {
      return Data_Functor.map(Effect_Aff.functorAff)(function (v) {
          return v + "/app.js";
      })(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("buildPath")(opts));
  };
  var createServer = function (rebuildV) {
      return function (bundleFileName) {
          return function __do() {
              var v = Pulp_System_StaticServer["new"](".")();
              return Node_HTTP.createServer(function (req) {
                  return function (res) {
                      var v1 = Node_HTTP.requestURL(req);
                      if (v1 === "/app.js") {
                          return Data_Functor["void"](Effect.functorEffect)(Effect_Aff.launchAff(Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.read(rebuildV))(function (v2) {
                              return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)((function () {
                                  if (v2 instanceof Succeeded) {
                                      return Pulp_System_StaticServer.serveFile(v)(bundleFileName)(200)(req)(res);
                                  };
                                  if (v2 instanceof Failed) {
                                      return function __do() {
                                          Node_HTTP.setStatusCode(res)(400)();
                                          Node_HTTP.setStatusMessage(res)("Rebuild failed")();
                                          var resS = Node_HTTP.responseAsStream(res);
                                          return Data_Functor["void"](Effect.functorEffect)(Node_Stream.writeString(resS)(Node_Encoding.UTF8.value)("Compile error in pulp server")(Node_Stream.end(resS)(Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit))))();
                                      };
                                  };
                                  throw new Error("Failed pattern match at Pulp.Server (line 83, column 24 - line 92, column 46): " + [ v2.constructor.name ]);
                              })());
                          })));
                      };
                      return Pulp_System_StaticServer.serve(v)(req)(res);
                  };
              })();
          };
      };
  };
  var action = function (args) {
      var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(getBundleFileName(opts))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("host")(opts))(function (v2) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.intDecode)("port")(opts))(function (v3) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff_AVar.empty)(function (v4) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(createServer(v4)(v1)))(function (v5) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(listen(v5)({
                                  hostname: v2,
                                  port: v3,
                                  backlog: Data_Maybe.Nothing.value
                              }))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Server listening on http://" + (v2 + (":" + (Data_Show.show(Data_Show.showInt)(v3) + "/")))))(function () {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("quiet")(opts))(function (v6) {
                                          var rebuild = Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(rebuildWith({
                                              bundleFileName: v1,
                                              quiet: v6
                                          })(args)))(function (v7) {
                                              if (v7 instanceof Data_Either.Right) {
                                                  return Effect_Aff_AVar.put(Succeeded.value)(v4);
                                              };
                                              if (v7 instanceof Data_Either.Left) {
                                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Effect_Aff_AVar.put(Failed.value)(v4))(function () {
                                                      return v.err("Failed to rebuild; try to fix the compile errors");
                                                  });
                                              };
                                              throw new Error("Failed pattern match at Pulp.Server (line 59, column 9 - line 65, column 3): " + [ v7.constructor.name ]);
                                          });
                                          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(rebuild)(function () {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Watch.watchDirectories(opts))(Pulp_Utils.orErr(Effect_Aff.monadErrorAff)("Internal error: unexpected Nothing")))(function (v7) {
                                                  var pattern = Data_Functor.map(Data_Functor.functorArray)(function (d) {
                                                      return Node_Path.concat([ d, "**", "*" ]);
                                                  })(v7);
                                                  return Pulp_Watch.watchAff(pattern)(function (v8) {
                                                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Data_Functor["void"](Effect_Aff.functorAff)(Effect_Aff_AVar.take(v4)))(function () {
                                                          return rebuild;
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          });
                      });
                  });
              });
          });
      });
  };
  exports["action"] = action;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Shell"] = $PS["Pulp.Shell"] || {};
  var exports = $PS["Pulp.Shell"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Node_Platform = $PS["Node.Platform"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_System_Files = $PS["Pulp.System.Files"];                
  var shell$prime = function (out) {
      return function (cmd) {
          return function (opts) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("Executing " + cmd))(function () {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)(cmd)(Node_Encoding.UTF8.value)))(function (v) {
                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Files.openTemp({
                          prefix: "pulp-cmd-",
                          suffix: opts.extension
                      }))(function (v1) {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.fdAppend(v1.fd)(v))(function (v2) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.fdClose(v1.fd))(function (v3) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Exec.exec(opts.executable)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(opts.extraArgs)([ v1.path ]))(Data_Maybe.Nothing.value))(function () {
                                      return out.log("Done.");
                                  });
                              });
                          });
                      });
                  });
              });
          };
      };
  };
  var shell = function (out) {
      return function (cmd) {
          var $6 = Data_Eq.eq(Data_Maybe.eqMaybe(Node_Platform.eqPlatform))(Node_Process.platform)(new Data_Maybe.Just(Node_Platform.Win32.value));
          if ($6) {
              return shell$prime(out)(cmd)({
                  extension: ".cmd",
                  executable: "cmd",
                  extraArgs: [ "/s", "/c" ]
              });
          };
          return shell$prime(out)(cmd)({
              extension: ".sh",
              executable: "sh",
              extraArgs: [  ]
          });
      };
  };
  exports["shell"] = shell;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Pulp.Test"] = $PS["Pulp.Test"] || {};
  var exports = $PS["Pulp.Test"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Node_Buffer = $PS["Node.Buffer"];
  var Node_Buffer_Class = $PS["Node.Buffer.Class"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Aff = $PS["Node.FS.Aff"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Build = $PS["Pulp.Build"];
  var Pulp_Exec = $PS["Pulp.Exec"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_Run = $PS["Pulp.Run"];
  var Pulp_System_Files = $PS["Pulp.System.Files"];                
  var action = function (args) {
      var opts = Data_Map_Internal.union(Data_Ord.ordString)(args.globalOpts)(args.commandOpts);
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("runtime")(opts))(function (v1) {
              var isNode = v1 === "node";
              var changeOpts = (function () {
                  if (isNode) {
                      return Control_Category.identity(Control_Category.categoryFn);
                  };
                  return Data_Map_Internal.insert(Data_Ord.ordString)("to")(new Data_Maybe.Just(Foreign.unsafeToForeign("./output/test.js")));
              })();
              var buildArgs = {
                  remainder: [  ],
                  commandOpts: changeOpts(args.commandOpts),
                  command: args.command,
                  commandArgs: args.commandArgs,
                  globalOpts: args.globalOpts
              };
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Build.testBuild(buildArgs))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(v.log("Running tests..."))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)((function () {
                          if (isNode) {
                              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("main")(opts))(function (v2) {
                                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("buildPath")(opts))(function (v3) {
                                      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Run.setupEnv(v3))(function (v4) {
                                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_System_Files.openTemp({
                                              prefix: "pulp-test",
                                              suffix: ".js"
                                          }))(function (v5) {
                                              return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Buffer_Class.fromString(Node_Buffer.mutableBufferEffect)(Pulp_Run.makeEntry(v2))(Node_Encoding.UTF8.value)))(function (v6) {
                                                  return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.fdAppend(v5.fd)(v6))(function (v7) {
                                                      return Control_Bind.bind(Effect_Aff.bindAff)(Node_FS_Aff.fdClose(v5.fd))(function (v8) {
                                                          return Pulp_Exec.exec(v1)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v5.path ])(args.remainder))(new Data_Maybe.Just(v4));
                                                      });
                                                  });
                                              });
                                          });
                                      });
                                  });
                              });
                          };
                          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get["getOption'"](Foreign_Generic_Class.stringDecode)("to")(buildArgs.commandOpts))(function (v2) {
                              return Pulp_Exec.exec(v1)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ v2 ])(args.remainder))(Data_Maybe.Nothing.value);
                          });
                      })())(function () {
                          return v.log("Tests OK.");
                      });
                  });
              });
          });
      });
  };
  exports["action"] = action;
})(PS);
(function($PS) {
  // Generated by purs version 0.12.5
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var $foreign = $PS["Main"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Error_Class = $PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = $PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = $PS["Control.Monad.Except.Trans"];
  var Data_Array = $PS["Data.Array"];
  var Data_Either = $PS["Data.Either"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Foldable = $PS["Data.Foldable"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Identity = $PS["Data.Identity"];
  var Data_List_Types = $PS["Data.List.Types"];
  var Data_Map_Internal = $PS["Data.Map.Internal"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Show = $PS["Data.Show"];
  var Data_String_CodeUnits = $PS["Data.String.CodeUnits"];
  var Data_Unit = $PS["Data.Unit"];
  var Data_Version = $PS["Data.Version"];
  var Effect = $PS["Effect"];
  var Effect_Aff = $PS["Effect.Aff"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Console = $PS["Effect.Console"];
  var Effect_Exception = $PS["Effect.Exception"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Foreign = $PS["Foreign"];
  var Foreign_Generic_Class = $PS["Foreign.Generic.Class"];
  var Foreign_Index = $PS["Foreign.Index"];
  var Foreign_JSON = $PS["Foreign.JSON"];
  var Node_Encoding = $PS["Node.Encoding"];
  var Node_FS_Sync = $PS["Node.FS.Sync"];
  var Node_Path = $PS["Node.Path"];
  var Node_Process = $PS["Node.Process"];
  var Pulp_Args = $PS["Pulp.Args"];
  var Pulp_Args_Get = $PS["Pulp.Args.Get"];
  var Pulp_Args_Help = $PS["Pulp.Args.Help"];
  var Pulp_Args_Parser = $PS["Pulp.Args.Parser"];
  var Pulp_Args_Types = $PS["Pulp.Args.Types"];
  var Pulp_Browserify = $PS["Pulp.Browserify"];
  var Pulp_Build = $PS["Pulp.Build"];
  var Pulp_BumpVersion = $PS["Pulp.BumpVersion"];
  var Pulp_Docs = $PS["Pulp.Docs"];
  var Pulp_Init = $PS["Pulp.Init"];
  var Pulp_Login = $PS["Pulp.Login"];
  var Pulp_Outputter = $PS["Pulp.Outputter"];
  var Pulp_Project = $PS["Pulp.Project"];
  var Pulp_Publish = $PS["Pulp.Publish"];
  var Pulp_Repl = $PS["Pulp.Repl"];
  var Pulp_Run = $PS["Pulp.Run"];
  var Pulp_Server = $PS["Pulp.Server"];
  var Pulp_Shell = $PS["Pulp.Shell"];
  var Pulp_System_FFI = $PS["Pulp.System.FFI"];
  var Pulp_Test = $PS["Pulp.Test"];
  var Pulp_Validate = $PS["Pulp.Validate"];
  var Pulp_Version = $PS["Pulp.Version"];
  var Pulp_Watch = $PS["Pulp.Watch"];
  var Text_Parsing_Parser = $PS["Text.Parsing.Parser"];                
  var succeeded = Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit));
  var runWithArgs = function (args) {
      var runShellForOption = function (option) {
          return function (opts) {
              return function (out) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getOption(Foreign_Generic_Class.stringDecode)(option)(opts))(function (v) {
                      if (v instanceof Data_Maybe.Just) {
                          return Pulp_Shell.shell(out)(v.value0);
                      };
                      if (v instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Effect_Aff.applicativeAff)(Data_Unit.unit);
                      };
                      throw new Error("Failed pattern match at Main (line 301, column 5 - line 303, column 28): " + [ v.constructor.name ]);
                  });
              };
          };
      };
      var noProject = [ "init", "login" ];
    
      // This is really quite gross, especially with _project. Not sure exactly
      // how to go about improving this.
  var addProject = function (as) {
          var $17 = Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(as.command.name)(noProject);
          if ($17) {
              return Control_Applicative.pure(Effect_Aff.applicativeAff)(as);
          };
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Project.getProject(as.globalOpts))(function (v) {
              var globalOpts$prime = Data_Map_Internal.insert(Data_Ord.ordString)("_project")(new Data_Maybe.Just(Foreign.unsafeToForeign(v)))(as.globalOpts);
              return Control_Applicative.pure(Effect_Aff.applicativeAff)({
                  globalOpts: globalOpts$prime,
                  command: as.command,
                  commandArgs: as.commandArgs,
                  commandOpts: as.commandOpts,
                  remainder: as.remainder
              });
          });
      };
      return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Outputter.getOutputter(args))(function (v) {
          return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Validate.validate(v))(function (v1) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Get.getFlag("watch")(args.globalOpts))(function (v2) {
                  return Control_Bind.bind(Effect_Aff.bindAff)(addProject(args))(function (v3) {
                      var $22 = v2 && args.command.name !== "server";
                      if ($22) {
                          return Pulp_Args.runAction(Pulp_Watch.action)(v3);
                      };
                      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(runShellForOption("before")(v3.globalOpts)(v))(function () {
                          return Control_Bind.bind(Effect_Aff.bindAff)(Effect_Aff.attempt(Pulp_Args.runAction(args.command.action)(v3)))(function (v4) {
                              if (v4 instanceof Data_Either.Left) {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(runShellForOption("else")(v3.globalOpts)(v))(function () {
                                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Effect_Exception.throwException(v4.value0));
                                  });
                              };
                              if (v4 instanceof Data_Either.Right) {
                                  return runShellForOption("then")(v3.globalOpts)(v);
                              };
                              throw new Error("Failed pattern match at Main (line 280, column 7 - line 285, column 56): " + [ v4.constructor.name ]);
                          });
                      });
                  });
              });
          });
      });
  };
  var requireNodeAtLeast = function (minimum) {
      var stripV = function (str) {
          return Data_Maybe.fromMaybe(str)(Data_String_CodeUnits.stripPrefix("v")(str));
      };
      var v = Data_Version.parseVersion(stripV(Node_Process.version));
      if (v instanceof Data_Either.Left) {
          var message = Text_Parsing_Parser.parseErrorMessage(v.value0);
          return Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Failed to parse node.js version: " + message));
      };
      if (v instanceof Data_Either.Right) {
          return Control_Applicative.when(Effect_Aff.applicativeAff)(Data_Ord.lessThan(Data_Version.ordVersion)(v.value0)(minimum))(Control_Monad_Error_Class.throwError(Effect_Aff.monadThrowAff)(Effect_Exception.error("Your node.js version is too old " + ("(required: " + (Data_Version.showVersion(minimum) + (", actual: " + (Data_Version.showVersion(v.value0) + ")")))))));
      };
      throw new Error("Failed pattern match at Main (line 307, column 3 - line 316, column 56): " + [ v.constructor.name ]);
  };
  var remainderToTest = new Data_Maybe.Just("Passthrough options are sent to the test program. " + "This can be useful for only running one particular test, for instance.");
  var remainderToRepl = new Data_Maybe.Just("Passthrough options are sent to `purs repl`.");
  var remainderToPurs = new Data_Maybe.Just("Passthrough options are sent to `purs compile`.");
  var remainderToProgram = new Data_Maybe.Just("Passthrough options are sent to your program.");
  var remainderToDocs = new Data_Maybe.Just("Passthrough options are sent to `purs docs`.");
  var remainderToBundle = new Data_Maybe.Just("Passthrough options are sent to `purs bundle`.");

  // TODO: This is possibly just a temporary separation from buildArgs; at the
  //       moment, the browserify action doesn't support this option, but it's
  //       definitely in the realm of possibility.
  var moduleArgs = [ Pulp_Args.option("modules")([ "--modules" ])(Pulp_Args_Types.string)("Additional modules to be included in the output bundle (comma-separated list).") ];
  var globals = [ Pulp_Args.option("bowerFile")([ "--bower-file", "-b" ])(Pulp_Args_Types.file)("Read this bower.json file instead of autodetecting it."), Pulp_Args.option("pscPackage")([ "--psc-package" ])(Pulp_Args_Types.flag)("Use psc-package for package management."), Pulp_Args.option("watch")([ "--watch", "-w" ])(Pulp_Args_Types.flag)("Watch source directories and re-run command if something changes."), Pulp_Args.option("monochrome")([ "--monochrome" ])(Pulp_Args_Types.flag)("Don't colourise log output."), Pulp_Args.option("before")([ "--before" ])(Pulp_Args_Types.string)("Run a shell command before the operation begins. Useful with `--watch`, eg. `--watch --before clear`."), Pulp_Args.option("then")([ "--then" ])(Pulp_Args_Types.string)("Run a shell command after the operation finishes successfully. Useful with `--watch`, eg. `--watch --then 'say Done'`"), Pulp_Args.option("else")([ "--else" ])(Pulp_Args_Types.string)("Run a shell command if an operation failed. Useful with `--watch`, eg. `--watch --then 'say Done' --else 'say Failed'`"), Pulp_Args.option("version")([ "--version", "-v" ])(Pulp_Args_Types.flag)("Show current pulp version.") ];
  var failed = function (err) {
      return function __do() {
          Effect_Console.error("* ERROR: " + Effect_Exception.message(err))();
          return Node_Process.exit(1)();
      };
  };
  var defaultDependencyPath = (function () {
      var readFromBowerRc = function __do() {
          var v = Node_FS_Sync.readTextFile(Node_Encoding.UTF8.value)(".bowerrc")();
          var v1 = Control_Monad_Except.runExcept(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(Data_Identity.monadIdentity))(Foreign_JSON.parseJSON(v))(Foreign_Index.readProp("directory")))(Foreign.readString));
          if (v1 instanceof Data_Either.Right) {
              return v1.value0;
          };
          if (v1 instanceof Data_Either.Left) {
              return Effect_Exception.throwException(Effect_Exception.error(Data_Show.show(Data_List_Types.showNonEmptyList(Foreign.showForeignError))(v1.value0)))();
          };
          throw new Error("Failed pattern match at Main (line 78, column 5 - line 80, column 53): " + [ v1.constructor.name ]);
      };
      return Effect_Unsafe.unsafePerformEffect(Effect_Exception.catchException(Data_Function["const"](Control_Applicative.pure(Effect.applicativeEffect)("bower_components")))(readFromBowerRc));
  })();
  var dependencyPathOption = Pulp_Args.optionDefault("dependencyPath")([ "--dependency-path" ])(Pulp_Args_Types.directory)("Directory for PureScript dependency files.")(defaultDependencyPath);

  // | Options for any command requiring paths
  var pathArgs = [ Pulp_Args.optionDefault("includePaths")([ "--include", "-I" ])(Pulp_Args_Types.directories)("Additional directories for PureScript source files, separated by `" + (Node_Path.delimiter + "`."))([  ]), Pulp_Args.optionDefault("srcPath")([ "--src-path" ])(Pulp_Args_Types.directory)("Directory for PureScript source files.")("src"), Pulp_Args.optionDefault("testPath")([ "--test-path" ])(Pulp_Args_Types.directory)("Directory for PureScript test files.")("test"), dependencyPathOption ];
  var buildPath = Pulp_Args.optionDefault("buildPath")([ "--build-path", "-o" ])(Pulp_Args_Types.string)("Path for compiler output.")("./output");

  // | Options common to 'build', 'test', and 'browserify'
  var buildishArgs = Data_Semigroup.append(Data_Semigroup.semigroupArray)([ buildPath, Pulp_Args.option("noPsa")([ "--no-psa" ])(Pulp_Args_Types.flag)("Do not attempt to use the psa frontend instead of purs compile") ])(pathArgs);
  var runArgs = Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pulp_Args.optionDefault("main")([ "--main", "-m" ])(Pulp_Args_Types.string)("Module to be used as the application's entry point.")("Main"), Pulp_Args.option("jobs")([ "--jobs", "-j" ])(Pulp_Args_Types["int"])("Tell purs to use the specified number of cores.") ])(buildishArgs);
  var buildArgs = Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pulp_Args.option("to")([ "--to", "-t" ])(Pulp_Args_Types.string)("Output file name (stdout if not specified)."), Pulp_Args.option("optimise")([ "--optimise", "-O" ])(Pulp_Args_Types.flag)("Perform dead code elimination."), Pulp_Args.option("skipEntryPoint")([ "--skip-entry-point" ])(Pulp_Args_Types.flag)("Don't add code to automatically invoke Main."), Pulp_Args.option("sourceMaps")([ "--source-maps" ])(Pulp_Args_Types.flag)("Generate source maps") ])(runArgs);
  var commands = [ Pulp_Args.command("init")("Generate an example PureScript project.")(Data_Maybe.Nothing.value)(Pulp_Init.action)([ Pulp_Args.option("force")([ "--force" ])(Pulp_Args_Types.flag)("Overwrite any project found in the current directory."), Pulp_Args.option("withEff")([ "--with-eff" ])(Pulp_Args_Types.flag)("Generate project using Eff, regardless of the detected compiler version."), Pulp_Args.option("withEffect")([ "--with-effect" ])(Pulp_Args_Types.flag)("Generate project using Effect, regardless of the detected compiler version.") ]), Pulp_Args.command("build")("Build the project.")(remainderToPurs)(Pulp_Build.action)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(buildArgs)(moduleArgs)), Pulp_Args.command("test")("Run project tests.")(remainderToTest)(Pulp_Test.action)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pulp_Args.optionDefault("main")([ "--main", "-m" ])(Pulp_Args_Types.string)("Test entry point.")("Test.Main"), Pulp_Args.optionDefault("runtime")([ "--runtime", "-r" ])(Pulp_Args_Types.string)("Run test script using this command instead of Node.")("node") ])(buildishArgs)), Pulp_Args.command("browserify")("Produce a deployable bundle using Browserify.")(remainderToBundle)(Pulp_Browserify.action)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pulp_Args.option("transform")([ "--transform" ])(Pulp_Args_Types.string)("Apply a Browserify transform."), Pulp_Args.option("force")([ "--force" ])(Pulp_Args_Types.flag)("Force a non-incremental build by deleting the build cache."), Pulp_Args.option("standalone")([ "--standalone" ])(Pulp_Args_Types.string)("Output a UMD bundle with the given external module name."), Pulp_Args.option("skipCompile")([ "--skip-compile" ])(Pulp_Args_Types.flag)("Assume PureScript code has already been compiled. Useful for when you want to pass options to purs.") ])(buildArgs)), Pulp_Args.command("run")("Compile and run the project.")(remainderToProgram)(Pulp_Run.action)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pulp_Args.optionDefault("runtime")([ "--runtime", "-r" ])(Pulp_Args_Types.string)("Run the program using this command instead of Node.")("node") ])(runArgs)), Pulp_Args.command("docs")("Generate project documentation.")(remainderToDocs)(Pulp_Docs.action)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ buildPath, Pulp_Args.option("withTests")([ "--with-tests", "-t" ])(Pulp_Args_Types.flag)("Include tests.") ])(pathArgs)), Pulp_Args.commandWithAlias("repl")("Launch a PureScript REPL configured for the project.")(remainderToRepl)(Pulp_Repl.action)(pathArgs)([ "psci" ]), Pulp_Args.command("server")("Launch a development server.")(Data_Maybe.Nothing.value)(Pulp_Server.action)(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Pulp_Args.optionDefault("main")([ "--main", "-m" ])(Pulp_Args_Types.string)("Application's entry point.")("Main"), Pulp_Args.optionDefault("port")([ "--port", "-p" ])(Pulp_Args_Types["int"])("Port number to listen on.")(1337), Pulp_Args.optionDefault("host")([ "--host" ])(Pulp_Args_Types.string)("IP address to bind the server to.")("localhost"), Pulp_Args.option("quiet")([ "--quiet", "-q" ])(Pulp_Args_Types.flag)("Display nothing to the console when rebuilding.") ])(buildishArgs)), Pulp_Args.command("login")("Obtain and store a token for uploading packages to Pursuit.")(Data_Maybe.Nothing.value)(Pulp_Login.action)([  ]), Pulp_Args.commandWithArgs("version")("Bump and tag a new version in preparation for release.")(Data_Maybe.Nothing.value)(Pulp_BumpVersion.action)([ dependencyPathOption ])([ Pulp_Args.argument("bump")(Pulp_Args_Types.versionBump)("How to bump the version. Acceptable values: 'major', 'minor', 'patch', or any specific version. If omitted, Pulp will prompt you for a version.")(false) ]), Pulp_Args.command("publish")("Publish a previously tagged version to Bower and Pursuit.")(Data_Maybe.Nothing.value)(Pulp_Publish.action)([ Pulp_Args.optionDefault("pushTo")([ "--push-to" ])(Pulp_Args_Types.string)("The Git remote to push commits and tags to.")("origin"), Pulp_Args.option("noPush")([ "--no-push" ])(Pulp_Args_Types.flag)("Skip pushing commits or tags to any remote."), dependencyPathOption ]) ];
  var main = (function () {
      var out = Pulp_Outputter.makeOutputter(false);
      var handleParseError = function (v) {
          return function (err) {
              if (v instanceof Data_Maybe.Just) {
                  if (Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(v.value0)([ "--version", "-v" ])) {
                      return Pulp_Version.printVersion;
                  };
                  if (Data_Foldable.elem(Data_Foldable.foldableArray)(Data_Eq.eqString)(v.value0)([ "--help", "-h" ])) {
                      return Pulp_Args_Help.printHelp(out)(globals)(commands);
                  };
              };
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.err("Error: " + err))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(Pulp_Args_Help.printHelp(out)(globals)(commands))(function () {
                      return Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.exit(1));
                  });
              });
          };
      };
      return Data_Functor["void"](Effect.functorEffect)(Effect_Aff.runAff(Data_Either.either(failed)(succeeded))(Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(requireNodeAtLeast(Data_Version.version(4)(0)(0)(Data_List_Types.Nil.value)(Data_List_Types.Nil.value)))(function () {
          return Control_Bind.bind(Effect_Aff.bindAff)(Data_Functor.map(Effect_Aff.functorAff)(Data_Array.drop(2))(Effect_Class.liftEffect(Effect_Aff.monadEffectAff)(Node_Process.argv)))(function (v) {
              return Control_Bind.bind(Effect_Aff.bindAff)(Pulp_Args_Parser.parse(globals)(commands)(v))(function (v1) {
                  if (v1 instanceof Data_Either.Left) {
                      return handleParseError(Data_Array.head(v))(Text_Parsing_Parser.parseErrorMessage(v1.value0));
                  };
                  if (v1 instanceof Data_Either.Right && v1.value0 instanceof Data_Either.Left) {
                      return Pulp_Args_Help.printCommandHelp(out)(globals)(v1.value0.value0);
                  };
                  if (v1 instanceof Data_Either.Right && v1.value0 instanceof Data_Either.Right) {
                      return runWithArgs(v1.value0.value0);
                  };
                  throw new Error("Failed pattern match at Main (line 247, column 17 - line 253, column 38): " + [ v1.constructor.name ]);
              });
          });
      })));
  })();
  var argsParserDiagnostics = function (opts) {
      var out = Pulp_Outputter.makeOutputter(false);
      return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("Globals: " + Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Data_Maybe.showMaybe(Data_Show.showString)))(Data_Functor.map(Data_Map_Internal.functorMap)(Data_Functor.map(Data_Maybe.functorMaybe)(Pulp_System_FFI.unsafeInspect))(opts.globalOpts))))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("Command: " + opts.command.name))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Effect_Aff.bindAff)(out.log("Locals: " + Data_Show.show(Data_Map_Internal.showMap(Data_Show.showString)(Data_Maybe.showMaybe(Data_Show.showString)))(Data_Functor.map(Data_Map_Internal.functorMap)(Data_Functor.map(Data_Maybe.functorMaybe)(Pulp_System_FFI.unsafeInspect))(opts.commandOpts))))(function () {
                  return out.log("Remainder: " + Data_Show.show(Data_Show.showArray(Data_Show.showString))(opts.remainder));
              });
          });
      });
  };
  exports["globals"] = globals;
  exports["defaultDependencyPath"] = defaultDependencyPath;
  exports["dependencyPathOption"] = dependencyPathOption;
  exports["pathArgs"] = pathArgs;
  exports["buildPath"] = buildPath;
  exports["buildishArgs"] = buildishArgs;
  exports["runArgs"] = runArgs;
  exports["buildArgs"] = buildArgs;
  exports["moduleArgs"] = moduleArgs;
  exports["remainderToPurs"] = remainderToPurs;
  exports["remainderToTest"] = remainderToTest;
  exports["remainderToBundle"] = remainderToBundle;
  exports["remainderToProgram"] = remainderToProgram;
  exports["remainderToDocs"] = remainderToDocs;
  exports["remainderToRepl"] = remainderToRepl;
  exports["commands"] = commands;
  exports["failed"] = failed;
  exports["succeeded"] = succeeded;
  exports["main"] = main;
  exports["runWithArgs"] = runWithArgs;
  exports["requireNodeAtLeast"] = requireNodeAtLeast;
  exports["argsParserDiagnostics"] = argsParserDiagnostics;
  exports["logStack"] = $foreign.logStack;
})(PS);
PS["Main"].main();